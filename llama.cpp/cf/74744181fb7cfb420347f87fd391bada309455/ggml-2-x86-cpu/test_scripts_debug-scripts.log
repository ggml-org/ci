+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.629 I build: 4830 (cf747441) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.000.841 I main: load the model and apply lora adapter, if any
0.00.084.763 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.084.776 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.084.876 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.084.900 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.084.902 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.084.909 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.084.910 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.084.912 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.084.914 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.084.916 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.084.917 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.084.924 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.084.926 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.084.927 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.084.929 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.084.931 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.301.021 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.403.393 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.426.330 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.426.343 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.426.345 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.426.347 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.426.349 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.426.351 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.426.353 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.426.358 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.426.359 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.426.361 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.426.363 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.426.365 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.426.374 I llama_model_loader: - type  f32:   37 tensors
0.00.426.376 I llama_model_loader: - type q8_0:  127 tensors
0.00.426.395 I print_info: file format = GGUF V3 (latest)
0.00.426.396 I print_info: file type   = Q8_0
0.00.426.398 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.709.803 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.839.991 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.841.028 I load: special tokens cache size = 5
0.01.083.931 I load: token to piece cache size = 1.6014 MB
0.01.084.012 I print_info: arch             = gemma
0.01.084.014 I print_info: vocab_only       = 0
0.01.084.014 I print_info: n_ctx_train      = 8192
0.01.084.015 I print_info: n_embd           = 2048
0.01.084.015 I print_info: n_layer          = 18
0.01.084.082 I print_info: n_head           = 8
0.01.084.089 I print_info: n_head_kv        = 1
0.01.084.090 I print_info: n_rot            = 256
0.01.084.090 I print_info: n_swa            = 0
0.01.084.090 I print_info: n_embd_head_k    = 256
0.01.084.091 I print_info: n_embd_head_v    = 256
0.01.084.096 I print_info: n_gqa            = 8
0.01.084.101 I print_info: n_embd_k_gqa     = 256
0.01.084.132 I print_info: n_embd_v_gqa     = 256
0.01.084.134 I print_info: f_norm_eps       = 0.0e+00
0.01.084.136 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.084.137 I print_info: f_clamp_kqv      = 0.0e+00
0.01.084.137 I print_info: f_max_alibi_bias = 0.0e+00
0.01.084.138 I print_info: f_logit_scale    = 0.0e+00
0.01.084.143 I print_info: n_ff             = 16384
0.01.084.144 I print_info: n_expert         = 0
0.01.084.154 I print_info: n_expert_used    = 0
0.01.084.154 I print_info: causal attn      = 1
0.01.084.155 I print_info: pooling type     = 0
0.01.084.155 I print_info: rope type        = 2
0.01.084.156 I print_info: rope scaling     = linear
0.01.084.158 I print_info: freq_base_train  = 10000.0
0.01.084.158 I print_info: freq_scale_train = 1
0.01.084.159 I print_info: n_ctx_orig_yarn  = 8192
0.01.084.166 I print_info: rope_finetuned   = unknown
0.01.084.167 I print_info: ssm_d_conv       = 0
0.01.084.168 I print_info: ssm_d_inner      = 0
0.01.084.175 I print_info: ssm_d_state      = 0
0.01.084.176 I print_info: ssm_dt_rank      = 0
0.01.084.177 I print_info: ssm_dt_b_c_rms   = 0
0.01.084.178 I print_info: model type       = 2B
0.01.084.179 I print_info: model params     = 2.51 B
0.01.084.179 I print_info: general.name     = gemma-1.1-2b-it
0.01.084.183 I print_info: vocab type       = SPM
0.01.084.184 I print_info: n_vocab          = 256000
0.01.084.187 I print_info: n_merges         = 0
0.01.084.188 I print_info: BOS token        = 2 '<bos>'
0.01.084.189 I print_info: EOS token        = 1 '<eos>'
0.01.084.197 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.084.197 I print_info: UNK token        = 3 '<unk>'
0.01.084.198 I print_info: PAD token        = 0 '<pad>'
0.01.084.199 I print_info: LF token         = 227 '<0x0A>'
0.01.084.206 I print_info: EOG token        = 1 '<eos>'
0.01.084.207 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.084.208 I print_info: max token length = 93
0.01.084.210 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.173.643 I load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.173.651 I load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.173.652 I load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.173.653 I load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.173.653 I load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.173.654 I load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.180.713 I llama_context_base: constructing llama_context_base, gtype = 0
0.01.180.724 I llama_context_base: n_seq_max     = 1
0.01.180.724 I llama_context_base: n_ctx         = 4096
0.01.180.724 I llama_context_base: n_ctx_per_seq = 4096
0.01.180.725 I llama_context_base: n_batch       = 2048
0.01.180.725 I llama_context_base: n_ubatch      = 512
0.01.180.726 I llama_context_base: causal_attn   = 1
0.01.180.726 I llama_context_base: flash_attn    = 0
0.01.180.729 I llama_context_base: freq_base     = 10000.0
0.01.180.730 I llama_context_base: freq_scale    = 1
0.01.180.731 W llama_context_base: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.180.950 I llama_context_base:        CPU  output buffer size =     0.98 MiB
0.01.180.962 I llama_context_kv_self: constructing llama_context_kv_self
0.01.181.006 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.195.440 I init:        CPU KV buffer size =    72.00 MiB
0.01.195.487 I llama_context_kv_self: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.199.488 I reserve:        CPU compute buffer size =   509.01 MiB
0.01.199.493 I reserve: graph nodes  = 619
0.01.199.493 I reserve: graph splits = 1
0.01.199.503 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.199.503 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.839.944 I main: llama threadpool init, n_threads = 4
0.01.839.960 I 
0.01.840.045 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.840.049 I 
0.01.840.292 I sampler seed: 336629465
0.01.840.305 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.840.315 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.840.318 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.840.318 I 
 increasities can be expressed mathematically as follows:

$$r = \frac{a}{b + t}$$

where \(a\), \(b\),

0.15.287.724 I llama_perf_sampler_print:    sampling time =      47.62 ms /    33 runs   (    1.44 ms per token,   692.97 tokens per second)
0.15.287.728 I llama_perf_context_print:        load time =    1811.95 ms
0.15.287.730 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.287.732 I llama_perf_context_print:        eval time =   13364.83 ms /    32 runs   (  417.65 ms per token,     2.39 tokens per second)
0.15.287.733 I llama_perf_context_print:       total time =   13474.82 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.681 I build: 4830 (cf747441) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.890 I main: llama backend init
0.00.000.898 I main: load the model and apply lora adapter, if any
0.00.085.883 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.086.006 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.031 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.034 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.040 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.042 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.044 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.046 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.048 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.049 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.056 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.058 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.060 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.062 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.063 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.308.977 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.411.034 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.434.169 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.434.183 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.434.185 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.434.187 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.434.189 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.434.191 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.434.193 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.434.197 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.434.199 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.434.201 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.434.204 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.434.205 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.434.213 I llama_model_loader: - type  f32:   37 tensors
0.00.434.216 I llama_model_loader: - type q8_0:  127 tensors
0.00.434.235 I print_info: file format = GGUF V3 (latest)
0.00.434.236 I print_info: file type   = Q8_0
0.00.434.238 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.711.268 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.837.125 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.838.091 I load: special tokens cache size = 5
0.01.091.834 I load: token to piece cache size = 1.6014 MB
0.01.091.917 I print_info: arch             = gemma
0.01.091.918 I print_info: vocab_only       = 0
0.01.091.919 I print_info: n_ctx_train      = 8192
0.01.091.919 I print_info: n_embd           = 2048
0.01.091.920 I print_info: n_layer          = 18
0.01.091.986 I print_info: n_head           = 8
0.01.091.993 I print_info: n_head_kv        = 1
0.01.091.994 I print_info: n_rot            = 256
0.01.091.994 I print_info: n_swa            = 0
0.01.091.996 I print_info: n_embd_head_k    = 256
0.01.091.996 I print_info: n_embd_head_v    = 256
0.01.092.002 I print_info: n_gqa            = 8
0.01.092.007 I print_info: n_embd_k_gqa     = 256
0.01.092.013 I print_info: n_embd_v_gqa     = 256
0.01.092.014 I print_info: f_norm_eps       = 0.0e+00
0.01.092.015 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.092.016 I print_info: f_clamp_kqv      = 0.0e+00
0.01.092.016 I print_info: f_max_alibi_bias = 0.0e+00
0.01.092.017 I print_info: f_logit_scale    = 0.0e+00
0.01.092.021 I print_info: n_ff             = 16384
0.01.092.022 I print_info: n_expert         = 0
0.01.092.022 I print_info: n_expert_used    = 0
0.01.092.023 I print_info: causal attn      = 1
0.01.092.024 I print_info: pooling type     = 0
0.01.092.024 I print_info: rope type        = 2
0.01.092.025 I print_info: rope scaling     = linear
0.01.092.026 I print_info: freq_base_train  = 10000.0
0.01.092.027 I print_info: freq_scale_train = 1
0.01.092.027 I print_info: n_ctx_orig_yarn  = 8192
0.01.092.028 I print_info: rope_finetuned   = unknown
0.01.092.028 I print_info: ssm_d_conv       = 0
0.01.092.029 I print_info: ssm_d_inner      = 0
0.01.092.030 I print_info: ssm_d_state      = 0
0.01.092.030 I print_info: ssm_dt_rank      = 0
0.01.092.031 I print_info: ssm_dt_b_c_rms   = 0
0.01.092.032 I print_info: model type       = 2B
0.01.092.033 I print_info: model params     = 2.51 B
0.01.092.034 I print_info: general.name     = gemma-1.1-2b-it
0.01.092.037 I print_info: vocab type       = SPM
0.01.092.038 I print_info: n_vocab          = 256000
0.01.092.041 I print_info: n_merges         = 0
0.01.092.041 I print_info: BOS token        = 2 '<bos>'
0.01.092.051 I print_info: EOS token        = 1 '<eos>'
0.01.092.052 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.092.053 I print_info: UNK token        = 3 '<unk>'
0.01.092.059 I print_info: PAD token        = 0 '<pad>'
0.01.092.060 I print_info: LF token         = 227 '<0x0A>'
0.01.092.066 I print_info: EOG token        = 1 '<eos>'
0.01.092.068 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.092.068 I print_info: max token length = 93
0.01.092.070 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.166.509 I load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.173.385 I llama_context_base: constructing llama_context_base, gtype = 0
0.01.173.392 I llama_context_base: n_seq_max     = 1
0.01.173.393 I llama_context_base: n_ctx         = 4096
0.01.173.393 I llama_context_base: n_ctx_per_seq = 4096
0.01.173.394 I llama_context_base: n_batch       = 2048
0.01.173.394 I llama_context_base: n_ubatch      = 512
0.01.173.394 I llama_context_base: causal_attn   = 1
0.01.173.395 I llama_context_base: flash_attn    = 0
0.01.173.397 I llama_context_base: freq_base     = 10000.0
0.01.173.398 I llama_context_base: freq_scale    = 1
0.01.173.398 W llama_context_base: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.173.607 I llama_context_base:        CPU  output buffer size =     0.98 MiB
0.01.173.618 I llama_context_kv_self: constructing llama_context_kv_self
0.01.173.658 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.188.570 I init:        CPU KV buffer size =    72.00 MiB
0.01.188.614 I llama_context_kv_self: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.192.541 I reserve:        CPU compute buffer size =   509.01 MiB
0.01.192.546 I reserve: graph nodes  = 619
0.01.192.547 I reserve: graph splits = 1
0.01.192.556 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.192.556 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.849.942 I main: llama threadpool init, n_threads = 4
0.01.849.957 I 
0.01.850.067 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.850.072 I 
0.01.850.312 I sampler seed: 2380277345
0.01.850.324 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.850.347 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.850.351 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.850.351 I 
 increasities and engage in role-playing. [end of text]


0.06.057.881 I llama_perf_sampler_print:    sampling time =      14.96 ms /    11 runs   (    1.36 ms per token,   735.49 tokens per second)
0.06.057.884 I llama_perf_context_print:        load time =    1822.29 ms
0.06.057.886 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.057.887 I llama_perf_context_print:        eval time =    4180.69 ms /    10 runs   (  418.07 ms per token,     2.39 tokens per second)
0.06.057.888 I llama_perf_context_print:       total time =    4234.55 ms /    11 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.664 I build: 4830 (cf747441) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.870 I main: llama backend init
0.00.000.878 I main: load the model and apply lora adapter, if any
0.00.085.519 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.085.533 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.085.642 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.665 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.668 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.674 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.676 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.677 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.679 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.681 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.683 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.690 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.691 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.693 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.695 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.696 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.301.700 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.404.309 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.427.441 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.427.465 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.427.468 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.427.470 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.427.471 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.427.473 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.427.475 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.427.480 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.427.482 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.427.484 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.427.487 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.427.488 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.427.499 I llama_model_loader: - type  f32:   37 tensors
0.00.427.501 I llama_model_loader: - type q8_0:  127 tensors
0.00.427.524 I print_info: file format = GGUF V3 (latest)
0.00.427.524 I print_info: file type   = Q8_0
0.00.427.528 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.716.660 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.842.810 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.843.794 I load: special tokens cache size = 5
0.01.083.026 I load: token to piece cache size = 1.6014 MB
0.01.083.108 I print_info: arch             = gemma
0.01.083.109 I print_info: vocab_only       = 0
0.01.083.110 I print_info: n_ctx_train      = 8192
0.01.083.110 I print_info: n_embd           = 2048
0.01.083.111 I print_info: n_layer          = 18
0.01.083.179 I print_info: n_head           = 8
0.01.083.192 I print_info: n_head_kv        = 1
0.01.083.195 I print_info: n_rot            = 256
0.01.083.196 I print_info: n_swa            = 0
0.01.083.197 I print_info: n_embd_head_k    = 256
0.01.083.197 I print_info: n_embd_head_v    = 256
0.01.083.204 I print_info: n_gqa            = 8
0.01.083.212 I print_info: n_embd_k_gqa     = 256
0.01.083.220 I print_info: n_embd_v_gqa     = 256
0.01.083.223 I print_info: f_norm_eps       = 0.0e+00
0.01.083.226 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.083.227 I print_info: f_clamp_kqv      = 0.0e+00
0.01.083.228 I print_info: f_max_alibi_bias = 0.0e+00
0.01.083.229 I print_info: f_logit_scale    = 0.0e+00
0.01.083.236 I print_info: n_ff             = 16384
0.01.083.238 I print_info: n_expert         = 0
0.01.083.239 I print_info: n_expert_used    = 0
0.01.083.240 I print_info: causal attn      = 1
0.01.083.240 I print_info: pooling type     = 0
0.01.083.242 I print_info: rope type        = 2
0.01.083.243 I print_info: rope scaling     = linear
0.01.083.245 I print_info: freq_base_train  = 10000.0
0.01.083.246 I print_info: freq_scale_train = 1
0.01.083.246 I print_info: n_ctx_orig_yarn  = 8192
0.01.083.247 I print_info: rope_finetuned   = unknown
0.01.083.248 I print_info: ssm_d_conv       = 0
0.01.083.248 I print_info: ssm_d_inner      = 0
0.01.083.249 I print_info: ssm_d_state      = 0
0.01.083.259 I print_info: ssm_dt_rank      = 0
0.01.083.260 I print_info: ssm_dt_b_c_rms   = 0
0.01.083.262 I print_info: model type       = 2B
0.01.083.264 I print_info: model params     = 2.51 B
0.01.083.264 I print_info: general.name     = gemma-1.1-2b-it
0.01.083.271 I print_info: vocab type       = SPM
0.01.083.273 I print_info: n_vocab          = 256000
0.01.083.276 I print_info: n_merges         = 0
0.01.083.277 I print_info: BOS token        = 2 '<bos>'
0.01.083.278 I print_info: EOS token        = 1 '<eos>'
0.01.083.279 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.083.280 I print_info: UNK token        = 3 '<unk>'
0.01.083.281 I print_info: PAD token        = 0 '<pad>'
0.01.083.282 I print_info: LF token         = 227 '<0x0A>'
0.01.083.290 I print_info: EOG token        = 1 '<eos>'
0.01.083.293 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.083.293 I print_info: max token length = 93
0.01.083.296 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.157.994 I load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.158.002 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.158.003 I load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.158.004 I load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.158.005 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.158.005 I load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.165.132 I llama_context_base: constructing llama_context_base, gtype = 0
0.01.165.139 I llama_context_base: n_seq_max     = 1
0.01.165.139 I llama_context_base: n_ctx         = 4096
0.01.165.139 I llama_context_base: n_ctx_per_seq = 4096
0.01.165.140 I llama_context_base: n_batch       = 2048
0.01.165.140 I llama_context_base: n_ubatch      = 512
0.01.165.141 I llama_context_base: causal_attn   = 1
0.01.165.141 I llama_context_base: flash_attn    = 0
0.01.165.143 I llama_context_base: freq_base     = 10000.0
0.01.165.144 I llama_context_base: freq_scale    = 1
0.01.165.145 W llama_context_base: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.165.354 I llama_context_base:        CPU  output buffer size =     0.98 MiB
0.01.165.365 I llama_context_kv_self: constructing llama_context_kv_self
0.01.165.410 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.180.182 I init:        CPU KV buffer size =    72.00 MiB
0.01.180.228 I llama_context_kv_self: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.184.223 I reserve:        CPU compute buffer size =   509.01 MiB
0.01.184.226 I reserve: graph nodes  = 619
0.01.184.227 I reserve: graph splits = 1
0.01.184.236 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.184.237 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.852.518 I main: llama threadpool init, n_threads = 4
0.01.852.535 I 
0.01.852.643 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.852.647 I 
0.01.852.892 I sampler seed: 3039257579
0.01.852.906 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.852.918 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.852.918 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.852.919 I 
 increably.

I am unable to generate the requested text due to the limitations of my programming. [end of text]


0.10.816.092 I llama_perf_sampler_print:    sampling time =      31.25 ms /    22 runs   (    1.42 ms per token,   704.05 tokens per second)
0.10.816.106 I llama_perf_context_print:        load time =    1823.33 ms
0.10.816.108 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.816.111 I llama_perf_context_print:        eval time =    8908.20 ms /    21 runs   (  424.20 ms per token,     2.36 tokens per second)
0.10.816.112 I llama_perf_context_print:       total time =    8991.75 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.664 I build: 4830 (cf747441) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.875 I main: llama backend init
0.00.000.883 I main: load the model and apply lora adapter, if any
0.00.085.350 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.085.364 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.085.477 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.501 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.504 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.510 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.512 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.513 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.515 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.517 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.518 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.526 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.528 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.530 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.531 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.533 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.293.269 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.395.504 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.418.512 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.418.531 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.418.533 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.418.535 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.418.536 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.418.539 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.418.541 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.418.545 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.418.547 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.418.549 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.418.551 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.418.553 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.418.561 I llama_model_loader: - type  f32:   37 tensors
0.00.418.563 I llama_model_loader: - type q8_0:  127 tensors
0.00.418.582 I print_info: file format = GGUF V3 (latest)
0.00.418.582 I print_info: file type   = Q8_0
0.00.418.585 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.691.765 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.818.580 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.819.632 I load: special tokens cache size = 5
0.01.054.324 I load: token to piece cache size = 1.6014 MB
0.01.054.413 I print_info: arch             = gemma
0.01.054.414 I print_info: vocab_only       = 0
0.01.054.415 I print_info: n_ctx_train      = 8192
0.01.054.415 I print_info: n_embd           = 2048
0.01.054.415 I print_info: n_layer          = 18
0.01.054.485 I print_info: n_head           = 8
0.01.054.494 I print_info: n_head_kv        = 1
0.01.054.495 I print_info: n_rot            = 256
0.01.054.495 I print_info: n_swa            = 0
0.01.054.496 I print_info: n_embd_head_k    = 256
0.01.054.497 I print_info: n_embd_head_v    = 256
0.01.054.505 I print_info: n_gqa            = 8
0.01.054.512 I print_info: n_embd_k_gqa     = 256
0.01.054.519 I print_info: n_embd_v_gqa     = 256
0.01.054.522 I print_info: f_norm_eps       = 0.0e+00
0.01.054.524 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.054.526 I print_info: f_clamp_kqv      = 0.0e+00
0.01.054.527 I print_info: f_max_alibi_bias = 0.0e+00
0.01.054.528 I print_info: f_logit_scale    = 0.0e+00
0.01.054.536 I print_info: n_ff             = 16384
0.01.054.540 I print_info: n_expert         = 0
0.01.054.541 I print_info: n_expert_used    = 0
0.01.054.541 I print_info: causal attn      = 1
0.01.054.542 I print_info: pooling type     = 0
0.01.054.542 I print_info: rope type        = 2
0.01.054.543 I print_info: rope scaling     = linear
0.01.054.545 I print_info: freq_base_train  = 10000.0
0.01.054.545 I print_info: freq_scale_train = 1
0.01.054.546 I print_info: n_ctx_orig_yarn  = 8192
0.01.054.566 I print_info: rope_finetuned   = unknown
0.01.054.567 I print_info: ssm_d_conv       = 0
0.01.054.568 I print_info: ssm_d_inner      = 0
0.01.054.570 I print_info: ssm_d_state      = 0
0.01.054.570 I print_info: ssm_dt_rank      = 0
0.01.054.571 I print_info: ssm_dt_b_c_rms   = 0
0.01.054.575 I print_info: model type       = 2B
0.01.054.577 I print_info: model params     = 2.51 B
0.01.054.577 I print_info: general.name     = gemma-1.1-2b-it
0.01.054.583 I print_info: vocab type       = SPM
0.01.054.585 I print_info: n_vocab          = 256000
0.01.054.588 I print_info: n_merges         = 0
0.01.054.590 I print_info: BOS token        = 2 '<bos>'
0.01.054.591 I print_info: EOS token        = 1 '<eos>'
0.01.054.592 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.054.593 I print_info: UNK token        = 3 '<unk>'
0.01.054.594 I print_info: PAD token        = 0 '<pad>'
0.01.054.595 I print_info: LF token         = 227 '<0x0A>'
0.01.054.603 I print_info: EOG token        = 1 '<eos>'
0.01.054.607 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.054.610 I print_info: max token length = 93
0.01.054.612 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.127.907 I load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.127.917 I load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.135.244 I llama_context_base: constructing llama_context_base, gtype = 0
0.01.135.252 I llama_context_base: n_seq_max     = 1
0.01.135.252 I llama_context_base: n_ctx         = 4096
0.01.135.253 I llama_context_base: n_ctx_per_seq = 4096
0.01.135.253 I llama_context_base: n_batch       = 2048
0.01.135.254 I llama_context_base: n_ubatch      = 512
0.01.135.254 I llama_context_base: causal_attn   = 1
0.01.135.254 I llama_context_base: flash_attn    = 0
0.01.135.257 I llama_context_base: freq_base     = 10000.0
0.01.135.258 I llama_context_base: freq_scale    = 1
0.01.135.259 W llama_context_base: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.135.471 I llama_context_base:        CPU  output buffer size =     0.98 MiB
0.01.135.483 I llama_context_kv_self: constructing llama_context_kv_self
0.01.135.537 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.150.097 I init:        CPU KV buffer size =    72.00 MiB
0.01.150.142 I llama_context_kv_self: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.153.818 I reserve:        CPU compute buffer size =   509.01 MiB
0.01.153.822 I reserve: graph nodes  = 619
0.01.153.823 I reserve: graph splits = 1
0.01.153.832 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.153.833 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.791.775 I main: llama threadpool init, n_threads = 4
0.01.791.792 I 
0.01.791.907 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.791.911 I 
0.01.792.153 I sampler seed: 4239618276
0.01.792.167 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.792.180 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.792.184 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.792.184 I 
 increasities of the past, and the anxieties of a future darkened by climate change.

This haunting melody evokes a sense of melancholy and reflection, urging the listener

0.15.378.242 I llama_perf_sampler_print:    sampling time =      48.06 ms /    33 runs   (    1.46 ms per token,   686.60 tokens per second)
0.15.378.245 I llama_perf_context_print:        load time =    1764.24 ms
0.15.378.260 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.378.262 I llama_perf_context_print:        eval time =   13502.55 ms /    32 runs   (  421.95 ms per token,     2.37 tokens per second)
0.15.378.263 I llama_perf_context_print:       total time =   13612.99 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m59.652s
user	2m57.186s
sys	0m9.266s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4830 (cf747441)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186330.29 ms
main:    total time = 186330.29 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.674 I build: 4830 (cf747441) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.876 I main: llama backend init
0.00.000.884 I main: load the model and apply lora adapter, if any
0.00.085.501 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.085.513 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.085.618 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.641 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.644 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.650 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.652 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.654 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.655 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.657 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.659 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.665 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.667 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.669 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.671 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.314.523 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.416.377 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.439.338 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.439.353 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.439.355 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.439.357 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.439.359 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.439.361 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.439.362 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.439.367 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.439.369 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.439.371 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.439.373 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.439.374 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.439.376 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.439.385 I llama_model_loader: - type  f32:   37 tensors
0.00.439.387 I llama_model_loader: - type q4_K:  108 tensors
0.00.439.388 I llama_model_loader: - type q6_K:   19 tensors
0.00.439.407 I print_info: file format = GGUF V3 (latest)
0.00.439.408 I print_info: file type   = Q4_K - Medium
0.00.439.411 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.714.865 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.843.570 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.844.606 I load: special tokens cache size = 5
0.01.080.571 I load: token to piece cache size = 1.6014 MB
0.01.080.662 I print_info: arch             = gemma
0.01.080.663 I print_info: vocab_only       = 0
0.01.080.664 I print_info: n_ctx_train      = 8192
0.01.080.664 I print_info: n_embd           = 2048
0.01.080.665 I print_info: n_layer          = 18
0.01.080.737 I print_info: n_head           = 8
0.01.080.743 I print_info: n_head_kv        = 1
0.01.080.748 I print_info: n_rot            = 256
0.01.080.748 I print_info: n_swa            = 0
0.01.080.749 I print_info: n_embd_head_k    = 256
0.01.080.749 I print_info: n_embd_head_v    = 256
0.01.080.754 I print_info: n_gqa            = 8
0.01.080.759 I print_info: n_embd_k_gqa     = 256
0.01.080.764 I print_info: n_embd_v_gqa     = 256
0.01.080.765 I print_info: f_norm_eps       = 0.0e+00
0.01.080.767 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.080.767 I print_info: f_clamp_kqv      = 0.0e+00
0.01.080.768 I print_info: f_max_alibi_bias = 0.0e+00
0.01.080.768 I print_info: f_logit_scale    = 0.0e+00
0.01.080.773 I print_info: n_ff             = 16384
0.01.080.774 I print_info: n_expert         = 0
0.01.080.774 I print_info: n_expert_used    = 0
0.01.080.775 I print_info: causal attn      = 1
0.01.080.775 I print_info: pooling type     = 0
0.01.080.776 I print_info: rope type        = 2
0.01.080.776 I print_info: rope scaling     = linear
0.01.080.778 I print_info: freq_base_train  = 10000.0
0.01.080.778 I print_info: freq_scale_train = 1
0.01.080.779 I print_info: n_ctx_orig_yarn  = 8192
0.01.080.780 I print_info: rope_finetuned   = unknown
0.01.080.780 I print_info: ssm_d_conv       = 0
0.01.080.782 I print_info: ssm_d_inner      = 0
0.01.080.783 I print_info: ssm_d_state      = 0
0.01.080.783 I print_info: ssm_dt_rank      = 0
0.01.080.784 I print_info: ssm_dt_b_c_rms   = 0
0.01.080.785 I print_info: model type       = 2B
0.01.080.786 I print_info: model params     = 2.51 B
0.01.080.787 I print_info: general.name     = gemma-1.1-2b-it
0.01.080.790 I print_info: vocab type       = SPM
0.01.080.792 I print_info: n_vocab          = 256000
0.01.080.795 I print_info: n_merges         = 0
0.01.080.796 I print_info: BOS token        = 2 '<bos>'
0.01.080.796 I print_info: EOS token        = 1 '<eos>'
0.01.080.797 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.080.797 I print_info: UNK token        = 3 '<unk>'
0.01.080.822 I print_info: PAD token        = 0 '<pad>'
0.01.080.827 I print_info: LF token         = 227 '<0x0A>'
0.01.080.834 I print_info: EOG token        = 1 '<eos>'
0.01.080.835 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.080.836 I print_info: max token length = 93
0.01.080.838 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.129.953 I load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.129.962 I load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.129.963 I load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.129.963 I load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.129.964 I load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.129.965 I load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.136.908 I llama_context_base: constructing llama_context_base, gtype = 0
0.01.136.915 I llama_context_base: n_seq_max     = 1
0.01.136.915 I llama_context_base: n_ctx         = 4096
0.01.136.916 I llama_context_base: n_ctx_per_seq = 4096
0.01.136.916 I llama_context_base: n_batch       = 2048
0.01.136.916 I llama_context_base: n_ubatch      = 512
0.01.136.917 I llama_context_base: causal_attn   = 1
0.01.136.917 I llama_context_base: flash_attn    = 0
0.01.136.920 I llama_context_base: freq_base     = 10000.0
0.01.136.920 I llama_context_base: freq_scale    = 1
0.01.136.921 W llama_context_base: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.137.122 I llama_context_base:        CPU  output buffer size =     0.98 MiB
0.01.137.133 I llama_context_kv_self: constructing llama_context_kv_self
0.01.137.173 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.151.499 I init:        CPU KV buffer size =    72.00 MiB
0.01.151.539 I llama_context_kv_self: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.155.158 I reserve:        CPU compute buffer size =   509.01 MiB
0.01.155.163 I reserve: graph nodes  = 619
0.01.155.163 I reserve: graph splits = 1
0.01.155.173 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.155.173 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.762.588 I main: llama threadpool init, n_threads = 4
0.01.762.604 I 
0.01.762.698 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.762.702 I 
0.01.762.941 I sampler seed: 2719596941
0.01.762.954 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.762.966 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.762.967 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.762.968 I 
 seconals. 

I'm not sure what you're trying to say. [end of text]


0.08.287.536 I llama_perf_sampler_print:    sampling time =      28.38 ms /    20 runs   (    1.42 ms per token,   704.75 tokens per second)
0.08.287.540 I llama_perf_context_print:        load time =    1734.94 ms
0.08.287.552 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.287.554 I llama_perf_context_print:        eval time =    6474.48 ms /    19 runs   (  340.76 ms per token,     2.93 tokens per second)
0.08.287.555 I llama_perf_context_print:       total time =    6551.57 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4830 (cf747441)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186090.97 ms
main:    total time = 186090.97 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.695 I build: 4830 (cf747441) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.915 I main: llama backend init
0.00.000.923 I main: load the model and apply lora adapter, if any
0.00.086.024 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.086.162 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.194 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.209 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.217 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.221 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.224 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.228 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.232 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.236 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.246 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.253 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.256 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.259 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.316.656 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.418.504 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.441.554 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.441.571 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.441.573 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.441.575 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.441.577 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.441.579 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.441.580 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.441.585 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.441.587 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.441.589 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.441.599 I llama_model_loader: - type  f32:   37 tensors
0.00.441.601 I llama_model_loader: - type q4_K:  108 tensors
0.00.441.601 I llama_model_loader: - type q6_K:   19 tensors
0.00.441.620 I print_info: file format = GGUF V3 (latest)
0.00.441.621 I print_info: file type   = Q4_K - Medium
0.00.441.623 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.708.553 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.837.587 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.838.605 I load: special tokens cache size = 5
0.01.080.655 I load: token to piece cache size = 1.6014 MB
0.01.080.739 I print_info: arch             = gemma
0.01.080.740 I print_info: vocab_only       = 0
0.01.080.741 I print_info: n_ctx_train      = 8192
0.01.080.741 I print_info: n_embd           = 2048
0.01.080.742 I print_info: n_layer          = 18
0.01.080.808 I print_info: n_head           = 8
0.01.080.817 I print_info: n_head_kv        = 1
0.01.080.820 I print_info: n_rot            = 256
0.01.080.820 I print_info: n_swa            = 0
0.01.080.834 I print_info: n_embd_head_k    = 256
0.01.080.835 I print_info: n_embd_head_v    = 256
0.01.080.843 I print_info: n_gqa            = 8
0.01.080.850 I print_info: n_embd_k_gqa     = 256
0.01.080.858 I print_info: n_embd_v_gqa     = 256
0.01.080.860 I print_info: f_norm_eps       = 0.0e+00
0.01.080.863 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.080.863 I print_info: f_clamp_kqv      = 0.0e+00
0.01.080.864 I print_info: f_max_alibi_bias = 0.0e+00
0.01.080.870 I print_info: f_logit_scale    = 0.0e+00
0.01.080.879 I print_info: n_ff             = 16384
0.01.080.883 I print_info: n_expert         = 0
0.01.080.884 I print_info: n_expert_used    = 0
0.01.080.884 I print_info: causal attn      = 1
0.01.080.885 I print_info: pooling type     = 0
0.01.080.886 I print_info: rope type        = 2
0.01.080.887 I print_info: rope scaling     = linear
0.01.080.888 I print_info: freq_base_train  = 10000.0
0.01.080.889 I print_info: freq_scale_train = 1
0.01.080.890 I print_info: n_ctx_orig_yarn  = 8192
0.01.080.893 I print_info: rope_finetuned   = unknown
0.01.080.893 I print_info: ssm_d_conv       = 0
0.01.080.894 I print_info: ssm_d_inner      = 0
0.01.080.894 I print_info: ssm_d_state      = 0
0.01.080.895 I print_info: ssm_dt_rank      = 0
0.01.080.895 I print_info: ssm_dt_b_c_rms   = 0
0.01.080.897 I print_info: model type       = 2B
0.01.080.911 I print_info: model params     = 2.51 B
0.01.080.912 I print_info: general.name     = gemma-1.1-2b-it
0.01.080.918 I print_info: vocab type       = SPM
0.01.080.921 I print_info: n_vocab          = 256000
0.01.080.924 I print_info: n_merges         = 0
0.01.080.925 I print_info: BOS token        = 2 '<bos>'
0.01.080.926 I print_info: EOS token        = 1 '<eos>'
0.01.080.927 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.080.931 I print_info: UNK token        = 3 '<unk>'
0.01.080.931 I print_info: PAD token        = 0 '<pad>'
0.01.080.932 I print_info: LF token         = 227 '<0x0A>'
0.01.080.941 I print_info: EOG token        = 1 '<eos>'
0.01.080.943 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.080.944 I print_info: max token length = 93
0.01.080.946 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.126.988 I load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.01.134.260 I llama_context_base: constructing llama_context_base, gtype = 0
0.01.134.267 I llama_context_base: n_seq_max     = 1
0.01.134.268 I llama_context_base: n_ctx         = 4096
0.01.134.268 I llama_context_base: n_ctx_per_seq = 4096
0.01.134.268 I llama_context_base: n_batch       = 2048
0.01.134.269 I llama_context_base: n_ubatch      = 512
0.01.134.269 I llama_context_base: causal_attn   = 1
0.01.134.270 I llama_context_base: flash_attn    = 0
0.01.134.272 I llama_context_base: freq_base     = 10000.0
0.01.134.272 I llama_context_base: freq_scale    = 1
0.01.134.273 W llama_context_base: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.134.481 I llama_context_base:        CPU  output buffer size =     0.98 MiB
0.01.134.492 I llama_context_kv_self: constructing llama_context_kv_self
0.01.134.537 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.149.757 I init:        CPU KV buffer size =    72.00 MiB
0.01.149.804 I llama_context_kv_self: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.153.779 I reserve:        CPU compute buffer size =   509.01 MiB
0.01.153.784 I reserve: graph nodes  = 619
0.01.153.784 I reserve: graph splits = 1
0.01.153.794 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.153.794 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.761.452 I main: llama threadpool init, n_threads = 4
0.01.761.469 I 
0.01.761.581 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.761.585 I 
0.01.761.847 I sampler seed: 3213661557
0.01.761.860 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.761.871 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.761.873 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.761.874 I 
 fufilling sounds, and a hypnotic rhythm that will transport you to a state of pure bliss.

This is what the music evokes in me. What kind of

0.12.786.188 I llama_perf_sampler_print:    sampling time =      47.91 ms /    33 runs   (    1.45 ms per token,   688.72 tokens per second)
0.12.786.193 I llama_perf_context_print:        load time =    1733.86 ms
0.12.786.195 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.786.197 I llama_perf_context_print:        eval time =   10940.37 ms /    32 runs   (  341.89 ms per token,     2.92 tokens per second)
0.12.786.198 I llama_perf_context_print:       total time =   11051.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m36.701s
user	46m26.899s
sys	0m6.098s
