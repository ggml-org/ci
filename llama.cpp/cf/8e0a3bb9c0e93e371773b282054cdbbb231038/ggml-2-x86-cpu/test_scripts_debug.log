+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.673 I build: 3904 (cf8e0a3b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.883 I main: llama backend init
0.00.002.841 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.256 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.467 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.564 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.576 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.578 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.583 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.585 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.586 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.587 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.589 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.590 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.598 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.602 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.603 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.604 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.605 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.669 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.953 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.691 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.700 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.701 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.702 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.703 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.705 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.706 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.710 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.711 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.712 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.713 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.270.714 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.723 I llama_model_loader: - type  f32:   37 tensors
0.00.270.728 I llama_model_loader: - type q8_0:  127 tensors
0.00.434.697 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.461.023 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.462.043 I llm_load_vocab: special tokens cache size = 5
0.00.556.984 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.557.050 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.557.051 I llm_load_print_meta: arch             = gemma
0.00.557.052 I llm_load_print_meta: vocab type       = SPM
0.00.557.053 I llm_load_print_meta: n_vocab          = 256000
0.00.557.056 I llm_load_print_meta: n_merges         = 0
0.00.557.056 I llm_load_print_meta: vocab_only       = 0
0.00.557.057 I llm_load_print_meta: n_ctx_train      = 8192
0.00.557.057 I llm_load_print_meta: n_embd           = 2048
0.00.557.057 I llm_load_print_meta: n_layer          = 18
0.00.557.122 I llm_load_print_meta: n_head           = 8
0.00.557.129 I llm_load_print_meta: n_head_kv        = 1
0.00.557.129 I llm_load_print_meta: n_rot            = 256
0.00.557.129 I llm_load_print_meta: n_swa            = 0
0.00.557.130 I llm_load_print_meta: n_embd_head_k    = 256
0.00.557.130 I llm_load_print_meta: n_embd_head_v    = 256
0.00.557.135 I llm_load_print_meta: n_gqa            = 8
0.00.557.140 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.557.144 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.557.146 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.557.147 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.557.148 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.557.148 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.557.149 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.557.153 I llm_load_print_meta: n_ff             = 16384
0.00.557.154 I llm_load_print_meta: n_expert         = 0
0.00.557.154 I llm_load_print_meta: n_expert_used    = 0
0.00.557.155 I llm_load_print_meta: causal attn      = 1
0.00.557.155 I llm_load_print_meta: pooling type     = 0
0.00.557.156 I llm_load_print_meta: rope type        = 2
0.00.557.156 I llm_load_print_meta: rope scaling     = linear
0.00.557.157 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.557.158 I llm_load_print_meta: freq_scale_train = 1
0.00.557.158 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.557.159 I llm_load_print_meta: rope_finetuned   = unknown
0.00.557.159 I llm_load_print_meta: ssm_d_conv       = 0
0.00.557.159 I llm_load_print_meta: ssm_d_inner      = 0
0.00.557.160 I llm_load_print_meta: ssm_d_state      = 0
0.00.557.160 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.557.160 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.557.162 I llm_load_print_meta: model type       = 2B
0.00.557.179 I llm_load_print_meta: model ftype      = Q8_0
0.00.557.181 I llm_load_print_meta: model params     = 2.51 B
0.00.557.182 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.557.182 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.557.183 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.557.183 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.557.184 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.557.185 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.557.185 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.557.186 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.557.191 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.557.194 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.557.194 I llm_load_print_meta: max token length = 93
0.00.557.364 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.656.788 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.656.800 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.656.801 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.656.802 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.656.802 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.656.803 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.663.693 I llama_new_context_with_model: n_ctx      = 8192
0.00.663.703 I llama_new_context_with_model: n_batch    = 2048
0.00.663.703 I llama_new_context_with_model: n_ubatch   = 512
0.00.663.704 I llama_new_context_with_model: flash_attn = 0
0.00.663.707 I llama_new_context_with_model: freq_base  = 10000.0
0.00.663.708 I llama_new_context_with_model: freq_scale = 1
0.00.697.009 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.697.052 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.697.181 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.698.711 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.698.719 I llama_new_context_with_model: graph nodes  = 601
0.00.698.719 I llama_new_context_with_model: graph splits = 1
0.00.698.735 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.312.416 I main: llama threadpool init, n_threads = 4
0.01.312.429 I 
0.01.312.538 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.312.542 I 
0.01.312.716 I sampler seed: 651509702
0.01.312.726 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.312.733 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.312.734 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.312.735 I 
 seconals, and other large carnivores are facing a significant threat: habitat loss and fragmentation due to human activities.

**a) Explain the impact of habitat

0.14.954.177 I llama_perf_sampler_print:    sampling time =      49.13 ms /    33 runs   (    1.49 ms per token,   671.67 tokens per second)
0.14.954.192 I llama_perf_context_print:        load time =    1309.38 ms
0.14.954.195 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.954.197 I llama_perf_context_print:        eval time =   13559.94 ms /    32 runs   (  423.75 ms per token,     2.36 tokens per second)
0.14.954.198 I llama_perf_context_print:       total time =   13641.77 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.692 I build: 3904 (cf8e0a3b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.898 I main: llama backend init
0.00.002.862 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.678 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.781 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.797 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.801 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.806 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.807 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.808 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.809 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.810 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.812 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.820 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.821 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.822 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.823 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.824 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.743 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.913 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.329 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.338 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.340 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.341 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.342 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.343 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.345 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.349 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.350 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.351 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.352 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.271.353 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.361 I llama_model_loader: - type  f32:   37 tensors
0.00.271.365 I llama_model_loader: - type q8_0:  127 tensors
0.00.428.758 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.457.479 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.458.534 I llm_load_vocab: special tokens cache size = 5
0.00.553.265 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.553.326 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.553.327 I llm_load_print_meta: arch             = gemma
0.00.553.328 I llm_load_print_meta: vocab type       = SPM
0.00.553.329 I llm_load_print_meta: n_vocab          = 256000
0.00.553.332 I llm_load_print_meta: n_merges         = 0
0.00.553.332 I llm_load_print_meta: vocab_only       = 0
0.00.553.333 I llm_load_print_meta: n_ctx_train      = 8192
0.00.553.333 I llm_load_print_meta: n_embd           = 2048
0.00.553.333 I llm_load_print_meta: n_layer          = 18
0.00.553.399 I llm_load_print_meta: n_head           = 8
0.00.553.405 I llm_load_print_meta: n_head_kv        = 1
0.00.553.406 I llm_load_print_meta: n_rot            = 256
0.00.553.406 I llm_load_print_meta: n_swa            = 0
0.00.553.407 I llm_load_print_meta: n_embd_head_k    = 256
0.00.553.407 I llm_load_print_meta: n_embd_head_v    = 256
0.00.553.412 I llm_load_print_meta: n_gqa            = 8
0.00.553.416 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.553.421 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.553.423 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.553.424 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.553.425 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.553.425 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.553.426 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.553.430 I llm_load_print_meta: n_ff             = 16384
0.00.553.431 I llm_load_print_meta: n_expert         = 0
0.00.553.431 I llm_load_print_meta: n_expert_used    = 0
0.00.553.432 I llm_load_print_meta: causal attn      = 1
0.00.553.432 I llm_load_print_meta: pooling type     = 0
0.00.553.432 I llm_load_print_meta: rope type        = 2
0.00.553.433 I llm_load_print_meta: rope scaling     = linear
0.00.553.435 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.553.435 I llm_load_print_meta: freq_scale_train = 1
0.00.553.436 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.553.436 I llm_load_print_meta: rope_finetuned   = unknown
0.00.553.437 I llm_load_print_meta: ssm_d_conv       = 0
0.00.553.437 I llm_load_print_meta: ssm_d_inner      = 0
0.00.553.437 I llm_load_print_meta: ssm_d_state      = 0
0.00.553.438 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.553.438 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.553.439 I llm_load_print_meta: model type       = 2B
0.00.553.440 I llm_load_print_meta: model ftype      = Q8_0
0.00.553.440 I llm_load_print_meta: model params     = 2.51 B
0.00.553.441 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.553.441 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.553.442 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.553.442 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.553.443 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.553.443 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.553.443 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.553.444 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.553.449 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.553.451 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.553.451 I llm_load_print_meta: max token length = 93
0.00.553.616 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.647.626 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.653.389 I llama_new_context_with_model: n_ctx      = 8192
0.00.653.398 I llama_new_context_with_model: n_batch    = 2048
0.00.653.398 I llama_new_context_with_model: n_ubatch   = 512
0.00.653.399 I llama_new_context_with_model: flash_attn = 0
0.00.653.402 I llama_new_context_with_model: freq_base  = 10000.0
0.00.653.403 I llama_new_context_with_model: freq_scale = 1
0.00.685.181 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.685.226 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.685.343 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.686.734 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.686.741 I llama_new_context_with_model: graph nodes  = 601
0.00.686.741 I llama_new_context_with_model: graph splits = 1
0.00.686.758 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.324.639 I main: llama threadpool init, n_threads = 4
0.01.324.651 I 
0.01.324.760 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.324.764 I 
0.01.324.945 I sampler seed: 3022126775
0.01.324.956 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.324.964 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.324.965 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.324.965 I 
 seconary elements have a significant effect on the performance of a machine learning model.

True/False? [end of text]


0.10.701.942 I llama_perf_sampler_print:    sampling time =      33.97 ms /    23 runs   (    1.48 ms per token,   677.15 tokens per second)
0.10.701.946 I llama_perf_context_print:        load time =    1321.56 ms
0.10.701.947 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.701.949 I llama_perf_context_print:        eval time =    9319.52 ms /    22 runs   (  423.61 ms per token,     2.36 tokens per second)
0.10.701.949 I llama_perf_context_print:       total time =    9377.31 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.666 I build: 3904 (cf8e0a3b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.859 I main: llama backend init
0.00.002.796 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.985 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.199 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.294 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.306 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.307 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.312 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.313 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.315 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.317 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.318 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.322 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.330 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.331 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.332 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.333 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.334 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.935 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.176 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.601 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.611 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.613 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.614 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.615 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.616 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.617 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.621 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.622 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.623 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.624 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.270.625 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.635 I llama_model_loader: - type  f32:   37 tensors
0.00.270.639 I llama_model_loader: - type q8_0:  127 tensors
0.00.442.778 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.473.037 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.474.076 I llm_load_vocab: special tokens cache size = 5
0.00.568.764 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.568.830 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.568.831 I llm_load_print_meta: arch             = gemma
0.00.568.832 I llm_load_print_meta: vocab type       = SPM
0.00.568.833 I llm_load_print_meta: n_vocab          = 256000
0.00.568.836 I llm_load_print_meta: n_merges         = 0
0.00.568.836 I llm_load_print_meta: vocab_only       = 0
0.00.568.837 I llm_load_print_meta: n_ctx_train      = 8192
0.00.568.837 I llm_load_print_meta: n_embd           = 2048
0.00.568.837 I llm_load_print_meta: n_layer          = 18
0.00.568.903 I llm_load_print_meta: n_head           = 8
0.00.568.910 I llm_load_print_meta: n_head_kv        = 1
0.00.568.910 I llm_load_print_meta: n_rot            = 256
0.00.568.911 I llm_load_print_meta: n_swa            = 0
0.00.568.911 I llm_load_print_meta: n_embd_head_k    = 256
0.00.568.912 I llm_load_print_meta: n_embd_head_v    = 256
0.00.568.916 I llm_load_print_meta: n_gqa            = 8
0.00.568.921 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.568.925 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.568.926 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.568.929 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.568.929 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.568.930 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.568.930 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.568.935 I llm_load_print_meta: n_ff             = 16384
0.00.568.935 I llm_load_print_meta: n_expert         = 0
0.00.568.936 I llm_load_print_meta: n_expert_used    = 0
0.00.568.936 I llm_load_print_meta: causal attn      = 1
0.00.568.936 I llm_load_print_meta: pooling type     = 0
0.00.568.937 I llm_load_print_meta: rope type        = 2
0.00.568.937 I llm_load_print_meta: rope scaling     = linear
0.00.568.938 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.568.939 I llm_load_print_meta: freq_scale_train = 1
0.00.568.939 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.568.940 I llm_load_print_meta: rope_finetuned   = unknown
0.00.568.940 I llm_load_print_meta: ssm_d_conv       = 0
0.00.568.940 I llm_load_print_meta: ssm_d_inner      = 0
0.00.568.941 I llm_load_print_meta: ssm_d_state      = 0
0.00.568.941 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.568.941 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.568.942 I llm_load_print_meta: model type       = 2B
0.00.568.943 I llm_load_print_meta: model ftype      = Q8_0
0.00.568.943 I llm_load_print_meta: model params     = 2.51 B
0.00.568.944 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.568.944 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.568.945 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.568.945 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.568.945 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.568.946 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.568.946 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.568.947 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.568.952 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.568.953 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.568.954 I llm_load_print_meta: max token length = 93
0.00.569.123 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.646.244 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.646.254 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.646.255 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.646.256 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.646.256 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.646.257 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.652.109 I llama_new_context_with_model: n_ctx      = 8192
0.00.652.118 I llama_new_context_with_model: n_batch    = 2048
0.00.652.119 I llama_new_context_with_model: n_ubatch   = 512
0.00.652.120 I llama_new_context_with_model: flash_attn = 0
0.00.652.124 I llama_new_context_with_model: freq_base  = 10000.0
0.00.652.124 I llama_new_context_with_model: freq_scale = 1
0.00.682.928 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.682.972 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.683.094 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.684.525 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.684.535 I llama_new_context_with_model: graph nodes  = 601
0.00.684.536 I llama_new_context_with_model: graph splits = 1
0.00.684.557 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.298.076 I main: llama threadpool init, n_threads = 4
0.01.298.089 I 
0.01.298.195 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.298.199 I 
0.01.298.362 I sampler seed: 3233381014
0.01.298.372 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.298.379 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.298.379 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.298.380 I 
 increasements, and the like. [end of text]


0.04.700.259 I llama_perf_sampler_print:    sampling time =      12.35 ms /     9 runs   (    1.37 ms per token,   728.51 tokens per second)
0.04.700.262 I llama_perf_context_print:        load time =    1295.10 ms
0.04.700.263 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.04.700.265 I llama_perf_context_print:        eval time =    3380.53 ms /     8 runs   (  422.57 ms per token,     2.37 tokens per second)
0.04.700.266 I llama_perf_context_print:       total time =    3402.19 ms /     9 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.651 I build: 3904 (cf8e0a3b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.845 I main: llama backend init
0.00.002.816 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.002 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.218 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.312 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.323 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.325 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.330 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.331 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.334 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.335 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.357 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.359 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.369 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.378 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.380 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.381 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.382 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.213 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.919 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.536 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.545 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.546 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.547 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.548 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.549 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.550 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.555 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.556 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.557 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.558 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.271.559 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.567 I llama_model_loader: - type  f32:   37 tensors
0.00.271.571 I llama_model_loader: - type q8_0:  127 tensors
0.00.435.321 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.464.877 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.465.988 I llm_load_vocab: special tokens cache size = 5
0.00.560.987 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.561.051 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.561.053 I llm_load_print_meta: arch             = gemma
0.00.561.054 I llm_load_print_meta: vocab type       = SPM
0.00.561.055 I llm_load_print_meta: n_vocab          = 256000
0.00.561.057 I llm_load_print_meta: n_merges         = 0
0.00.561.058 I llm_load_print_meta: vocab_only       = 0
0.00.561.058 I llm_load_print_meta: n_ctx_train      = 8192
0.00.561.058 I llm_load_print_meta: n_embd           = 2048
0.00.561.059 I llm_load_print_meta: n_layer          = 18
0.00.561.123 I llm_load_print_meta: n_head           = 8
0.00.561.129 I llm_load_print_meta: n_head_kv        = 1
0.00.561.130 I llm_load_print_meta: n_rot            = 256
0.00.561.130 I llm_load_print_meta: n_swa            = 0
0.00.561.130 I llm_load_print_meta: n_embd_head_k    = 256
0.00.561.131 I llm_load_print_meta: n_embd_head_v    = 256
0.00.561.135 I llm_load_print_meta: n_gqa            = 8
0.00.561.140 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.561.145 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.561.146 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.561.147 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.561.148 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.561.148 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.561.149 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.561.153 I llm_load_print_meta: n_ff             = 16384
0.00.561.154 I llm_load_print_meta: n_expert         = 0
0.00.561.154 I llm_load_print_meta: n_expert_used    = 0
0.00.561.155 I llm_load_print_meta: causal attn      = 1
0.00.561.155 I llm_load_print_meta: pooling type     = 0
0.00.561.156 I llm_load_print_meta: rope type        = 2
0.00.561.157 I llm_load_print_meta: rope scaling     = linear
0.00.561.172 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.561.173 I llm_load_print_meta: freq_scale_train = 1
0.00.561.173 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.561.174 I llm_load_print_meta: rope_finetuned   = unknown
0.00.561.174 I llm_load_print_meta: ssm_d_conv       = 0
0.00.561.175 I llm_load_print_meta: ssm_d_inner      = 0
0.00.561.175 I llm_load_print_meta: ssm_d_state      = 0
0.00.561.175 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.561.175 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.561.176 I llm_load_print_meta: model type       = 2B
0.00.561.177 I llm_load_print_meta: model ftype      = Q8_0
0.00.561.178 I llm_load_print_meta: model params     = 2.51 B
0.00.561.179 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.561.179 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.561.179 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.561.180 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.561.180 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.561.180 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.561.181 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.561.181 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.561.187 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.561.188 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.561.189 I llm_load_print_meta: max token length = 93
0.00.561.371 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.632.378 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.632.390 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.638.108 I llama_new_context_with_model: n_ctx      = 8192
0.00.638.115 I llama_new_context_with_model: n_batch    = 2048
0.00.638.116 I llama_new_context_with_model: n_ubatch   = 512
0.00.638.116 I llama_new_context_with_model: flash_attn = 0
0.00.638.120 I llama_new_context_with_model: freq_base  = 10000.0
0.00.638.121 I llama_new_context_with_model: freq_scale = 1
0.00.667.393 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.667.434 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.667.547 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.668.947 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.668.953 I llama_new_context_with_model: graph nodes  = 601
0.00.668.954 I llama_new_context_with_model: graph splits = 1
0.00.668.970 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.280.949 I main: llama threadpool init, n_threads = 4
0.01.280.962 I 
0.01.281.066 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.281.070 I 
0.01.281.238 I sampler seed: 4212059940
0.01.281.248 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.281.255 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.281.256 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.281.256 I 
 seconary information is not subject to copyright protection.

True
False [end of text]


0.07.664.003 I llama_perf_sampler_print:    sampling time =      23.08 ms /    16 runs   (    1.44 ms per token,   693.33 tokens per second)
0.07.664.006 I llama_perf_context_print:        load time =    1277.95 ms
0.07.664.007 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.664.008 I llama_perf_context_print:        eval time =    6344.00 ms /    15 runs   (  422.93 ms per token,     2.36 tokens per second)
0.07.664.009 I llama_perf_context_print:       total time =    6383.06 ms /    16 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m47.920s
user	2m23.853s
sys	0m9.632s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3904 (cf8e0a3b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198999.25 ms
main:    total time = 198999.25 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.670 I build: 3904 (cf8e0a3b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.002.810 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.168 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.383 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.481 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.494 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.496 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.500 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.502 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.503 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.504 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.505 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.506 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.515 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.519 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.520 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.521 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.521 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.762 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.170 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.604 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.615 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.616 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.617 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.618 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.620 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.621 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.625 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.626 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.629 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.631 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.270.632 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.641 I llama_model_loader: - type  f32:   37 tensors
0.00.270.645 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.646 I llama_model_loader: - type q6_K:   19 tensors
0.00.446.840 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.479.116 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.480.218 I llm_load_vocab: special tokens cache size = 5
0.00.576.246 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.576.311 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.576.312 I llm_load_print_meta: arch             = gemma
0.00.576.313 I llm_load_print_meta: vocab type       = SPM
0.00.576.314 I llm_load_print_meta: n_vocab          = 256000
0.00.576.316 I llm_load_print_meta: n_merges         = 0
0.00.576.316 I llm_load_print_meta: vocab_only       = 0
0.00.576.317 I llm_load_print_meta: n_ctx_train      = 8192
0.00.576.317 I llm_load_print_meta: n_embd           = 2048
0.00.576.317 I llm_load_print_meta: n_layer          = 18
0.00.576.384 I llm_load_print_meta: n_head           = 8
0.00.576.391 I llm_load_print_meta: n_head_kv        = 1
0.00.576.392 I llm_load_print_meta: n_rot            = 256
0.00.576.392 I llm_load_print_meta: n_swa            = 0
0.00.576.392 I llm_load_print_meta: n_embd_head_k    = 256
0.00.576.393 I llm_load_print_meta: n_embd_head_v    = 256
0.00.576.397 I llm_load_print_meta: n_gqa            = 8
0.00.576.402 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.576.407 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.576.408 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.576.410 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.576.410 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.576.411 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.576.411 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.576.416 I llm_load_print_meta: n_ff             = 16384
0.00.576.416 I llm_load_print_meta: n_expert         = 0
0.00.576.417 I llm_load_print_meta: n_expert_used    = 0
0.00.576.417 I llm_load_print_meta: causal attn      = 1
0.00.576.417 I llm_load_print_meta: pooling type     = 0
0.00.576.418 I llm_load_print_meta: rope type        = 2
0.00.576.418 I llm_load_print_meta: rope scaling     = linear
0.00.576.419 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.576.420 I llm_load_print_meta: freq_scale_train = 1
0.00.576.420 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.576.421 I llm_load_print_meta: rope_finetuned   = unknown
0.00.576.421 I llm_load_print_meta: ssm_d_conv       = 0
0.00.576.421 I llm_load_print_meta: ssm_d_inner      = 0
0.00.576.422 I llm_load_print_meta: ssm_d_state      = 0
0.00.576.422 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.576.422 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.576.423 I llm_load_print_meta: model type       = 2B
0.00.576.424 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.576.425 I llm_load_print_meta: model params     = 2.51 B
0.00.576.425 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.576.426 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.576.426 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.576.426 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.576.427 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.576.427 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.576.427 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.576.428 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.576.433 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.576.434 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.576.460 I llm_load_print_meta: max token length = 93
0.00.576.637 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.635.243 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.635.254 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.635.255 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.635.256 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.635.256 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.635.257 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.640.972 I llama_new_context_with_model: n_ctx      = 8192
0.00.640.979 I llama_new_context_with_model: n_batch    = 2048
0.00.640.980 I llama_new_context_with_model: n_ubatch   = 512
0.00.640.981 I llama_new_context_with_model: flash_attn = 0
0.00.640.984 I llama_new_context_with_model: freq_base  = 10000.0
0.00.640.985 I llama_new_context_with_model: freq_scale = 1
0.00.671.861 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.671.903 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.672.019 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.673.461 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.673.468 I llama_new_context_with_model: graph nodes  = 601
0.00.673.469 I llama_new_context_with_model: graph splits = 1
0.00.673.484 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.251.879 I main: llama threadpool init, n_threads = 4
0.01.251.891 I 
0.01.251.996 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.251.999 I 
0.01.252.164 I sampler seed: 2498835520
0.01.252.175 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.252.182 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.252.182 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.252.182 I 
 susceptables.

**Assistant**

I am unable to access or process external websites or URLs. Therefore, I am unable to provide you with the requested information

0.12.245.206 I llama_perf_sampler_print:    sampling time =      49.13 ms /    33 runs   (    1.49 ms per token,   671.66 tokens per second)
0.12.245.211 I llama_perf_context_print:        load time =    1248.88 ms
0.12.245.213 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.245.214 I llama_perf_context_print:        eval time =   10911.38 ms /    32 runs   (  340.98 ms per token,     2.93 tokens per second)
0.12.245.216 I llama_perf_context_print:       total time =   10993.34 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3904 (cf8e0a3b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198897.22 ms
main:    total time = 198897.22 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.653 I build: 3904 (cf8e0a3b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.877 I main: llama backend init
0.00.002.829 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.270 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.379 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.396 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.400 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.407 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.410 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.412 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.414 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.416 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.418 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.428 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.433 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.435 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.437 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.442 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.597 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.956 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.384 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.394 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.395 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.396 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.397 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.398 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.399 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.403 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.404 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.413 I llama_model_loader: - type  f32:   37 tensors
0.00.270.418 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.418 I llama_model_loader: - type q6_K:   19 tensors
0.00.435.921 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.465.612 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.466.674 I llm_load_vocab: special tokens cache size = 5
0.00.561.459 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.561.525 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.561.526 I llm_load_print_meta: arch             = gemma
0.00.561.527 I llm_load_print_meta: vocab type       = SPM
0.00.561.529 I llm_load_print_meta: n_vocab          = 256000
0.00.561.531 I llm_load_print_meta: n_merges         = 0
0.00.561.532 I llm_load_print_meta: vocab_only       = 0
0.00.561.532 I llm_load_print_meta: n_ctx_train      = 8192
0.00.561.533 I llm_load_print_meta: n_embd           = 2048
0.00.561.533 I llm_load_print_meta: n_layer          = 18
0.00.561.600 I llm_load_print_meta: n_head           = 8
0.00.561.607 I llm_load_print_meta: n_head_kv        = 1
0.00.561.607 I llm_load_print_meta: n_rot            = 256
0.00.561.608 I llm_load_print_meta: n_swa            = 0
0.00.561.608 I llm_load_print_meta: n_embd_head_k    = 256
0.00.561.609 I llm_load_print_meta: n_embd_head_v    = 256
0.00.561.613 I llm_load_print_meta: n_gqa            = 8
0.00.561.618 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.561.622 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.561.623 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.561.625 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.561.625 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.561.626 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.561.626 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.561.631 I llm_load_print_meta: n_ff             = 16384
0.00.561.631 I llm_load_print_meta: n_expert         = 0
0.00.561.631 I llm_load_print_meta: n_expert_used    = 0
0.00.561.632 I llm_load_print_meta: causal attn      = 1
0.00.561.632 I llm_load_print_meta: pooling type     = 0
0.00.561.632 I llm_load_print_meta: rope type        = 2
0.00.561.633 I llm_load_print_meta: rope scaling     = linear
0.00.561.661 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.561.662 I llm_load_print_meta: freq_scale_train = 1
0.00.561.663 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.561.663 I llm_load_print_meta: rope_finetuned   = unknown
0.00.561.663 I llm_load_print_meta: ssm_d_conv       = 0
0.00.561.664 I llm_load_print_meta: ssm_d_inner      = 0
0.00.561.664 I llm_load_print_meta: ssm_d_state      = 0
0.00.561.665 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.561.670 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.561.671 I llm_load_print_meta: model type       = 2B
0.00.561.673 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.561.674 I llm_load_print_meta: model params     = 2.51 B
0.00.561.675 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.561.675 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.561.675 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.561.676 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.561.676 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.561.677 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.561.678 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.561.678 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.561.685 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.561.693 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.561.693 I llm_load_print_meta: max token length = 93
0.00.561.866 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.619.262 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.625.178 I llama_new_context_with_model: n_ctx      = 8192
0.00.625.187 I llama_new_context_with_model: n_batch    = 2048
0.00.625.188 I llama_new_context_with_model: n_ubatch   = 512
0.00.625.188 I llama_new_context_with_model: flash_attn = 0
0.00.625.193 I llama_new_context_with_model: freq_base  = 10000.0
0.00.625.193 I llama_new_context_with_model: freq_scale = 1
0.00.655.964 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.656.010 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.656.116 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.657.497 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.657.505 I llama_new_context_with_model: graph nodes  = 601
0.00.657.505 I llama_new_context_with_model: graph splits = 1
0.00.657.522 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.233.781 I main: llama threadpool init, n_threads = 4
0.01.233.794 I 
0.01.233.919 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.233.924 I 
0.01.234.103 I sampler seed: 3328984604
0.01.234.114 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.234.121 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.234.122 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.234.122 I 
 increasively with the given sentence:

"The quick brown fox jumps over the lazy dog."

a) The quick brown fox jumps over the lazy dog.

0.12.189.926 I llama_perf_sampler_print:    sampling time =      49.02 ms /    33 runs   (    1.49 ms per token,   673.13 tokens per second)
0.12.189.929 I llama_perf_context_print:        load time =    1230.73 ms
0.12.189.930 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.189.945 I llama_perf_context_print:        eval time =   10874.37 ms /    32 runs   (  339.82 ms per token,     2.94 tokens per second)
0.12.189.946 I llama_perf_context_print:       total time =   10956.15 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.249s
user	50m17.532s
sys	0m6.473s
