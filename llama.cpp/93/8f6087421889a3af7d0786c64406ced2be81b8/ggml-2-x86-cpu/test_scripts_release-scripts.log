+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.525 I build: 4218 (938f6087) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.732 I main: llama backend init
0.00.000.739 I main: load the model and apply lora adapter, if any
0.00.021.399 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.409 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.416 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.426 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.430 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.433 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.434 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.434 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.435 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.435 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.435 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.439 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.439 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.440 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.441 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.441 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.672 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.213 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.027 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.034 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.034 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.035 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.035 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.036 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.037 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.040 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.041 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.042 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.043 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.043 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.046 I llama_model_loader: - type  f32:   37 tensors
0.00.130.046 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.233 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.557 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.089 I llm_load_vocab: special tokens cache size = 5
0.00.262.119 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.134 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.135 I llm_load_print_meta: arch             = gemma
0.00.262.135 I llm_load_print_meta: vocab type       = SPM
0.00.262.136 I llm_load_print_meta: n_vocab          = 256000
0.00.262.137 I llm_load_print_meta: n_merges         = 0
0.00.262.137 I llm_load_print_meta: vocab_only       = 0
0.00.262.138 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.138 I llm_load_print_meta: n_embd           = 2048
0.00.262.138 I llm_load_print_meta: n_layer          = 18
0.00.262.150 I llm_load_print_meta: n_head           = 8
0.00.262.151 I llm_load_print_meta: n_head_kv        = 1
0.00.262.151 I llm_load_print_meta: n_rot            = 256
0.00.262.151 I llm_load_print_meta: n_swa            = 0
0.00.262.152 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.152 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.153 I llm_load_print_meta: n_gqa            = 8
0.00.262.154 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.155 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.156 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.157 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.158 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.158 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.158 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.159 I llm_load_print_meta: n_ff             = 16384
0.00.262.159 I llm_load_print_meta: n_expert         = 0
0.00.262.160 I llm_load_print_meta: n_expert_used    = 0
0.00.262.160 I llm_load_print_meta: causal attn      = 1
0.00.262.160 I llm_load_print_meta: pooling type     = 0
0.00.262.161 I llm_load_print_meta: rope type        = 2
0.00.262.161 I llm_load_print_meta: rope scaling     = linear
0.00.262.163 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.164 I llm_load_print_meta: freq_scale_train = 1
0.00.262.164 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.164 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.165 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.165 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.165 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.165 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.165 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.166 I llm_load_print_meta: model type       = 2B
0.00.262.167 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.167 I llm_load_print_meta: model params     = 2.51 B
0.00.262.168 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.168 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.169 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.169 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.170 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.170 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.170 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.171 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.171 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.172 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.172 I llm_load_print_meta: max token length = 93
0.00.364.578 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.364.587 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.364.588 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.364.589 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.364.589 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.364.590 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.369.833 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.839 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.840 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.840 I llama_new_context_with_model: n_batch       = 2048
0.00.369.841 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.841 I llama_new_context_with_model: flash_attn    = 0
0.00.369.843 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.845 I llama_new_context_with_model: freq_scale    = 1
0.00.369.845 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.384.270 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.384.283 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.384.375 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.669 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.385.675 I llama_new_context_with_model: graph nodes  = 601
0.00.385.676 I llama_new_context_with_model: graph splits = 1
0.00.385.678 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.470.583 I main: llama threadpool init, n_threads = 4
0.00.470.598 I 
0.00.470.670 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.470.673 I 
0.00.470.720 I sampler seed: 1343464195
0.00.470.731 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.745 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.470.749 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.750 I 
 increasities, a love triangle between two men and a woman, and a journey of self-discovery.

This story is about a group of friends who embark

0.02.729.839 I llama_perf_sampler_print:    sampling time =       5.25 ms /    33 runs   (    0.16 ms per token,  6284.52 tokens per second)
0.02.729.841 I llama_perf_context_print:        load time =     469.82 ms
0.02.729.842 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.729.844 I llama_perf_context_print:        eval time =    2239.81 ms /    32 runs   (   69.99 ms per token,    14.29 tokens per second)
0.02.729.844 I llama_perf_context_print:       total time =    2259.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.534 I build: 4218 (938f6087) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.725 I main: llama backend init
0.00.000.733 I main: load the model and apply lora adapter, if any
0.00.021.345 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.357 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.363 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.364 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.368 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.371 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.372 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.372 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.374 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.374 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.378 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.378 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.379 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.379 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.380 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.911 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.016 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.890 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.896 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.897 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.897 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.898 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.899 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.899 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.902 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.903 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.904 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.905 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.906 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.910 I llama_model_loader: - type  f32:   37 tensors
0.00.130.910 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.308 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.624 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.157 I llm_load_vocab: special tokens cache size = 5
0.00.266.336 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.351 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.352 I llm_load_print_meta: arch             = gemma
0.00.266.352 I llm_load_print_meta: vocab type       = SPM
0.00.266.353 I llm_load_print_meta: n_vocab          = 256000
0.00.266.354 I llm_load_print_meta: n_merges         = 0
0.00.266.354 I llm_load_print_meta: vocab_only       = 0
0.00.266.354 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.354 I llm_load_print_meta: n_embd           = 2048
0.00.266.355 I llm_load_print_meta: n_layer          = 18
0.00.266.366 I llm_load_print_meta: n_head           = 8
0.00.266.367 I llm_load_print_meta: n_head_kv        = 1
0.00.266.368 I llm_load_print_meta: n_rot            = 256
0.00.266.368 I llm_load_print_meta: n_swa            = 0
0.00.266.368 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.368 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.369 I llm_load_print_meta: n_gqa            = 8
0.00.266.370 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.371 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.372 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.374 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.374 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.374 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.375 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.376 I llm_load_print_meta: n_ff             = 16384
0.00.266.376 I llm_load_print_meta: n_expert         = 0
0.00.266.376 I llm_load_print_meta: n_expert_used    = 0
0.00.266.377 I llm_load_print_meta: causal attn      = 1
0.00.266.377 I llm_load_print_meta: pooling type     = 0
0.00.266.377 I llm_load_print_meta: rope type        = 2
0.00.266.378 I llm_load_print_meta: rope scaling     = linear
0.00.266.380 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.380 I llm_load_print_meta: freq_scale_train = 1
0.00.266.381 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.381 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.381 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.381 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.382 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.382 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.382 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.383 I llm_load_print_meta: model type       = 2B
0.00.266.383 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.384 I llm_load_print_meta: model params     = 2.51 B
0.00.266.385 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.385 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.385 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.386 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.386 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.387 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.387 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.387 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.388 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.388 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.389 I llm_load_print_meta: max token length = 93
0.00.361.445 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.366.598 I llama_new_context_with_model: n_seq_max     = 1
0.00.366.604 I llama_new_context_with_model: n_ctx         = 4096
0.00.366.604 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.366.605 I llama_new_context_with_model: n_batch       = 2048
0.00.366.605 I llama_new_context_with_model: n_ubatch      = 512
0.00.366.606 I llama_new_context_with_model: flash_attn    = 0
0.00.366.608 I llama_new_context_with_model: freq_base     = 10000.0
0.00.366.609 I llama_new_context_with_model: freq_scale    = 1
0.00.366.610 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.381.018 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.381.034 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.381.140 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.382.419 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.382.426 I llama_new_context_with_model: graph nodes  = 601
0.00.382.427 I llama_new_context_with_model: graph splits = 1
0.00.382.429 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.462.906 I main: llama threadpool init, n_threads = 4
0.00.462.921 I 
0.00.462.993 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.462.996 I 
0.00.463.044 I sampler seed: 570601183
0.00.463.055 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.463.059 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.463.060 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.463.060 I 
 increably.

I am unable to access the text you are requesting as I am a language model and do not have access to external websites or specific files.

0.02.636.423 I llama_perf_sampler_print:    sampling time =       4.88 ms /    33 runs   (    0.15 ms per token,  6760.91 tokens per second)
0.02.636.426 I llama_perf_context_print:        load time =     462.15 ms
0.02.636.427 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.636.428 I llama_perf_context_print:        eval time =    2155.01 ms /    32 runs   (   67.34 ms per token,    14.85 tokens per second)
0.02.636.429 I llama_perf_context_print:       total time =    2173.53 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.451 I build: 4218 (938f6087) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.641 I main: llama backend init
0.00.000.647 I main: load the model and apply lora adapter, if any
0.00.021.150 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.160 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.168 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.172 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.173 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.177 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.177 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.178 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.178 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.179 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.179 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.184 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.184 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.185 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.186 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.186 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.060 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.133 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.135.842 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.135.849 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.135.849 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.135.850 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.135.850 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.135.851 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.135.852 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.135.854 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.135.855 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.135.856 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.135.857 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.135.858 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.135.861 I llama_model_loader: - type  f32:   37 tensors
0.00.135.863 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.943 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.263 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.808 I llm_load_vocab: special tokens cache size = 5
0.00.271.746 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.761 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.762 I llm_load_print_meta: arch             = gemma
0.00.271.762 I llm_load_print_meta: vocab type       = SPM
0.00.271.763 I llm_load_print_meta: n_vocab          = 256000
0.00.271.763 I llm_load_print_meta: n_merges         = 0
0.00.271.764 I llm_load_print_meta: vocab_only       = 0
0.00.271.764 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.764 I llm_load_print_meta: n_embd           = 2048
0.00.271.764 I llm_load_print_meta: n_layer          = 18
0.00.271.775 I llm_load_print_meta: n_head           = 8
0.00.271.776 I llm_load_print_meta: n_head_kv        = 1
0.00.271.776 I llm_load_print_meta: n_rot            = 256
0.00.271.776 I llm_load_print_meta: n_swa            = 0
0.00.271.777 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.777 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.778 I llm_load_print_meta: n_gqa            = 8
0.00.271.779 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.780 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.781 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.782 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.783 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.783 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.783 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.784 I llm_load_print_meta: n_ff             = 16384
0.00.271.785 I llm_load_print_meta: n_expert         = 0
0.00.271.785 I llm_load_print_meta: n_expert_used    = 0
0.00.271.785 I llm_load_print_meta: causal attn      = 1
0.00.271.786 I llm_load_print_meta: pooling type     = 0
0.00.271.786 I llm_load_print_meta: rope type        = 2
0.00.271.786 I llm_load_print_meta: rope scaling     = linear
0.00.271.788 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.788 I llm_load_print_meta: freq_scale_train = 1
0.00.271.789 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.789 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.789 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.789 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.790 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.790 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.790 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.791 I llm_load_print_meta: model type       = 2B
0.00.271.791 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.792 I llm_load_print_meta: model params     = 2.51 B
0.00.271.793 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.793 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.793 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.794 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.794 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.795 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.795 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.795 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.796 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.796 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.796 I llm_load_print_meta: max token length = 93
0.00.349.662 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.349.668 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.349.669 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.349.669 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.349.670 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.349.671 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.354.840 I llama_new_context_with_model: n_seq_max     = 1
0.00.354.845 I llama_new_context_with_model: n_ctx         = 4096
0.00.354.846 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.354.846 I llama_new_context_with_model: n_batch       = 2048
0.00.354.847 I llama_new_context_with_model: n_ubatch      = 512
0.00.354.847 I llama_new_context_with_model: flash_attn    = 0
0.00.354.849 I llama_new_context_with_model: freq_base     = 10000.0
0.00.354.850 I llama_new_context_with_model: freq_scale    = 1
0.00.354.851 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.368.998 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.369.011 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.369.099 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.370.362 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.370.367 I llama_new_context_with_model: graph nodes  = 601
0.00.370.368 I llama_new_context_with_model: graph splits = 1
0.00.370.371 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.460.579 I main: llama threadpool init, n_threads = 4
0.00.460.595 I 
0.00.460.686 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.460.689 I 
0.00.460.752 I sampler seed: 3788472638
0.00.460.763 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.460.768 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.460.769 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.460.770 I 
 increably. [end of text]


0.00.751.709 I llama_perf_sampler_print:    sampling time =       0.62 ms /     5 runs   (    0.12 ms per token,  8103.73 tokens per second)
0.00.751.711 I llama_perf_context_print:        load time =     459.91 ms
0.00.751.712 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.751.714 I llama_perf_context_print:        eval time =     287.89 ms /     4 runs   (   71.97 ms per token,    13.89 tokens per second)
0.00.751.714 I llama_perf_context_print:       total time =     291.14 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.469 I build: 4218 (938f6087) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.664 I main: llama backend init
0.00.000.670 I main: load the model and apply lora adapter, if any
0.00.021.010 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.019 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.028 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.032 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.033 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.036 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.037 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.037 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.038 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.039 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.040 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.044 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.045 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.045 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.046 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.046 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.849 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.529 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.303 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.309 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.310 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.311 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.312 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.313 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.314 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.317 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.318 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.319 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.320 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.129.321 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.324 I llama_model_loader: - type  f32:   37 tensors
0.00.129.325 I llama_model_loader: - type q8_0:  127 tensors
0.00.199.560 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.045 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.572 I llm_load_vocab: special tokens cache size = 5
0.00.261.477 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.493 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.494 I llm_load_print_meta: arch             = gemma
0.00.261.494 I llm_load_print_meta: vocab type       = SPM
0.00.261.495 I llm_load_print_meta: n_vocab          = 256000
0.00.261.495 I llm_load_print_meta: n_merges         = 0
0.00.261.496 I llm_load_print_meta: vocab_only       = 0
0.00.261.496 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.496 I llm_load_print_meta: n_embd           = 2048
0.00.261.497 I llm_load_print_meta: n_layer          = 18
0.00.261.508 I llm_load_print_meta: n_head           = 8
0.00.261.508 I llm_load_print_meta: n_head_kv        = 1
0.00.261.509 I llm_load_print_meta: n_rot            = 256
0.00.261.509 I llm_load_print_meta: n_swa            = 0
0.00.261.509 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.510 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.511 I llm_load_print_meta: n_gqa            = 8
0.00.261.512 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.513 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.513 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.515 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.515 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.516 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.516 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.517 I llm_load_print_meta: n_ff             = 16384
0.00.261.518 I llm_load_print_meta: n_expert         = 0
0.00.261.518 I llm_load_print_meta: n_expert_used    = 0
0.00.261.518 I llm_load_print_meta: causal attn      = 1
0.00.261.518 I llm_load_print_meta: pooling type     = 0
0.00.261.519 I llm_load_print_meta: rope type        = 2
0.00.261.519 I llm_load_print_meta: rope scaling     = linear
0.00.261.520 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.521 I llm_load_print_meta: freq_scale_train = 1
0.00.261.521 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.522 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.522 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.522 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.522 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.523 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.523 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.523 I llm_load_print_meta: model type       = 2B
0.00.261.524 I llm_load_print_meta: model ftype      = Q8_0
0.00.261.525 I llm_load_print_meta: model params     = 2.51 B
0.00.261.525 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.261.526 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.527 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.527 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.527 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.527 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.528 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.528 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.529 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.529 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.529 I llm_load_print_meta: max token length = 93
0.00.332.933 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.332.939 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.338.023 I llama_new_context_with_model: n_seq_max     = 1
0.00.338.029 I llama_new_context_with_model: n_ctx         = 4096
0.00.338.029 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.338.029 I llama_new_context_with_model: n_batch       = 2048
0.00.338.030 I llama_new_context_with_model: n_ubatch      = 512
0.00.338.030 I llama_new_context_with_model: flash_attn    = 0
0.00.338.033 I llama_new_context_with_model: freq_base     = 10000.0
0.00.338.033 I llama_new_context_with_model: freq_scale    = 1
0.00.338.034 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.352.513 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.352.526 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.352.617 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.353.922 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.353.926 I llama_new_context_with_model: graph nodes  = 601
0.00.353.927 I llama_new_context_with_model: graph splits = 1
0.00.353.929 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.440.022 I main: llama threadpool init, n_threads = 4
0.00.440.041 I 
0.00.440.122 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.440.125 I 
0.00.440.175 I sampler seed: 529733810
0.00.440.187 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.440.193 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.440.194 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.440.194 I 
 seconally.

I am unable to generate a response as I am unable to access or process external information sources. [end of text]


0.02.257.268 I llama_perf_sampler_print:    sampling time =       4.08 ms /    25 runs   (    0.16 ms per token,  6127.45 tokens per second)
0.02.257.271 I llama_perf_context_print:        load time =     439.33 ms
0.02.257.273 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.257.275 I llama_perf_context_print:        eval time =    1802.01 ms /    24 runs   (   75.08 ms per token,    13.32 tokens per second)
0.02.257.278 I llama_perf_context_print:       total time =    1817.25 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.996s
user	0m29.033s
sys	0m9.290s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4218 (938f6087)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40335.92 ms
main:    total time = 40335.92 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.576 I build: 4218 (938f6087) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.785 I main: llama backend init
0.00.000.793 I main: load the model and apply lora adapter, if any
0.00.021.410 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.421 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.430 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.436 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.437 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.441 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.441 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.442 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.442 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.443 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.443 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.448 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.449 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.450 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.451 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.451 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.091 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.329 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.119 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.125 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.126 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.126 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.127 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.128 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.128 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.131 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.131 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.132 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.134 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.135 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.139 I llama_model_loader: - type  f32:   37 tensors
0.00.131.140 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.140 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.207 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.188 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.684 I llm_load_vocab: special tokens cache size = 5
0.00.263.555 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.571 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.571 I llm_load_print_meta: arch             = gemma
0.00.263.572 I llm_load_print_meta: vocab type       = SPM
0.00.263.573 I llm_load_print_meta: n_vocab          = 256000
0.00.263.573 I llm_load_print_meta: n_merges         = 0
0.00.263.574 I llm_load_print_meta: vocab_only       = 0
0.00.263.574 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.574 I llm_load_print_meta: n_embd           = 2048
0.00.263.574 I llm_load_print_meta: n_layer          = 18
0.00.263.585 I llm_load_print_meta: n_head           = 8
0.00.263.586 I llm_load_print_meta: n_head_kv        = 1
0.00.263.587 I llm_load_print_meta: n_rot            = 256
0.00.263.587 I llm_load_print_meta: n_swa            = 0
0.00.263.587 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.588 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.589 I llm_load_print_meta: n_gqa            = 8
0.00.263.589 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.590 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.592 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.593 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.593 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.594 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.594 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.595 I llm_load_print_meta: n_ff             = 16384
0.00.263.595 I llm_load_print_meta: n_expert         = 0
0.00.263.595 I llm_load_print_meta: n_expert_used    = 0
0.00.263.596 I llm_load_print_meta: causal attn      = 1
0.00.263.596 I llm_load_print_meta: pooling type     = 0
0.00.263.596 I llm_load_print_meta: rope type        = 2
0.00.263.597 I llm_load_print_meta: rope scaling     = linear
0.00.263.599 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.599 I llm_load_print_meta: freq_scale_train = 1
0.00.263.600 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.600 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.600 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.601 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.601 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.601 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.601 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.602 I llm_load_print_meta: model type       = 2B
0.00.263.603 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.263.603 I llm_load_print_meta: model params     = 2.51 B
0.00.263.604 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.263.605 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.605 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.605 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.606 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.606 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.606 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.607 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.607 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.608 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.608 I llm_load_print_meta: max token length = 93
0.00.324.778 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.324.783 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.324.784 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.324.785 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.324.785 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.324.786 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.329.895 I llama_new_context_with_model: n_seq_max     = 1
0.00.329.901 I llama_new_context_with_model: n_ctx         = 4096
0.00.329.901 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.329.902 I llama_new_context_with_model: n_batch       = 2048
0.00.329.902 I llama_new_context_with_model: n_ubatch      = 512
0.00.329.903 I llama_new_context_with_model: flash_attn    = 0
0.00.329.905 I llama_new_context_with_model: freq_base     = 10000.0
0.00.329.906 I llama_new_context_with_model: freq_scale    = 1
0.00.329.906 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.344.073 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.344.085 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.344.168 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.345.433 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.345.440 I llama_new_context_with_model: graph nodes  = 601
0.00.345.440 I llama_new_context_with_model: graph splits = 1
0.00.345.442 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.420.312 I main: llama threadpool init, n_threads = 4
0.00.420.327 I 
0.00.420.400 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.420.403 I 
0.00.420.446 I sampler seed: 1571384524
0.00.420.457 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.420.469 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.420.473 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.420.473 I 
 effe di nuovo!

I'm excited to start using your platform! Can you tell me more about the features and benefits of your platform?

**Features

0.02.003.488 I llama_perf_sampler_print:    sampling time =       5.02 ms /    33 runs   (    0.15 ms per token,  6577.64 tokens per second)
0.02.003.490 I llama_perf_context_print:        load time =     419.50 ms
0.02.003.492 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.003.493 I llama_perf_context_print:        eval time =    1564.33 ms /    32 runs   (   48.89 ms per token,    20.46 tokens per second)
0.02.003.494 I llama_perf_context_print:       total time =    1583.18 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4218 (938f6087)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40188.58 ms
main:    total time = 40188.58 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.524 I build: 4218 (938f6087) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.735 I main: llama backend init
0.00.000.743 I main: load the model and apply lora adapter, if any
0.00.021.189 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.205 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.216 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.217 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.222 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.222 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.223 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.223 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.224 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.225 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.229 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.229 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.230 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.230 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.231 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.341 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.604 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.452 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.459 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.459 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.460 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.460 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.461 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.462 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.465 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.466 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.470 I llama_model_loader: - type  f32:   37 tensors
0.00.131.471 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.471 I llama_model_loader: - type q6_K:   19 tensors
0.00.209.093 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.744 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.348 I llm_load_vocab: special tokens cache size = 5
0.00.279.520 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.537 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.537 I llm_load_print_meta: arch             = gemma
0.00.279.538 I llm_load_print_meta: vocab type       = SPM
0.00.279.539 I llm_load_print_meta: n_vocab          = 256000
0.00.279.539 I llm_load_print_meta: n_merges         = 0
0.00.279.539 I llm_load_print_meta: vocab_only       = 0
0.00.279.540 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.540 I llm_load_print_meta: n_embd           = 2048
0.00.279.541 I llm_load_print_meta: n_layer          = 18
0.00.279.552 I llm_load_print_meta: n_head           = 8
0.00.279.553 I llm_load_print_meta: n_head_kv        = 1
0.00.279.553 I llm_load_print_meta: n_rot            = 256
0.00.279.554 I llm_load_print_meta: n_swa            = 0
0.00.279.554 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.554 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.555 I llm_load_print_meta: n_gqa            = 8
0.00.279.556 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.557 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.558 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.559 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.560 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.561 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.561 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.562 I llm_load_print_meta: n_ff             = 16384
0.00.279.562 I llm_load_print_meta: n_expert         = 0
0.00.279.562 I llm_load_print_meta: n_expert_used    = 0
0.00.279.563 I llm_load_print_meta: causal attn      = 1
0.00.279.563 I llm_load_print_meta: pooling type     = 0
0.00.279.563 I llm_load_print_meta: rope type        = 2
0.00.279.564 I llm_load_print_meta: rope scaling     = linear
0.00.279.565 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.566 I llm_load_print_meta: freq_scale_train = 1
0.00.279.566 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.567 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.567 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.567 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.567 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.568 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.568 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.568 I llm_load_print_meta: model type       = 2B
0.00.279.569 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.279.570 I llm_load_print_meta: model params     = 2.51 B
0.00.279.570 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.279.571 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.571 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.572 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.572 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.572 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.573 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.573 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.573 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.574 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.574 I llm_load_print_meta: max token length = 93
0.00.334.516 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.339.504 I llama_new_context_with_model: n_seq_max     = 1
0.00.339.509 I llama_new_context_with_model: n_ctx         = 4096
0.00.339.510 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.339.510 I llama_new_context_with_model: n_batch       = 2048
0.00.339.511 I llama_new_context_with_model: n_ubatch      = 512
0.00.339.511 I llama_new_context_with_model: flash_attn    = 0
0.00.339.514 I llama_new_context_with_model: freq_base     = 10000.0
0.00.339.514 I llama_new_context_with_model: freq_scale    = 1
0.00.339.515 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.354.525 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.354.541 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.354.643 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.355.898 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.355.902 I llama_new_context_with_model: graph nodes  = 601
0.00.355.903 I llama_new_context_with_model: graph splits = 1
0.00.355.904 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.429.331 I main: llama threadpool init, n_threads = 4
0.00.429.346 I 
0.00.429.427 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.429.431 I 
0.00.429.490 I sampler seed: 2501339548
0.00.429.502 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.429.512 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.429.516 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.429.517 I 
 increasities and anxieties and often have difficulty functioning in social settings. They may exhibit a pattern of poor self-esteem, impulsivity, and poor coping skills.

0.01.976.107 I llama_perf_sampler_print:    sampling time =       4.93 ms /    33 runs   (    0.15 ms per token,  6691.00 tokens per second)
0.01.976.109 I llama_perf_context_print:        load time =     428.57 ms
0.01.976.110 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.976.112 I llama_perf_context_print:        eval time =    1528.14 ms /    32 runs   (   47.75 ms per token,    20.94 tokens per second)
0.01.976.112 I llama_perf_context_print:       total time =    1546.78 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.294s
user	10m23.791s
sys	0m6.878s
