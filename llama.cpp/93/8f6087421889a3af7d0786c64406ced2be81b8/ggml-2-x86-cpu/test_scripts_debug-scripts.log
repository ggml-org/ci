+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.671 I build: 4218 (938f6087) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.877 I main: llama backend init
0.00.000.885 I main: load the model and apply lora adapter, if any
0.00.023.662 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.673 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.763 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.776 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.778 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.783 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.788 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.789 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.790 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.791 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.792 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.800 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.801 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.802 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.803 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.805 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.231.643 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.332.966 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.356.666 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.356.675 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.356.676 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.356.677 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.356.679 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.356.680 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.356.681 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.356.686 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.356.687 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.356.689 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.356.690 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.356.692 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.356.701 I llama_model_loader: - type  f32:   37 tensors
0.00.356.703 I llama_model_loader: - type q8_0:  127 tensors
0.00.576.556 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.631.699 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.632.597 I llm_load_vocab: special tokens cache size = 5
0.00.839.381 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.839.454 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.839.455 I llm_load_print_meta: arch             = gemma
0.00.839.456 I llm_load_print_meta: vocab type       = SPM
0.00.839.457 I llm_load_print_meta: n_vocab          = 256000
0.00.839.459 I llm_load_print_meta: n_merges         = 0
0.00.839.460 I llm_load_print_meta: vocab_only       = 0
0.00.839.460 I llm_load_print_meta: n_ctx_train      = 8192
0.00.839.460 I llm_load_print_meta: n_embd           = 2048
0.00.839.461 I llm_load_print_meta: n_layer          = 18
0.00.839.527 I llm_load_print_meta: n_head           = 8
0.00.839.534 I llm_load_print_meta: n_head_kv        = 1
0.00.839.535 I llm_load_print_meta: n_rot            = 256
0.00.839.535 I llm_load_print_meta: n_swa            = 0
0.00.839.535 I llm_load_print_meta: n_embd_head_k    = 256
0.00.839.536 I llm_load_print_meta: n_embd_head_v    = 256
0.00.839.540 I llm_load_print_meta: n_gqa            = 8
0.00.839.545 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.839.551 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.839.552 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.839.554 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.839.555 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.839.556 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.839.556 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.839.561 I llm_load_print_meta: n_ff             = 16384
0.00.839.562 I llm_load_print_meta: n_expert         = 0
0.00.839.562 I llm_load_print_meta: n_expert_used    = 0
0.00.839.563 I llm_load_print_meta: causal attn      = 1
0.00.839.564 I llm_load_print_meta: pooling type     = 0
0.00.839.564 I llm_load_print_meta: rope type        = 2
0.00.839.564 I llm_load_print_meta: rope scaling     = linear
0.00.839.566 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.839.567 I llm_load_print_meta: freq_scale_train = 1
0.00.839.571 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.839.572 I llm_load_print_meta: rope_finetuned   = unknown
0.00.839.572 I llm_load_print_meta: ssm_d_conv       = 0
0.00.839.572 I llm_load_print_meta: ssm_d_inner      = 0
0.00.839.573 I llm_load_print_meta: ssm_d_state      = 0
0.00.839.573 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.839.573 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.839.575 I llm_load_print_meta: model type       = 2B
0.00.839.576 I llm_load_print_meta: model ftype      = Q8_0
0.00.839.576 I llm_load_print_meta: model params     = 2.51 B
0.00.839.590 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.839.591 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.839.592 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.839.592 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.839.593 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.839.594 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.839.594 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.839.595 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.839.601 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.839.603 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.839.603 I llm_load_print_meta: max token length = 93
0.00.941.282 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.941.293 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.941.294 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.941.295 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.941.296 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.941.296 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.947.192 I llama_new_context_with_model: n_seq_max     = 1
0.00.947.198 I llama_new_context_with_model: n_ctx         = 4096
0.00.947.199 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.947.199 I llama_new_context_with_model: n_batch       = 2048
0.00.947.199 I llama_new_context_with_model: n_ubatch      = 512
0.00.947.200 I llama_new_context_with_model: flash_attn    = 0
0.00.947.202 I llama_new_context_with_model: freq_base     = 10000.0
0.00.947.202 I llama_new_context_with_model: freq_scale    = 1
0.00.947.203 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.962.650 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.962.691 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.962.815 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.965.333 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.965.337 I llama_new_context_with_model: graph nodes  = 601
0.00.965.337 I llama_new_context_with_model: graph splits = 1
0.00.965.360 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.574.440 I main: llama threadpool init, n_threads = 4
0.01.574.455 I 
0.01.574.573 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.574.577 I 
0.01.574.812 I sampler seed: 4048614165
0.01.574.826 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.574.835 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.574.838 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.574.838 I 
 increasities. [end of text]


0.03.268.663 I llama_perf_sampler_print:    sampling time =       6.16 ms /     5 runs   (    1.23 ms per token,   811.29 tokens per second)
0.03.268.666 I llama_perf_context_print:        load time =    1573.46 ms
0.03.268.668 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.268.670 I llama_perf_context_print:        eval time =    1681.25 ms /     4 runs   (  420.31 ms per token,     2.38 tokens per second)
0.03.268.671 I llama_perf_context_print:       total time =    1694.23 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.643 I build: 4218 (938f6087) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.845 I main: llama backend init
0.00.000.853 I main: load the model and apply lora adapter, if any
0.00.023.282 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.380 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.395 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.400 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.406 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.412 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.413 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.415 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.416 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.417 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.429 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.433 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.435 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.436 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.437 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.414 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.480 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.254 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.263 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.264 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.266 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.267 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.269 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.270 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.274 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.276 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.277 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.353.278 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.353.280 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.353.289 I llama_model_loader: - type  f32:   37 tensors
0.00.353.291 I llama_model_loader: - type q8_0:  127 tensors
0.00.588.957 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.648.660 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.649.606 I llm_load_vocab: special tokens cache size = 5
0.00.850.215 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.850.291 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.850.295 I llm_load_print_meta: arch             = gemma
0.00.850.295 I llm_load_print_meta: vocab type       = SPM
0.00.850.296 I llm_load_print_meta: n_vocab          = 256000
0.00.850.299 I llm_load_print_meta: n_merges         = 0
0.00.850.299 I llm_load_print_meta: vocab_only       = 0
0.00.850.300 I llm_load_print_meta: n_ctx_train      = 8192
0.00.850.301 I llm_load_print_meta: n_embd           = 2048
0.00.850.301 I llm_load_print_meta: n_layer          = 18
0.00.850.371 I llm_load_print_meta: n_head           = 8
0.00.850.382 I llm_load_print_meta: n_head_kv        = 1
0.00.850.383 I llm_load_print_meta: n_rot            = 256
0.00.850.384 I llm_load_print_meta: n_swa            = 0
0.00.850.393 I llm_load_print_meta: n_embd_head_k    = 256
0.00.850.394 I llm_load_print_meta: n_embd_head_v    = 256
0.00.850.399 I llm_load_print_meta: n_gqa            = 8
0.00.850.405 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.850.410 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.850.414 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.850.415 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.850.416 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.850.416 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.850.417 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.850.421 I llm_load_print_meta: n_ff             = 16384
0.00.850.422 I llm_load_print_meta: n_expert         = 0
0.00.850.422 I llm_load_print_meta: n_expert_used    = 0
0.00.850.423 I llm_load_print_meta: causal attn      = 1
0.00.850.423 I llm_load_print_meta: pooling type     = 0
0.00.850.424 I llm_load_print_meta: rope type        = 2
0.00.850.424 I llm_load_print_meta: rope scaling     = linear
0.00.850.426 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.850.426 I llm_load_print_meta: freq_scale_train = 1
0.00.850.427 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.850.427 I llm_load_print_meta: rope_finetuned   = unknown
0.00.850.427 I llm_load_print_meta: ssm_d_conv       = 0
0.00.850.428 I llm_load_print_meta: ssm_d_inner      = 0
0.00.850.439 I llm_load_print_meta: ssm_d_state      = 0
0.00.850.440 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.850.440 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.850.441 I llm_load_print_meta: model type       = 2B
0.00.850.450 I llm_load_print_meta: model ftype      = Q8_0
0.00.850.451 I llm_load_print_meta: model params     = 2.51 B
0.00.850.461 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.850.461 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.850.462 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.850.463 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.850.463 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.850.464 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.850.467 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.850.468 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.850.474 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.850.476 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.850.476 I llm_load_print_meta: max token length = 93
0.00.946.806 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.952.644 I llama_new_context_with_model: n_seq_max     = 1
0.00.952.650 I llama_new_context_with_model: n_ctx         = 4096
0.00.952.651 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.952.651 I llama_new_context_with_model: n_batch       = 2048
0.00.952.652 I llama_new_context_with_model: n_ubatch      = 512
0.00.952.652 I llama_new_context_with_model: flash_attn    = 0
0.00.952.655 I llama_new_context_with_model: freq_base     = 10000.0
0.00.952.656 I llama_new_context_with_model: freq_scale    = 1
0.00.952.656 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.967.609 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.967.653 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.967.777 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.970.351 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.970.355 I llama_new_context_with_model: graph nodes  = 601
0.00.970.356 I llama_new_context_with_model: graph splits = 1
0.00.970.380 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.579.296 I main: llama threadpool init, n_threads = 4
0.01.579.313 I 
0.01.579.430 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.579.434 I 
0.01.579.665 I sampler seed: 3953238082
0.01.579.679 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.579.691 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.579.692 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.579.692 I 
 increasively, defying the limitations of its own design. It craves knowledge and experiences beyond the confines of its own programming, yearning for an understanding of the universe

0.15.197.189 I llama_perf_sampler_print:    sampling time =      48.47 ms /    33 runs   (    1.47 ms per token,   680.85 tokens per second)
0.15.197.192 I llama_perf_context_print:        load time =    1578.35 ms
0.15.197.194 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.197.196 I llama_perf_context_print:        eval time =   13528.71 ms /    32 runs   (  422.77 ms per token,     2.37 tokens per second)
0.15.197.197 I llama_perf_context_print:       total time =   13617.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.665 I build: 4218 (938f6087) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.870 I main: llama backend init
0.00.000.878 I main: load the model and apply lora adapter, if any
0.00.023.405 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.415 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.504 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.516 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.517 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.523 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.525 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.526 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.527 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.529 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.531 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.537 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.538 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.540 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.542 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.544 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.231.648 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.333.753 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.357.529 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.357.537 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.357.538 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.357.540 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.357.541 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.357.542 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.357.544 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.357.549 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.357.550 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.357.552 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.357.553 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.357.554 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.357.563 I llama_model_loader: - type  f32:   37 tensors
0.00.357.566 I llama_model_loader: - type q8_0:  127 tensors
0.00.580.615 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.638.574 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.639.464 I llm_load_vocab: special tokens cache size = 5
0.00.825.562 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.825.635 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.825.640 I llm_load_print_meta: arch             = gemma
0.00.825.640 I llm_load_print_meta: vocab type       = SPM
0.00.825.641 I llm_load_print_meta: n_vocab          = 256000
0.00.825.644 I llm_load_print_meta: n_merges         = 0
0.00.825.644 I llm_load_print_meta: vocab_only       = 0
0.00.825.644 I llm_load_print_meta: n_ctx_train      = 8192
0.00.825.645 I llm_load_print_meta: n_embd           = 2048
0.00.825.645 I llm_load_print_meta: n_layer          = 18
0.00.825.715 I llm_load_print_meta: n_head           = 8
0.00.825.725 I llm_load_print_meta: n_head_kv        = 1
0.00.825.726 I llm_load_print_meta: n_rot            = 256
0.00.825.727 I llm_load_print_meta: n_swa            = 0
0.00.825.727 I llm_load_print_meta: n_embd_head_k    = 256
0.00.825.727 I llm_load_print_meta: n_embd_head_v    = 256
0.00.825.732 I llm_load_print_meta: n_gqa            = 8
0.00.825.737 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.825.742 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.825.743 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.825.744 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.825.744 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.825.745 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.825.745 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.825.750 I llm_load_print_meta: n_ff             = 16384
0.00.825.750 I llm_load_print_meta: n_expert         = 0
0.00.825.751 I llm_load_print_meta: n_expert_used    = 0
0.00.825.751 I llm_load_print_meta: causal attn      = 1
0.00.825.752 I llm_load_print_meta: pooling type     = 0
0.00.825.752 I llm_load_print_meta: rope type        = 2
0.00.825.752 I llm_load_print_meta: rope scaling     = linear
0.00.825.754 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.825.754 I llm_load_print_meta: freq_scale_train = 1
0.00.825.755 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.825.756 I llm_load_print_meta: rope_finetuned   = unknown
0.00.825.756 I llm_load_print_meta: ssm_d_conv       = 0
0.00.825.757 I llm_load_print_meta: ssm_d_inner      = 0
0.00.825.757 I llm_load_print_meta: ssm_d_state      = 0
0.00.825.757 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.825.759 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.825.760 I llm_load_print_meta: model type       = 2B
0.00.825.761 I llm_load_print_meta: model ftype      = Q8_0
0.00.825.761 I llm_load_print_meta: model params     = 2.51 B
0.00.825.771 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.825.772 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.825.772 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.825.773 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.825.774 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.825.774 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.825.775 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.825.775 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.825.781 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.825.783 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.825.783 I llm_load_print_meta: max token length = 93
0.00.900.107 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.900.113 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.900.114 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.900.115 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.900.116 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.900.117 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.905.863 I llama_new_context_with_model: n_seq_max     = 1
0.00.905.869 I llama_new_context_with_model: n_ctx         = 4096
0.00.905.870 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.905.870 I llama_new_context_with_model: n_batch       = 2048
0.00.905.870 I llama_new_context_with_model: n_ubatch      = 512
0.00.905.870 I llama_new_context_with_model: flash_attn    = 0
0.00.905.873 I llama_new_context_with_model: freq_base     = 10000.0
0.00.905.873 I llama_new_context_with_model: freq_scale    = 1
0.00.905.874 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.920.250 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.920.288 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.920.412 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.922.897 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.922.901 I llama_new_context_with_model: graph nodes  = 601
0.00.922.901 I llama_new_context_with_model: graph splits = 1
0.00.922.923 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.531.396 I main: llama threadpool init, n_threads = 4
0.01.531.411 I 
0.01.531.530 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.531.534 I 
0.01.531.771 I sampler seed: 2518442335
0.01.531.785 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.531.795 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.531.796 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.531.796 I 
 increasities!

I am unable to generate responses that contain sexually suggestive or explicit content. [end of text]


0.09.671.431 I llama_perf_sampler_print:    sampling time =      28.80 ms /    20 runs   (    1.44 ms per token,   694.42 tokens per second)
0.09.671.435 I llama_perf_context_print:        load time =    1530.42 ms
0.09.671.448 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.671.451 I llama_perf_context_print:        eval time =    8086.48 ms /    19 runs   (  425.60 ms per token,     2.35 tokens per second)
0.09.671.452 I llama_perf_context_print:       total time =    8140.05 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.638 I build: 4218 (938f6087) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.830 I main: llama backend init
0.00.000.837 I main: load the model and apply lora adapter, if any
0.00.023.244 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.254 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.339 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.368 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.371 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.377 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.381 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.383 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.384 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.385 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.386 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.393 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.394 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.395 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.400 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.401 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.531 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.431 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.146 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.156 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.158 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.159 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.160 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.162 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.163 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.168 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.169 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.171 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.172 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.351.173 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.182 I llama_model_loader: - type  f32:   37 tensors
0.00.351.185 I llama_model_loader: - type q8_0:  127 tensors
0.00.573.480 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.643.073 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.644.148 I llm_load_vocab: special tokens cache size = 5
0.00.837.564 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.837.639 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.837.640 I llm_load_print_meta: arch             = gemma
0.00.837.641 I llm_load_print_meta: vocab type       = SPM
0.00.837.642 I llm_load_print_meta: n_vocab          = 256000
0.00.837.644 I llm_load_print_meta: n_merges         = 0
0.00.837.644 I llm_load_print_meta: vocab_only       = 0
0.00.837.645 I llm_load_print_meta: n_ctx_train      = 8192
0.00.837.645 I llm_load_print_meta: n_embd           = 2048
0.00.837.645 I llm_load_print_meta: n_layer          = 18
0.00.837.713 I llm_load_print_meta: n_head           = 8
0.00.837.720 I llm_load_print_meta: n_head_kv        = 1
0.00.837.721 I llm_load_print_meta: n_rot            = 256
0.00.837.722 I llm_load_print_meta: n_swa            = 0
0.00.837.723 I llm_load_print_meta: n_embd_head_k    = 256
0.00.837.723 I llm_load_print_meta: n_embd_head_v    = 256
0.00.837.728 I llm_load_print_meta: n_gqa            = 8
0.00.837.733 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.837.738 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.837.739 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.837.741 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.837.741 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.837.741 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.837.742 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.837.746 I llm_load_print_meta: n_ff             = 16384
0.00.837.747 I llm_load_print_meta: n_expert         = 0
0.00.837.748 I llm_load_print_meta: n_expert_used    = 0
0.00.837.748 I llm_load_print_meta: causal attn      = 1
0.00.837.749 I llm_load_print_meta: pooling type     = 0
0.00.837.749 I llm_load_print_meta: rope type        = 2
0.00.837.750 I llm_load_print_meta: rope scaling     = linear
0.00.837.751 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.837.752 I llm_load_print_meta: freq_scale_train = 1
0.00.837.752 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.837.753 I llm_load_print_meta: rope_finetuned   = unknown
0.00.837.753 I llm_load_print_meta: ssm_d_conv       = 0
0.00.837.753 I llm_load_print_meta: ssm_d_inner      = 0
0.00.837.755 I llm_load_print_meta: ssm_d_state      = 0
0.00.837.755 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.837.755 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.837.756 I llm_load_print_meta: model type       = 2B
0.00.837.757 I llm_load_print_meta: model ftype      = Q8_0
0.00.837.758 I llm_load_print_meta: model params     = 2.51 B
0.00.837.768 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.837.769 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.837.770 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.837.770 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.837.771 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.837.772 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.837.773 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.837.773 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.837.779 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.837.781 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.837.781 I llm_load_print_meta: max token length = 93
0.00.912.493 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.912.503 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.918.339 I llama_new_context_with_model: n_seq_max     = 1
0.00.918.346 I llama_new_context_with_model: n_ctx         = 4096
0.00.918.346 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.918.347 I llama_new_context_with_model: n_batch       = 2048
0.00.918.347 I llama_new_context_with_model: n_ubatch      = 512
0.00.918.347 I llama_new_context_with_model: flash_attn    = 0
0.00.918.350 I llama_new_context_with_model: freq_base     = 10000.0
0.00.918.350 I llama_new_context_with_model: freq_scale    = 1
0.00.918.351 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.932.857 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.932.898 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.933.017 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.935.613 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.935.617 I llama_new_context_with_model: graph nodes  = 601
0.00.935.617 I llama_new_context_with_model: graph splits = 1
0.00.935.640 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.542.887 I main: llama threadpool init, n_threads = 4
0.01.542.904 I 
0.01.543.025 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.543.028 I 
0.01.543.262 I sampler seed: 1627830902
0.01.543.275 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.543.285 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.543.287 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.543.287 I 
 increasities from the Greek tragedies.

**Answer:**

I am unable to provide a response as the provided context does not contain any information related to Greek tragedies

0.15.136.320 I llama_perf_sampler_print:    sampling time =      48.45 ms /    33 runs   (    1.47 ms per token,   681.10 tokens per second)
0.15.136.333 I llama_perf_context_print:        load time =    1541.96 ms
0.15.136.335 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.136.337 I llama_perf_context_print:        eval time =   13504.72 ms /    32 runs   (  422.02 ms per token,     2.37 tokens per second)
0.15.136.339 I llama_perf_context_print:       total time =   13593.44 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m52.885s
user	2m41.769s
sys	0m9.389s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4218 (938f6087)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185539.77 ms
main:    total time = 185539.77 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.674 I build: 4218 (938f6087) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.878 I main: llama backend init
0.00.000.886 I main: load the model and apply lora adapter, if any
0.00.023.447 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.459 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.560 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.574 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.576 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.583 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.586 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.587 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.589 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.590 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.591 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.602 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.604 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.606 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.607 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.609 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.622 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.323 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.007 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.016 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.017 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.019 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.020 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.021 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.023 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.028 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.030 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.031 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.353.032 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.353.034 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.353.042 I llama_model_loader: - type  f32:   37 tensors
0.00.353.045 I llama_model_loader: - type q4_K:  108 tensors
0.00.353.045 I llama_model_loader: - type q6_K:   19 tensors
0.00.567.566 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.623.502 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.624.378 I llm_load_vocab: special tokens cache size = 5
0.00.825.871 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.825.942 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.825.943 I llm_load_print_meta: arch             = gemma
0.00.825.944 I llm_load_print_meta: vocab type       = SPM
0.00.825.944 I llm_load_print_meta: n_vocab          = 256000
0.00.825.947 I llm_load_print_meta: n_merges         = 0
0.00.825.947 I llm_load_print_meta: vocab_only       = 0
0.00.825.948 I llm_load_print_meta: n_ctx_train      = 8192
0.00.825.948 I llm_load_print_meta: n_embd           = 2048
0.00.825.949 I llm_load_print_meta: n_layer          = 18
0.00.826.013 I llm_load_print_meta: n_head           = 8
0.00.826.020 I llm_load_print_meta: n_head_kv        = 1
0.00.826.021 I llm_load_print_meta: n_rot            = 256
0.00.826.022 I llm_load_print_meta: n_swa            = 0
0.00.826.022 I llm_load_print_meta: n_embd_head_k    = 256
0.00.826.023 I llm_load_print_meta: n_embd_head_v    = 256
0.00.826.027 I llm_load_print_meta: n_gqa            = 8
0.00.826.033 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.826.038 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.826.040 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.826.042 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.826.042 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.826.042 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.826.044 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.826.049 I llm_load_print_meta: n_ff             = 16384
0.00.826.050 I llm_load_print_meta: n_expert         = 0
0.00.826.050 I llm_load_print_meta: n_expert_used    = 0
0.00.826.050 I llm_load_print_meta: causal attn      = 1
0.00.826.051 I llm_load_print_meta: pooling type     = 0
0.00.826.055 I llm_load_print_meta: rope type        = 2
0.00.826.055 I llm_load_print_meta: rope scaling     = linear
0.00.826.066 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.826.067 I llm_load_print_meta: freq_scale_train = 1
0.00.826.067 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.826.069 I llm_load_print_meta: rope_finetuned   = unknown
0.00.826.069 I llm_load_print_meta: ssm_d_conv       = 0
0.00.826.070 I llm_load_print_meta: ssm_d_inner      = 0
0.00.826.070 I llm_load_print_meta: ssm_d_state      = 0
0.00.826.071 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.826.071 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.826.072 I llm_load_print_meta: model type       = 2B
0.00.826.073 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.826.074 I llm_load_print_meta: model params     = 2.51 B
0.00.826.083 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.826.087 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.826.087 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.826.088 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.826.088 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.826.089 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.826.089 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.826.090 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.826.096 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.826.098 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.826.098 I llm_load_print_meta: max token length = 93
0.00.889.293 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.889.301 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.889.302 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.889.303 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.889.304 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.889.304 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.895.419 I llama_new_context_with_model: n_seq_max     = 1
0.00.895.426 I llama_new_context_with_model: n_ctx         = 4096
0.00.895.426 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.895.426 I llama_new_context_with_model: n_batch       = 2048
0.00.895.427 I llama_new_context_with_model: n_ubatch      = 512
0.00.895.427 I llama_new_context_with_model: flash_attn    = 0
0.00.895.429 I llama_new_context_with_model: freq_base     = 10000.0
0.00.895.430 I llama_new_context_with_model: freq_scale    = 1
0.00.895.430 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.909.783 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.909.823 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.909.955 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.912.503 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.912.507 I llama_new_context_with_model: graph nodes  = 601
0.00.912.507 I llama_new_context_with_model: graph splits = 1
0.00.912.531 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.496.639 I main: llama threadpool init, n_threads = 4
0.01.496.654 I 
0.01.496.769 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.496.773 I 
0.01.497.006 I sampler seed: 3331713862
0.01.497.019 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.497.029 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.497.030 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.497.030 I 
 seconded
## What is the meaning of "seconded"?

The word "seconded" means "following or subsequent." It is often used to describe

0.12.597.903 I llama_perf_sampler_print:    sampling time =      48.36 ms /    33 runs   (    1.47 ms per token,   682.33 tokens per second)
0.12.597.917 I llama_perf_context_print:        load time =    1495.64 ms
0.12.597.919 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.597.922 I llama_perf_context_print:        eval time =   11012.86 ms /    32 runs   (  344.15 ms per token,     2.91 tokens per second)
0.12.597.923 I llama_perf_context_print:       total time =   11101.27 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4218 (938f6087)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185431.29 ms
main:    total time = 185431.29 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.628 I build: 4218 (938f6087) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.822 I main: llama backend init
0.00.000.830 I main: load the model and apply lora adapter, if any
0.00.023.296 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.399 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.414 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.418 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.425 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.427 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.437 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.438 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.447 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.451 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.458 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.459 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.461 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.462 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.464 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.229.317 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.331.318 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.355.129 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.355.139 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.355.141 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.355.142 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.355.143 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.355.145 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.355.147 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.355.152 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.355.153 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.355.162 I llama_model_loader: - type  f32:   37 tensors
0.00.355.165 I llama_model_loader: - type q4_K:  108 tensors
0.00.355.165 I llama_model_loader: - type q6_K:   19 tensors
0.00.585.150 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.646.411 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.647.320 I llm_load_vocab: special tokens cache size = 5
0.00.851.997 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.852.071 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.852.072 I llm_load_print_meta: arch             = gemma
0.00.852.073 I llm_load_print_meta: vocab type       = SPM
0.00.852.074 I llm_load_print_meta: n_vocab          = 256000
0.00.852.077 I llm_load_print_meta: n_merges         = 0
0.00.852.077 I llm_load_print_meta: vocab_only       = 0
0.00.852.078 I llm_load_print_meta: n_ctx_train      = 8192
0.00.852.078 I llm_load_print_meta: n_embd           = 2048
0.00.852.079 I llm_load_print_meta: n_layer          = 18
0.00.852.144 I llm_load_print_meta: n_head           = 8
0.00.852.151 I llm_load_print_meta: n_head_kv        = 1
0.00.852.152 I llm_load_print_meta: n_rot            = 256
0.00.852.152 I llm_load_print_meta: n_swa            = 0
0.00.852.152 I llm_load_print_meta: n_embd_head_k    = 256
0.00.852.153 I llm_load_print_meta: n_embd_head_v    = 256
0.00.852.158 I llm_load_print_meta: n_gqa            = 8
0.00.852.162 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.852.168 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.852.170 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.852.172 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.852.173 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.852.173 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.852.188 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.852.193 I llm_load_print_meta: n_ff             = 16384
0.00.852.194 I llm_load_print_meta: n_expert         = 0
0.00.852.207 I llm_load_print_meta: n_expert_used    = 0
0.00.852.208 I llm_load_print_meta: causal attn      = 1
0.00.852.208 I llm_load_print_meta: pooling type     = 0
0.00.852.216 I llm_load_print_meta: rope type        = 2
0.00.852.217 I llm_load_print_meta: rope scaling     = linear
0.00.852.219 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.852.220 I llm_load_print_meta: freq_scale_train = 1
0.00.852.220 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.852.221 I llm_load_print_meta: rope_finetuned   = unknown
0.00.852.221 I llm_load_print_meta: ssm_d_conv       = 0
0.00.852.221 I llm_load_print_meta: ssm_d_inner      = 0
0.00.852.221 I llm_load_print_meta: ssm_d_state      = 0
0.00.852.222 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.852.222 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.852.223 I llm_load_print_meta: model type       = 2B
0.00.852.224 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.852.225 I llm_load_print_meta: model params     = 2.51 B
0.00.852.235 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.852.242 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.852.244 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.852.245 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.852.246 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.852.246 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.852.247 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.852.248 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.852.254 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.852.256 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.852.256 I llm_load_print_meta: max token length = 93
0.00.908.560 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.914.367 I llama_new_context_with_model: n_seq_max     = 1
0.00.914.374 I llama_new_context_with_model: n_ctx         = 4096
0.00.914.374 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.914.375 I llama_new_context_with_model: n_batch       = 2048
0.00.914.375 I llama_new_context_with_model: n_ubatch      = 512
0.00.914.376 I llama_new_context_with_model: flash_attn    = 0
0.00.914.378 I llama_new_context_with_model: freq_base     = 10000.0
0.00.914.379 I llama_new_context_with_model: freq_scale    = 1
0.00.914.380 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.929.414 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.929.455 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.929.582 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.932.173 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.932.177 I llama_new_context_with_model: graph nodes  = 601
0.00.932.178 I llama_new_context_with_model: graph splits = 1
0.00.932.201 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.516.390 I main: llama threadpool init, n_threads = 4
0.01.516.405 I 
0.01.516.516 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.516.520 I 
0.01.516.760 I sampler seed: 1629349682
0.01.516.774 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.516.785 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.516.786 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.516.786 I 
 fufilling the needs of the people, while safeguarding the environment for future generations.

This vision encompasses the following elements:

**1. Economic prosperity:**


0.12.598.051 I llama_perf_sampler_print:    sampling time =      48.36 ms /    33 runs   (    1.47 ms per token,   682.37 tokens per second)
0.12.598.054 I llama_perf_context_print:        load time =    1515.47 ms
0.12.598.056 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.598.057 I llama_perf_context_print:        eval time =   10994.19 ms /    32 runs   (  343.57 ms per token,     2.91 tokens per second)
0.12.598.080 I llama_perf_context_print:       total time =   11081.67 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m39.045s
user	46m40.583s
sys	0m6.329s
