+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.667 I build: 4417 (9394bbd4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.861 I main: llama backend init
0.00.000.869 I main: load the model and apply lora adapter, if any
0.00.023.243 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.253 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.339 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.352 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.356 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.360 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.362 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.363 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.365 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.367 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.369 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.374 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.378 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.379 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.381 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.382 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.265 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.334.041 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.357.981 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.357.989 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.357.991 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.357.992 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.357.993 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.357.995 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.357.996 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.358.000 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.358.002 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.358.003 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.358.004 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.358.006 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.358.014 I llama_model_loader: - type  f32:   37 tensors
0.00.358.016 I llama_model_loader: - type q8_0:  127 tensors
0.00.582.545 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.639.942 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.640.846 I llm_load_vocab: special tokens cache size = 5
0.00.862.560 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.862.637 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.862.642 I llm_load_print_meta: arch             = gemma
0.00.862.643 I llm_load_print_meta: vocab type       = SPM
0.00.862.644 I llm_load_print_meta: n_vocab          = 256000
0.00.862.646 I llm_load_print_meta: n_merges         = 0
0.00.862.647 I llm_load_print_meta: vocab_only       = 0
0.00.862.647 I llm_load_print_meta: n_ctx_train      = 8192
0.00.862.647 I llm_load_print_meta: n_embd           = 2048
0.00.862.648 I llm_load_print_meta: n_layer          = 18
0.00.862.729 I llm_load_print_meta: n_head           = 8
0.00.862.737 I llm_load_print_meta: n_head_kv        = 1
0.00.862.739 I llm_load_print_meta: n_rot            = 256
0.00.862.739 I llm_load_print_meta: n_swa            = 0
0.00.862.739 I llm_load_print_meta: n_embd_head_k    = 256
0.00.862.740 I llm_load_print_meta: n_embd_head_v    = 256
0.00.862.745 I llm_load_print_meta: n_gqa            = 8
0.00.862.750 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.862.754 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.862.756 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.862.758 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.862.760 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.862.761 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.862.761 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.862.766 I llm_load_print_meta: n_ff             = 16384
0.00.862.766 I llm_load_print_meta: n_expert         = 0
0.00.862.767 I llm_load_print_meta: n_expert_used    = 0
0.00.862.768 I llm_load_print_meta: causal attn      = 1
0.00.862.768 I llm_load_print_meta: pooling type     = 0
0.00.862.768 I llm_load_print_meta: rope type        = 2
0.00.862.770 I llm_load_print_meta: rope scaling     = linear
0.00.862.771 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.862.772 I llm_load_print_meta: freq_scale_train = 1
0.00.862.773 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.862.773 I llm_load_print_meta: rope_finetuned   = unknown
0.00.862.774 I llm_load_print_meta: ssm_d_conv       = 0
0.00.862.774 I llm_load_print_meta: ssm_d_inner      = 0
0.00.862.778 I llm_load_print_meta: ssm_d_state      = 0
0.00.862.778 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.862.779 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.862.782 I llm_load_print_meta: model type       = 2B
0.00.862.784 I llm_load_print_meta: model ftype      = Q8_0
0.00.862.785 I llm_load_print_meta: model params     = 2.51 B
0.00.862.786 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.862.787 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.862.788 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.862.788 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.862.789 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.862.789 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.862.790 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.862.790 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.862.797 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.862.799 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.862.799 I llm_load_print_meta: max token length = 93
0.00.966.664 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.966.675 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.966.676 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.966.677 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.966.677 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.966.678 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.972.689 I llama_new_context_with_model: n_seq_max     = 1
0.00.972.696 I llama_new_context_with_model: n_ctx         = 4096
0.00.972.696 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.972.697 I llama_new_context_with_model: n_batch       = 2048
0.00.972.697 I llama_new_context_with_model: n_ubatch      = 512
0.00.972.698 I llama_new_context_with_model: flash_attn    = 0
0.00.972.701 I llama_new_context_with_model: freq_base     = 10000.0
0.00.972.701 I llama_new_context_with_model: freq_scale    = 1
0.00.972.702 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.972.791 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.987.976 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.988.017 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.988.143 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.990.806 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.990.811 I llama_new_context_with_model: graph nodes  = 601
0.00.990.811 I llama_new_context_with_model: graph splits = 1
0.00.990.837 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.990.840 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.599.646 I main: llama threadpool init, n_threads = 4
0.01.599.662 I 
0.01.599.775 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.599.779 I 
0.01.600.014 I sampler seed: 3304363274
0.01.600.028 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.600.040 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.600.041 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.600.041 I 
 increasities. [end of text]


0.03.294.700 I llama_perf_sampler_print:    sampling time =       6.37 ms /     5 runs   (    1.27 ms per token,   784.68 tokens per second)
0.03.294.704 I llama_perf_context_print:        load time =    1598.70 ms
0.03.294.719 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.294.722 I llama_perf_context_print:        eval time =    1682.38 ms /     4 runs   (  420.60 ms per token,     2.38 tokens per second)
0.03.294.723 I llama_perf_context_print:       total time =    1695.07 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 4417 (9394bbd4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.840 I main: llama backend init
0.00.000.848 I main: load the model and apply lora adapter, if any
0.00.023.188 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.279 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.296 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.300 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.305 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.307 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.308 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.310 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.312 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.313 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.318 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.322 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.323 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.324 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.326 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.230.580 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.331.623 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.355.867 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.355.876 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.355.877 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.355.879 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.355.880 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.355.882 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.355.883 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.355.887 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.355.889 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.355.890 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.355.892 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.355.893 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.355.901 I llama_model_loader: - type  f32:   37 tensors
0.00.355.904 I llama_model_loader: - type q8_0:  127 tensors
0.00.587.845 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.648.248 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.649.190 I llm_load_vocab: special tokens cache size = 5
0.00.870.012 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.870.085 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.870.090 I llm_load_print_meta: arch             = gemma
0.00.870.090 I llm_load_print_meta: vocab type       = SPM
0.00.870.091 I llm_load_print_meta: n_vocab          = 256000
0.00.870.093 I llm_load_print_meta: n_merges         = 0
0.00.870.094 I llm_load_print_meta: vocab_only       = 0
0.00.870.095 I llm_load_print_meta: n_ctx_train      = 8192
0.00.870.095 I llm_load_print_meta: n_embd           = 2048
0.00.870.095 I llm_load_print_meta: n_layer          = 18
0.00.870.176 I llm_load_print_meta: n_head           = 8
0.00.870.186 I llm_load_print_meta: n_head_kv        = 1
0.00.870.187 I llm_load_print_meta: n_rot            = 256
0.00.870.187 I llm_load_print_meta: n_swa            = 0
0.00.870.187 I llm_load_print_meta: n_embd_head_k    = 256
0.00.870.188 I llm_load_print_meta: n_embd_head_v    = 256
0.00.870.192 I llm_load_print_meta: n_gqa            = 8
0.00.870.197 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.870.203 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.870.205 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.870.206 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.870.206 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.870.207 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.870.207 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.870.213 I llm_load_print_meta: n_ff             = 16384
0.00.870.213 I llm_load_print_meta: n_expert         = 0
0.00.870.214 I llm_load_print_meta: n_expert_used    = 0
0.00.870.215 I llm_load_print_meta: causal attn      = 1
0.00.870.226 I llm_load_print_meta: pooling type     = 0
0.00.870.235 I llm_load_print_meta: rope type        = 2
0.00.870.238 I llm_load_print_meta: rope scaling     = linear
0.00.870.240 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.870.240 I llm_load_print_meta: freq_scale_train = 1
0.00.870.240 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.870.241 I llm_load_print_meta: rope_finetuned   = unknown
0.00.870.242 I llm_load_print_meta: ssm_d_conv       = 0
0.00.870.242 I llm_load_print_meta: ssm_d_inner      = 0
0.00.870.242 I llm_load_print_meta: ssm_d_state      = 0
0.00.870.243 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.870.243 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.870.246 I llm_load_print_meta: model type       = 2B
0.00.870.248 I llm_load_print_meta: model ftype      = Q8_0
0.00.870.248 I llm_load_print_meta: model params     = 2.51 B
0.00.870.249 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.870.249 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.870.250 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.870.251 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.870.251 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.870.251 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.870.251 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.870.252 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.870.259 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.870.260 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.870.261 I llm_load_print_meta: max token length = 93
0.00.966.666 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.972.479 I llama_new_context_with_model: n_seq_max     = 1
0.00.972.486 I llama_new_context_with_model: n_ctx         = 4096
0.00.972.487 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.972.487 I llama_new_context_with_model: n_batch       = 2048
0.00.972.487 I llama_new_context_with_model: n_ubatch      = 512
0.00.972.488 I llama_new_context_with_model: flash_attn    = 0
0.00.972.490 I llama_new_context_with_model: freq_base     = 10000.0
0.00.972.491 I llama_new_context_with_model: freq_scale    = 1
0.00.972.491 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.972.575 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.987.239 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.987.280 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.987.397 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.989.965 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.989.969 I llama_new_context_with_model: graph nodes  = 601
0.00.989.970 I llama_new_context_with_model: graph splits = 1
0.00.989.993 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.989.996 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.601.293 I main: llama threadpool init, n_threads = 4
0.01.601.310 I 
0.01.601.432 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.601.436 I 
0.01.601.674 I sampler seed: 2078775087
0.01.601.688 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.601.697 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.601.700 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.601.700 I 
 increasively, and the sentence is completed.

The more I learn, the more I know.

This sentence expresses the idea that as people gain knowledge,

0.15.196.473 I llama_perf_sampler_print:    sampling time =      49.87 ms /    33 runs   (    1.51 ms per token,   661.72 tokens per second)
0.15.196.476 I llama_perf_context_print:        load time =    1600.36 ms
0.15.196.478 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.196.480 I llama_perf_context_print:        eval time =   13509.55 ms /    32 runs   (  422.17 ms per token,     2.37 tokens per second)
0.15.196.481 I llama_perf_context_print:       total time =   13595.19 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.625 I build: 4417 (9394bbd4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.821 I main: llama backend init
0.00.000.829 I main: load the model and apply lora adapter, if any
0.00.023.124 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.134 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.219 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.232 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.234 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.238 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.242 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.243 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.245 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.248 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.250 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.255 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.256 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.258 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.259 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.260 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.259.846 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.360.862 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.384.801 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.384.811 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.384.812 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.384.814 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.384.815 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.384.817 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.384.818 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.384.822 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.384.823 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.384.825 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.384.826 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.384.828 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.384.836 I llama_model_loader: - type  f32:   37 tensors
0.00.384.838 I llama_model_loader: - type q8_0:  127 tensors
0.00.608.263 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.670.160 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.671.137 I llm_load_vocab: special tokens cache size = 5
0.00.896.515 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.896.595 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.896.600 I llm_load_print_meta: arch             = gemma
0.00.896.601 I llm_load_print_meta: vocab type       = SPM
0.00.896.601 I llm_load_print_meta: n_vocab          = 256000
0.00.896.604 I llm_load_print_meta: n_merges         = 0
0.00.896.605 I llm_load_print_meta: vocab_only       = 0
0.00.896.605 I llm_load_print_meta: n_ctx_train      = 8192
0.00.896.606 I llm_load_print_meta: n_embd           = 2048
0.00.896.606 I llm_load_print_meta: n_layer          = 18
0.00.896.689 I llm_load_print_meta: n_head           = 8
0.00.896.700 I llm_load_print_meta: n_head_kv        = 1
0.00.896.700 I llm_load_print_meta: n_rot            = 256
0.00.896.703 I llm_load_print_meta: n_swa            = 0
0.00.896.704 I llm_load_print_meta: n_embd_head_k    = 256
0.00.896.704 I llm_load_print_meta: n_embd_head_v    = 256
0.00.896.709 I llm_load_print_meta: n_gqa            = 8
0.00.896.714 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.896.719 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.896.722 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.896.724 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.896.724 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.896.725 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.896.725 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.896.731 I llm_load_print_meta: n_ff             = 16384
0.00.896.731 I llm_load_print_meta: n_expert         = 0
0.00.896.731 I llm_load_print_meta: n_expert_used    = 0
0.00.896.732 I llm_load_print_meta: causal attn      = 1
0.00.896.732 I llm_load_print_meta: pooling type     = 0
0.00.896.733 I llm_load_print_meta: rope type        = 2
0.00.896.734 I llm_load_print_meta: rope scaling     = linear
0.00.896.735 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.896.736 I llm_load_print_meta: freq_scale_train = 1
0.00.896.736 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.896.738 I llm_load_print_meta: rope_finetuned   = unknown
0.00.896.738 I llm_load_print_meta: ssm_d_conv       = 0
0.00.896.739 I llm_load_print_meta: ssm_d_inner      = 0
0.00.896.739 I llm_load_print_meta: ssm_d_state      = 0
0.00.896.739 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.896.740 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.896.743 I llm_load_print_meta: model type       = 2B
0.00.896.745 I llm_load_print_meta: model ftype      = Q8_0
0.00.896.745 I llm_load_print_meta: model params     = 2.51 B
0.00.896.746 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.896.747 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.896.756 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.896.757 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.896.757 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.896.758 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.896.759 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.896.760 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.896.766 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.896.768 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.896.768 I llm_load_print_meta: max token length = 93
0.00.975.862 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.975.873 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.975.874 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.975.875 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.975.875 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.975.876 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.981.717 I llama_new_context_with_model: n_seq_max     = 1
0.00.981.724 I llama_new_context_with_model: n_ctx         = 4096
0.00.981.724 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.981.725 I llama_new_context_with_model: n_batch       = 2048
0.00.981.725 I llama_new_context_with_model: n_ubatch      = 512
0.00.981.726 I llama_new_context_with_model: flash_attn    = 0
0.00.981.728 I llama_new_context_with_model: freq_base     = 10000.0
0.00.981.729 I llama_new_context_with_model: freq_scale    = 1
0.00.981.729 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.981.808 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.995.934 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.995.972 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.996.086 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.998.684 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.998.688 I llama_new_context_with_model: graph nodes  = 601
0.00.998.688 I llama_new_context_with_model: graph splits = 1
0.00.998.713 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.998.716 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.607.512 I main: llama threadpool init, n_threads = 4
0.01.607.529 I 
0.01.607.650 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.607.654 I 
0.01.607.898 I sampler seed: 334788258
0.01.607.913 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.607.922 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.607.926 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.607.926 I 
 increasities. 

This is an example of a **humorous misspelling**.

The misspelling is intentional and adds to the humor of the situation.

0.15.067.442 I llama_perf_sampler_print:    sampling time =      49.63 ms /    33 runs   (    1.50 ms per token,   664.88 tokens per second)
0.15.067.445 I llama_perf_context_print:        load time =    1606.60 ms
0.15.067.447 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.067.460 I llama_perf_context_print:        eval time =   13374.48 ms /    32 runs   (  417.95 ms per token,     2.39 tokens per second)
0.15.067.461 I llama_perf_context_print:       total time =   13459.94 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.647 I build: 4417 (9394bbd4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.837 I main: llama backend init
0.00.000.845 I main: load the model and apply lora adapter, if any
0.00.023.185 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.197 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.286 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.300 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.302 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.306 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.310 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.311 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.312 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.314 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.315 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.321 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.323 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.324 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.326 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.327 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.594 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.158 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.143 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.155 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.157 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.158 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.159 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.161 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.162 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.167 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.168 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.170 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.171 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.351.172 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.181 I llama_model_loader: - type  f32:   37 tensors
0.00.351.183 I llama_model_loader: - type q8_0:  127 tensors
0.00.562.594 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.619.513 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.620.458 I llm_load_vocab: special tokens cache size = 5
0.00.839.416 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.839.489 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.839.494 I llm_load_print_meta: arch             = gemma
0.00.839.494 I llm_load_print_meta: vocab type       = SPM
0.00.839.495 I llm_load_print_meta: n_vocab          = 256000
0.00.839.498 I llm_load_print_meta: n_merges         = 0
0.00.839.498 I llm_load_print_meta: vocab_only       = 0
0.00.839.499 I llm_load_print_meta: n_ctx_train      = 8192
0.00.839.499 I llm_load_print_meta: n_embd           = 2048
0.00.839.499 I llm_load_print_meta: n_layer          = 18
0.00.839.577 I llm_load_print_meta: n_head           = 8
0.00.839.588 I llm_load_print_meta: n_head_kv        = 1
0.00.839.589 I llm_load_print_meta: n_rot            = 256
0.00.839.589 I llm_load_print_meta: n_swa            = 0
0.00.839.590 I llm_load_print_meta: n_embd_head_k    = 256
0.00.839.590 I llm_load_print_meta: n_embd_head_v    = 256
0.00.839.595 I llm_load_print_meta: n_gqa            = 8
0.00.839.599 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.839.604 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.839.605 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.839.607 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.839.607 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.839.608 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.839.609 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.839.614 I llm_load_print_meta: n_ff             = 16384
0.00.839.615 I llm_load_print_meta: n_expert         = 0
0.00.839.615 I llm_load_print_meta: n_expert_used    = 0
0.00.839.615 I llm_load_print_meta: causal attn      = 1
0.00.839.616 I llm_load_print_meta: pooling type     = 0
0.00.839.617 I llm_load_print_meta: rope type        = 2
0.00.839.617 I llm_load_print_meta: rope scaling     = linear
0.00.839.619 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.839.620 I llm_load_print_meta: freq_scale_train = 1
0.00.839.620 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.839.620 I llm_load_print_meta: rope_finetuned   = unknown
0.00.839.621 I llm_load_print_meta: ssm_d_conv       = 0
0.00.839.622 I llm_load_print_meta: ssm_d_inner      = 0
0.00.839.622 I llm_load_print_meta: ssm_d_state      = 0
0.00.839.623 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.839.624 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.839.626 I llm_load_print_meta: model type       = 2B
0.00.839.628 I llm_load_print_meta: model ftype      = Q8_0
0.00.839.629 I llm_load_print_meta: model params     = 2.51 B
0.00.839.630 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.839.631 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.839.632 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.839.632 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.839.633 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.839.634 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.839.634 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.839.635 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.839.641 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.839.643 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.839.643 I llm_load_print_meta: max token length = 93
0.00.912.975 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.912.984 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.919.024 I llama_new_context_with_model: n_seq_max     = 1
0.00.919.031 I llama_new_context_with_model: n_ctx         = 4096
0.00.919.031 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.919.032 I llama_new_context_with_model: n_batch       = 2048
0.00.919.032 I llama_new_context_with_model: n_ubatch      = 512
0.00.919.033 I llama_new_context_with_model: flash_attn    = 0
0.00.919.036 I llama_new_context_with_model: freq_base     = 10000.0
0.00.919.037 I llama_new_context_with_model: freq_scale    = 1
0.00.919.037 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.919.123 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.934.022 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.934.063 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.934.182 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.936.789 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.936.792 I llama_new_context_with_model: graph nodes  = 601
0.00.936.793 I llama_new_context_with_model: graph splits = 1
0.00.936.817 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.936.819 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.545.723 I main: llama threadpool init, n_threads = 4
0.01.545.738 I 
0.01.545.857 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.545.861 I 
0.01.546.104 I sampler seed: 3314701300
0.01.546.118 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.546.128 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.546.131 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.546.131 I 
 seconary.

**Secondary**

Secondary education encompasses a wide range of educational experiences beyond the foundational skills taught in primary education. These experiences include:

-

0.15.111.803 I llama_perf_sampler_print:    sampling time =      49.95 ms /    33 runs   (    1.51 ms per token,   660.65 tokens per second)
0.15.111.807 I llama_perf_context_print:        load time =    1544.80 ms
0.15.111.809 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.111.810 I llama_perf_context_print:        eval time =   13479.70 ms /    32 runs   (  421.24 ms per token,     2.37 tokens per second)
0.15.111.811 I llama_perf_context_print:       total time =   13566.09 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m58.234s
user	3m3.006s
sys	0m9.305s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4417 (9394bbd4)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186591.99 ms
main:    total time = 186591.99 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 4417 (9394bbd4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.836 I main: llama backend init
0.00.000.844 I main: load the model and apply lora adapter, if any
0.00.023.625 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.635 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.722 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.735 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.738 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.742 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.747 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.748 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.750 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.756 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.759 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.765 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.767 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.773 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.775 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.777 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.042 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.978 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.998 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.007 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.009 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.010 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.011 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.013 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.014 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.018 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.019 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.021 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.022 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.350.024 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.031 I llama_model_loader: - type  f32:   37 tensors
0.00.350.033 I llama_model_loader: - type q4_K:  108 tensors
0.00.350.034 I llama_model_loader: - type q6_K:   19 tensors
0.00.560.766 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.618.212 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.619.166 I llm_load_vocab: special tokens cache size = 5
0.00.834.572 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.834.648 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.834.652 I llm_load_print_meta: arch             = gemma
0.00.834.653 I llm_load_print_meta: vocab type       = SPM
0.00.834.654 I llm_load_print_meta: n_vocab          = 256000
0.00.834.657 I llm_load_print_meta: n_merges         = 0
0.00.834.657 I llm_load_print_meta: vocab_only       = 0
0.00.834.657 I llm_load_print_meta: n_ctx_train      = 8192
0.00.834.658 I llm_load_print_meta: n_embd           = 2048
0.00.834.658 I llm_load_print_meta: n_layer          = 18
0.00.834.738 I llm_load_print_meta: n_head           = 8
0.00.834.745 I llm_load_print_meta: n_head_kv        = 1
0.00.834.746 I llm_load_print_meta: n_rot            = 256
0.00.834.747 I llm_load_print_meta: n_swa            = 0
0.00.834.748 I llm_load_print_meta: n_embd_head_k    = 256
0.00.834.749 I llm_load_print_meta: n_embd_head_v    = 256
0.00.834.754 I llm_load_print_meta: n_gqa            = 8
0.00.834.759 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.834.770 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.834.771 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.834.772 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.834.773 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.834.774 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.834.777 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.834.782 I llm_load_print_meta: n_ff             = 16384
0.00.834.783 I llm_load_print_meta: n_expert         = 0
0.00.834.783 I llm_load_print_meta: n_expert_used    = 0
0.00.834.784 I llm_load_print_meta: causal attn      = 1
0.00.834.784 I llm_load_print_meta: pooling type     = 0
0.00.834.784 I llm_load_print_meta: rope type        = 2
0.00.834.784 I llm_load_print_meta: rope scaling     = linear
0.00.834.787 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.834.788 I llm_load_print_meta: freq_scale_train = 1
0.00.834.789 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.834.790 I llm_load_print_meta: rope_finetuned   = unknown
0.00.834.790 I llm_load_print_meta: ssm_d_conv       = 0
0.00.834.791 I llm_load_print_meta: ssm_d_inner      = 0
0.00.834.791 I llm_load_print_meta: ssm_d_state      = 0
0.00.834.792 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.834.793 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.834.795 I llm_load_print_meta: model type       = 2B
0.00.834.797 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.834.798 I llm_load_print_meta: model params     = 2.51 B
0.00.834.799 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.834.799 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.834.800 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.834.801 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.834.802 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.834.802 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.834.803 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.834.804 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.834.810 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.834.812 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.834.813 I llm_load_print_meta: max token length = 93
0.00.897.755 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.897.763 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.897.764 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.897.765 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.897.765 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.897.766 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.903.980 I llama_new_context_with_model: n_seq_max     = 1
0.00.903.987 I llama_new_context_with_model: n_ctx         = 4096
0.00.903.988 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.903.988 I llama_new_context_with_model: n_batch       = 2048
0.00.903.989 I llama_new_context_with_model: n_ubatch      = 512
0.00.903.989 I llama_new_context_with_model: flash_attn    = 0
0.00.903.992 I llama_new_context_with_model: freq_base     = 10000.0
0.00.903.993 I llama_new_context_with_model: freq_scale    = 1
0.00.903.993 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.904.082 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.918.662 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.918.698 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.918.815 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.921.401 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.921.404 I llama_new_context_with_model: graph nodes  = 601
0.00.921.405 I llama_new_context_with_model: graph splits = 1
0.00.921.428 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.921.432 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.505.520 I main: llama threadpool init, n_threads = 4
0.01.505.537 I 
0.01.505.667 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.505.672 I 
0.01.505.919 I sampler seed: 1519749244
0.01.505.934 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.505.943 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.505.948 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.505.948 I 
 seconally to the following question: What is the difference between the two types of neural networks?

**Types of Neural Networks:**

* Feedforward neural network

0.12.643.788 I llama_perf_sampler_print:    sampling time =      49.58 ms /    33 runs   (    1.50 ms per token,   665.62 tokens per second)
0.12.643.790 I llama_perf_context_print:        load time =    1504.60 ms
0.12.643.813 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.643.815 I llama_perf_context_print:        eval time =   11053.27 ms /    32 runs   (  345.41 ms per token,     2.90 tokens per second)
0.12.643.816 I llama_perf_context_print:       total time =   11138.28 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4417 (9394bbd4)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186814.63 ms
main:    total time = 186814.63 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 4417 (9394bbd4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.828 I main: llama backend init
0.00.000.836 I main: load the model and apply lora adapter, if any
0.00.022.919 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.013 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.026 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.028 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.032 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.036 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.038 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.039 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.040 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.041 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.048 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.049 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.050 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.052 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.053 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.743 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.504 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.418 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.427 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.428 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.429 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.431 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.432 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.433 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.437 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.438 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.446 I llama_model_loader: - type  f32:   37 tensors
0.00.348.448 I llama_model_loader: - type q4_K:  108 tensors
0.00.348.449 I llama_model_loader: - type q6_K:   19 tensors
0.00.567.671 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.639.412 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.640.450 I llm_load_vocab: special tokens cache size = 5
0.00.849.687 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.849.758 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.849.766 I llm_load_print_meta: arch             = gemma
0.00.849.766 I llm_load_print_meta: vocab type       = SPM
0.00.849.768 I llm_load_print_meta: n_vocab          = 256000
0.00.849.770 I llm_load_print_meta: n_merges         = 0
0.00.849.770 I llm_load_print_meta: vocab_only       = 0
0.00.849.771 I llm_load_print_meta: n_ctx_train      = 8192
0.00.849.772 I llm_load_print_meta: n_embd           = 2048
0.00.849.773 I llm_load_print_meta: n_layer          = 18
0.00.849.853 I llm_load_print_meta: n_head           = 8
0.00.849.862 I llm_load_print_meta: n_head_kv        = 1
0.00.849.864 I llm_load_print_meta: n_rot            = 256
0.00.849.864 I llm_load_print_meta: n_swa            = 0
0.00.849.865 I llm_load_print_meta: n_embd_head_k    = 256
0.00.849.875 I llm_load_print_meta: n_embd_head_v    = 256
0.00.849.882 I llm_load_print_meta: n_gqa            = 8
0.00.849.887 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.849.892 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.849.894 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.849.895 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.849.896 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.849.897 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.849.897 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.849.902 I llm_load_print_meta: n_ff             = 16384
0.00.849.903 I llm_load_print_meta: n_expert         = 0
0.00.849.904 I llm_load_print_meta: n_expert_used    = 0
0.00.849.904 I llm_load_print_meta: causal attn      = 1
0.00.849.904 I llm_load_print_meta: pooling type     = 0
0.00.849.905 I llm_load_print_meta: rope type        = 2
0.00.849.906 I llm_load_print_meta: rope scaling     = linear
0.00.849.908 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.849.909 I llm_load_print_meta: freq_scale_train = 1
0.00.849.909 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.849.909 I llm_load_print_meta: rope_finetuned   = unknown
0.00.849.910 I llm_load_print_meta: ssm_d_conv       = 0
0.00.849.910 I llm_load_print_meta: ssm_d_inner      = 0
0.00.849.913 I llm_load_print_meta: ssm_d_state      = 0
0.00.849.913 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.849.914 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.849.917 I llm_load_print_meta: model type       = 2B
0.00.849.919 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.849.919 I llm_load_print_meta: model params     = 2.51 B
0.00.849.920 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.849.921 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.849.922 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.849.923 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.849.924 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.849.924 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.849.925 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.849.925 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.849.932 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.849.933 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.849.934 I llm_load_print_meta: max token length = 93
0.00.909.478 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.915.091 I llama_new_context_with_model: n_seq_max     = 1
0.00.915.098 I llama_new_context_with_model: n_ctx         = 4096
0.00.915.099 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.915.099 I llama_new_context_with_model: n_batch       = 2048
0.00.915.099 I llama_new_context_with_model: n_ubatch      = 512
0.00.915.100 I llama_new_context_with_model: flash_attn    = 0
0.00.915.102 I llama_new_context_with_model: freq_base     = 10000.0
0.00.915.103 I llama_new_context_with_model: freq_scale    = 1
0.00.915.104 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.915.183 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.929.859 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.929.899 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.930.019 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.932.571 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.932.575 I llama_new_context_with_model: graph nodes  = 601
0.00.932.575 I llama_new_context_with_model: graph splits = 1
0.00.932.598 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.932.601 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.514.107 I main: llama threadpool init, n_threads = 4
0.01.514.123 I 
0.01.514.246 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.514.250 I 
0.01.514.491 I sampler seed: 867873671
0.01.514.504 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.514.516 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.514.516 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.514.517 I 
 encompasses the story of a young woman named Anya who is struggling with infertility and the emotional turmoil it causes.

**Synopsis:**

Anya, a talented

0.12.643.911 I llama_perf_sampler_print:    sampling time =      49.77 ms /    33 runs   (    1.51 ms per token,   663.09 tokens per second)
0.12.643.916 I llama_perf_context_print:        load time =    1513.19 ms
0.12.643.917 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.643.919 I llama_perf_context_print:        eval time =   11044.09 ms /    32 runs   (  345.13 ms per token,     2.90 tokens per second)
0.12.643.920 I llama_perf_context_print:       total time =   11129.82 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m41.559s
user	46m45.639s
sys	0m6.421s
