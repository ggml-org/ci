+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.539 I build: 4417 (9394bbd4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.738 I main: llama backend init
0.00.000.745 I main: load the model and apply lora adapter, if any
0.00.021.430 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.438 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.446 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.451 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.453 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.455 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.456 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.456 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.457 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.458 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.459 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.463 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.464 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.464 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.465 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.466 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.324 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.604 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.539 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.546 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.547 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.548 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.549 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.550 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.551 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.554 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.555 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.555 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.556 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.557 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.561 I llama_model_loader: - type  f32:   37 tensors
0.00.132.562 I llama_model_loader: - type q8_0:  127 tensors
0.00.218.164 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.666 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.148 I llm_load_vocab: special tokens cache size = 5
0.00.280.067 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.085 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.086 I llm_load_print_meta: arch             = gemma
0.00.280.087 I llm_load_print_meta: vocab type       = SPM
0.00.280.087 I llm_load_print_meta: n_vocab          = 256000
0.00.280.088 I llm_load_print_meta: n_merges         = 0
0.00.280.088 I llm_load_print_meta: vocab_only       = 0
0.00.280.088 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.089 I llm_load_print_meta: n_embd           = 2048
0.00.280.089 I llm_load_print_meta: n_layer          = 18
0.00.280.100 I llm_load_print_meta: n_head           = 8
0.00.280.103 I llm_load_print_meta: n_head_kv        = 1
0.00.280.103 I llm_load_print_meta: n_rot            = 256
0.00.280.103 I llm_load_print_meta: n_swa            = 0
0.00.280.104 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.104 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.106 I llm_load_print_meta: n_gqa            = 8
0.00.280.107 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.109 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.110 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.111 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.112 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.112 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.112 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.114 I llm_load_print_meta: n_ff             = 16384
0.00.280.114 I llm_load_print_meta: n_expert         = 0
0.00.280.114 I llm_load_print_meta: n_expert_used    = 0
0.00.280.115 I llm_load_print_meta: causal attn      = 1
0.00.280.115 I llm_load_print_meta: pooling type     = 0
0.00.280.115 I llm_load_print_meta: rope type        = 2
0.00.280.115 I llm_load_print_meta: rope scaling     = linear
0.00.280.118 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.118 I llm_load_print_meta: freq_scale_train = 1
0.00.280.119 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.119 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.119 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.120 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.120 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.120 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.121 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.122 I llm_load_print_meta: model type       = 2B
0.00.280.123 I llm_load_print_meta: model ftype      = Q8_0
0.00.280.124 I llm_load_print_meta: model params     = 2.51 B
0.00.280.125 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.280.125 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.125 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.126 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.126 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.126 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.127 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.127 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.128 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.128 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.129 I llm_load_print_meta: max token length = 93
0.00.381.910 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.381.916 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.381.917 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.381.917 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.381.918 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.381.918 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.387.190 I llama_new_context_with_model: n_seq_max     = 1
0.00.387.195 I llama_new_context_with_model: n_ctx         = 4096
0.00.387.196 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.387.196 I llama_new_context_with_model: n_batch       = 2048
0.00.387.197 I llama_new_context_with_model: n_ubatch      = 512
0.00.387.197 I llama_new_context_with_model: flash_attn    = 0
0.00.387.199 I llama_new_context_with_model: freq_base     = 10000.0
0.00.387.200 I llama_new_context_with_model: freq_scale    = 1
0.00.387.201 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.387.221 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.401.668 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.401.680 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.401.778 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.403.020 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.403.027 I llama_new_context_with_model: graph nodes  = 601
0.00.403.027 I llama_new_context_with_model: graph splits = 1
0.00.403.031 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.403.031 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.487.801 I main: llama threadpool init, n_threads = 4
0.00.487.816 I 
0.00.487.891 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.487.894 I 
0.00.487.927 I sampler seed: 3017351544
0.00.487.938 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.487.950 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.487.953 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.487.953 I 
 increasities in the 19th century were often associated with:

A) The Industrial Revolution
B) The American Civil War
C) The rise

0.02.728.698 I llama_perf_sampler_print:    sampling time =       4.90 ms /    33 runs   (    0.15 ms per token,  6741.57 tokens per second)
0.02.728.700 I llama_perf_context_print:        load time =     487.04 ms
0.02.728.701 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.728.703 I llama_perf_context_print:        eval time =    2222.44 ms /    32 runs   (   69.45 ms per token,    14.40 tokens per second)
0.02.728.703 I llama_perf_context_print:       total time =    2240.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.569 I build: 4417 (9394bbd4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.759 I main: llama backend init
0.00.000.766 I main: load the model and apply lora adapter, if any
0.00.020.703 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.717 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.724 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.728 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.731 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.732 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.732 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.733 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.733 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.734 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.737 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.737 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.738 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.739 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.739 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.736 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.002 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.829 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.835 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.836 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.836 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.837 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.838 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.839 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.841 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.842 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.843 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.844 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.845 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.849 I llama_model_loader: - type  f32:   37 tensors
0.00.130.850 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.780 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.830 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.468 I llm_load_vocab: special tokens cache size = 5
0.00.270.613 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.635 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.637 I llm_load_print_meta: arch             = gemma
0.00.270.637 I llm_load_print_meta: vocab type       = SPM
0.00.270.638 I llm_load_print_meta: n_vocab          = 256000
0.00.270.638 I llm_load_print_meta: n_merges         = 0
0.00.270.639 I llm_load_print_meta: vocab_only       = 0
0.00.270.639 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.639 I llm_load_print_meta: n_embd           = 2048
0.00.270.640 I llm_load_print_meta: n_layer          = 18
0.00.270.650 I llm_load_print_meta: n_head           = 8
0.00.270.652 I llm_load_print_meta: n_head_kv        = 1
0.00.270.653 I llm_load_print_meta: n_rot            = 256
0.00.270.653 I llm_load_print_meta: n_swa            = 0
0.00.270.653 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.654 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.655 I llm_load_print_meta: n_gqa            = 8
0.00.270.657 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.658 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.659 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.660 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.661 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.661 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.661 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.664 I llm_load_print_meta: n_ff             = 16384
0.00.270.664 I llm_load_print_meta: n_expert         = 0
0.00.270.665 I llm_load_print_meta: n_expert_used    = 0
0.00.270.665 I llm_load_print_meta: causal attn      = 1
0.00.270.665 I llm_load_print_meta: pooling type     = 0
0.00.270.665 I llm_load_print_meta: rope type        = 2
0.00.270.666 I llm_load_print_meta: rope scaling     = linear
0.00.270.667 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.667 I llm_load_print_meta: freq_scale_train = 1
0.00.270.668 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.668 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.668 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.669 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.669 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.669 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.669 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.671 I llm_load_print_meta: model type       = 2B
0.00.270.673 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.673 I llm_load_print_meta: model params     = 2.51 B
0.00.270.674 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.674 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.675 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.675 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.675 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.676 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.676 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.676 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.677 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.677 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.678 I llm_load_print_meta: max token length = 93
0.00.364.769 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.369.852 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.858 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.858 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.859 I llama_new_context_with_model: n_batch       = 2048
0.00.369.859 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.860 I llama_new_context_with_model: flash_attn    = 0
0.00.369.862 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.863 I llama_new_context_with_model: freq_scale    = 1
0.00.369.864 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.369.884 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.384.426 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.384.440 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.384.538 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.823 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.385.829 I llama_new_context_with_model: graph nodes  = 601
0.00.385.830 I llama_new_context_with_model: graph splits = 1
0.00.385.833 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.385.833 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.466.885 I main: llama threadpool init, n_threads = 4
0.00.466.901 I 
0.00.466.976 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.466.980 I 
0.00.467.012 I sampler seed: 3668754650
0.00.467.023 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.467.034 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.467.038 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.467.038 I 
 maneuvously.

I cannot answer this question as it contains inappropriate and potentially harmful language. [end of text]


0.01.827.364 I llama_perf_sampler_print:    sampling time =       2.97 ms /    21 runs   (    0.14 ms per token,  7068.33 tokens per second)
0.01.827.366 I llama_perf_context_print:        load time =     466.08 ms
0.01.827.367 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.827.369 I llama_perf_context_print:        eval time =    1348.12 ms /    20 runs   (   67.41 ms per token,    14.84 tokens per second)
0.01.827.370 I llama_perf_context_print:       total time =    1360.50 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.535 I build: 4417 (9394bbd4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.726 I main: llama backend init
0.00.000.733 I main: load the model and apply lora adapter, if any
0.00.021.261 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.271 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.279 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.285 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.286 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.289 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.289 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.290 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.290 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.291 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.291 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.295 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.297 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.297 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.298 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.299 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.183 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.128.892 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.138.009 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.138.015 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.138.016 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.138.017 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.138.018 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.138.019 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.138.019 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.138.022 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.138.022 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.138.023 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.138.024 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.138.025 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.138.029 I llama_model_loader: - type  f32:   37 tensors
0.00.138.030 I llama_model_loader: - type q8_0:  127 tensors
0.00.218.456 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.264.157 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.264.733 I llm_load_vocab: special tokens cache size = 5
0.00.285.529 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.285.549 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.285.550 I llm_load_print_meta: arch             = gemma
0.00.285.551 I llm_load_print_meta: vocab type       = SPM
0.00.285.551 I llm_load_print_meta: n_vocab          = 256000
0.00.285.552 I llm_load_print_meta: n_merges         = 0
0.00.285.552 I llm_load_print_meta: vocab_only       = 0
0.00.285.553 I llm_load_print_meta: n_ctx_train      = 8192
0.00.285.553 I llm_load_print_meta: n_embd           = 2048
0.00.285.553 I llm_load_print_meta: n_layer          = 18
0.00.285.566 I llm_load_print_meta: n_head           = 8
0.00.285.568 I llm_load_print_meta: n_head_kv        = 1
0.00.285.569 I llm_load_print_meta: n_rot            = 256
0.00.285.569 I llm_load_print_meta: n_swa            = 0
0.00.285.569 I llm_load_print_meta: n_embd_head_k    = 256
0.00.285.569 I llm_load_print_meta: n_embd_head_v    = 256
0.00.285.571 I llm_load_print_meta: n_gqa            = 8
0.00.285.573 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.285.574 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.285.575 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.285.576 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.285.577 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.285.577 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.285.577 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.285.579 I llm_load_print_meta: n_ff             = 16384
0.00.285.579 I llm_load_print_meta: n_expert         = 0
0.00.285.579 I llm_load_print_meta: n_expert_used    = 0
0.00.285.580 I llm_load_print_meta: causal attn      = 1
0.00.285.580 I llm_load_print_meta: pooling type     = 0
0.00.285.580 I llm_load_print_meta: rope type        = 2
0.00.285.581 I llm_load_print_meta: rope scaling     = linear
0.00.285.582 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.285.582 I llm_load_print_meta: freq_scale_train = 1
0.00.285.583 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.285.583 I llm_load_print_meta: rope_finetuned   = unknown
0.00.285.583 I llm_load_print_meta: ssm_d_conv       = 0
0.00.285.584 I llm_load_print_meta: ssm_d_inner      = 0
0.00.285.584 I llm_load_print_meta: ssm_d_state      = 0
0.00.285.584 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.285.584 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.285.586 I llm_load_print_meta: model type       = 2B
0.00.285.588 I llm_load_print_meta: model ftype      = Q8_0
0.00.285.589 I llm_load_print_meta: model params     = 2.51 B
0.00.285.590 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.285.590 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.285.590 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.285.590 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.285.591 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.285.591 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.285.591 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.285.592 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.285.592 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.285.593 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.285.593 I llm_load_print_meta: max token length = 93
0.00.366.336 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.366.341 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.366.342 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.366.343 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.366.344 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.366.344 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.371.469 I llama_new_context_with_model: n_seq_max     = 1
0.00.371.476 I llama_new_context_with_model: n_ctx         = 4096
0.00.371.476 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.371.477 I llama_new_context_with_model: n_batch       = 2048
0.00.371.477 I llama_new_context_with_model: n_ubatch      = 512
0.00.371.478 I llama_new_context_with_model: flash_attn    = 0
0.00.371.480 I llama_new_context_with_model: freq_base     = 10000.0
0.00.371.481 I llama_new_context_with_model: freq_scale    = 1
0.00.371.482 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.371.502 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.387.148 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.168 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.269 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.388.558 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.388.565 I llama_new_context_with_model: graph nodes  = 601
0.00.388.566 I llama_new_context_with_model: graph splits = 1
0.00.388.569 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.388.570 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.487.914 I main: llama threadpool init, n_threads = 4
0.00.487.936 I 
0.00.488.025 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.488.029 I 
0.00.488.067 I sampler seed: 180298644
0.00.488.080 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.488.083 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.488.084 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.488.084 I 
 maneuvously.

I am unable to provide a response that contains sexually suggestive or inappropriate content. [end of text]


0.01.964.601 I llama_perf_sampler_print:    sampling time =       3.25 ms /    22 runs   (    0.15 ms per token,  6765.07 tokens per second)
0.01.964.603 I llama_perf_context_print:        load time =     487.16 ms
0.01.964.604 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.964.606 I llama_perf_context_print:        eval time =    1464.08 ms /    21 runs   (   69.72 ms per token,    14.34 tokens per second)
0.01.964.606 I llama_perf_context_print:       total time =    1476.70 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.185 I build: 4417 (9394bbd4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.402 I main: llama backend init
0.00.000.409 I main: load the model and apply lora adapter, if any
0.00.020.389 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.398 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.405 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.411 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.413 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.416 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.420 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.421 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.422 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.423 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.424 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.427 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.428 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.429 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.430 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.431 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.599 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.130.270 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.051 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.057 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.058 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.058 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.059 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.060 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.060 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.062 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.063 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.137.064 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.065 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.137.066 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.137.069 I llama_model_loader: - type  f32:   37 tensors
0.00.137.070 I llama_model_loader: - type q8_0:  127 tensors
0.00.212.106 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.382 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.881 I llm_load_vocab: special tokens cache size = 5
0.00.271.763 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.779 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.781 I llm_load_print_meta: arch             = gemma
0.00.271.782 I llm_load_print_meta: vocab type       = SPM
0.00.271.782 I llm_load_print_meta: n_vocab          = 256000
0.00.271.783 I llm_load_print_meta: n_merges         = 0
0.00.271.783 I llm_load_print_meta: vocab_only       = 0
0.00.271.783 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.784 I llm_load_print_meta: n_embd           = 2048
0.00.271.784 I llm_load_print_meta: n_layer          = 18
0.00.271.794 I llm_load_print_meta: n_head           = 8
0.00.271.796 I llm_load_print_meta: n_head_kv        = 1
0.00.271.797 I llm_load_print_meta: n_rot            = 256
0.00.271.797 I llm_load_print_meta: n_swa            = 0
0.00.271.797 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.798 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.799 I llm_load_print_meta: n_gqa            = 8
0.00.271.801 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.802 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.803 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.804 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.805 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.805 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.805 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.807 I llm_load_print_meta: n_ff             = 16384
0.00.271.807 I llm_load_print_meta: n_expert         = 0
0.00.271.808 I llm_load_print_meta: n_expert_used    = 0
0.00.271.808 I llm_load_print_meta: causal attn      = 1
0.00.271.808 I llm_load_print_meta: pooling type     = 0
0.00.271.808 I llm_load_print_meta: rope type        = 2
0.00.271.809 I llm_load_print_meta: rope scaling     = linear
0.00.271.810 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.811 I llm_load_print_meta: freq_scale_train = 1
0.00.271.811 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.812 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.812 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.812 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.813 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.813 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.813 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.815 I llm_load_print_meta: model type       = 2B
0.00.271.816 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.817 I llm_load_print_meta: model params     = 2.51 B
0.00.271.818 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.818 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.818 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.819 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.819 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.819 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.820 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.820 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.820 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.821 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.821 I llm_load_print_meta: max token length = 93
0.00.342.628 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.342.637 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.347.652 I llama_new_context_with_model: n_seq_max     = 1
0.00.347.659 I llama_new_context_with_model: n_ctx         = 4096
0.00.347.660 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.347.660 I llama_new_context_with_model: n_batch       = 2048
0.00.347.661 I llama_new_context_with_model: n_ubatch      = 512
0.00.347.661 I llama_new_context_with_model: flash_attn    = 0
0.00.347.664 I llama_new_context_with_model: freq_base     = 10000.0
0.00.347.665 I llama_new_context_with_model: freq_scale    = 1
0.00.347.666 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.347.684 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.362.134 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.362.145 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.362.237 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.497 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.363.503 I llama_new_context_with_model: graph nodes  = 601
0.00.363.504 I llama_new_context_with_model: graph splits = 1
0.00.363.507 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.363.508 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.456.774 I main: llama threadpool init, n_threads = 4
0.00.456.791 I 
0.00.456.865 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.456.868 I 
0.00.456.900 I sampler seed: 3182558489
0.00.456.912 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.456.923 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.456.927 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.456.927 I 
 increasements, the leading provider of technology infrastructure solutions, has partnered with the University of Southern California (USC) to offer a unique immersive learning experience for undergraduate students

0.02.879.302 I llama_perf_sampler_print:    sampling time =       4.98 ms /    33 runs   (    0.15 ms per token,  6629.17 tokens per second)
0.02.879.305 I llama_perf_context_print:        load time =     456.34 ms
0.02.879.306 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.879.307 I llama_perf_context_print:        eval time =    2403.65 ms /    32 runs   (   75.11 ms per token,    13.31 tokens per second)
0.02.879.308 I llama_perf_context_print:       total time =    2422.54 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.892s
user	0m33.050s
sys	0m9.218s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4417 (9394bbd4)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40246.41 ms
main:    total time = 40246.41 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.537 I build: 4417 (9394bbd4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.724 I main: llama backend init
0.00.000.730 I main: load the model and apply lora adapter, if any
0.00.021.292 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.302 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.310 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.315 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.316 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.318 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.319 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.319 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.320 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.321 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.322 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.325 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.325 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.326 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.326 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.327 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.799 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.251 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.072 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.078 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.078 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.079 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.079 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.080 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.081 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.083 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.084 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.084 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.085 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.086 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.090 I llama_model_loader: - type  f32:   37 tensors
0.00.130.092 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.093 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.165 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.803 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.362 I llm_load_vocab: special tokens cache size = 5
0.00.268.355 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.371 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.372 I llm_load_print_meta: arch             = gemma
0.00.268.372 I llm_load_print_meta: vocab type       = SPM
0.00.268.373 I llm_load_print_meta: n_vocab          = 256000
0.00.268.373 I llm_load_print_meta: n_merges         = 0
0.00.268.374 I llm_load_print_meta: vocab_only       = 0
0.00.268.374 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.374 I llm_load_print_meta: n_embd           = 2048
0.00.268.375 I llm_load_print_meta: n_layer          = 18
0.00.268.386 I llm_load_print_meta: n_head           = 8
0.00.268.388 I llm_load_print_meta: n_head_kv        = 1
0.00.268.388 I llm_load_print_meta: n_rot            = 256
0.00.268.389 I llm_load_print_meta: n_swa            = 0
0.00.268.389 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.389 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.391 I llm_load_print_meta: n_gqa            = 8
0.00.268.393 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.395 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.395 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.397 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.397 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.397 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.398 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.400 I llm_load_print_meta: n_ff             = 16384
0.00.268.401 I llm_load_print_meta: n_expert         = 0
0.00.268.401 I llm_load_print_meta: n_expert_used    = 0
0.00.268.401 I llm_load_print_meta: causal attn      = 1
0.00.268.401 I llm_load_print_meta: pooling type     = 0
0.00.268.402 I llm_load_print_meta: rope type        = 2
0.00.268.402 I llm_load_print_meta: rope scaling     = linear
0.00.268.404 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.405 I llm_load_print_meta: freq_scale_train = 1
0.00.268.405 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.405 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.406 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.406 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.407 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.407 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.407 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.409 I llm_load_print_meta: model type       = 2B
0.00.268.410 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.268.412 I llm_load_print_meta: model params     = 2.51 B
0.00.268.413 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.268.413 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.414 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.414 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.415 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.415 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.416 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.417 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.417 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.418 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.418 I llm_load_print_meta: max token length = 93
0.00.329.115 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.329.121 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.329.122 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.329.122 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.329.123 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.329.123 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.334.424 I llama_new_context_with_model: n_seq_max     = 1
0.00.334.430 I llama_new_context_with_model: n_ctx         = 4096
0.00.334.431 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.334.431 I llama_new_context_with_model: n_batch       = 2048
0.00.334.432 I llama_new_context_with_model: n_ubatch      = 512
0.00.334.432 I llama_new_context_with_model: flash_attn    = 0
0.00.334.434 I llama_new_context_with_model: freq_base     = 10000.0
0.00.334.435 I llama_new_context_with_model: freq_scale    = 1
0.00.334.436 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.334.454 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.348.732 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.348.745 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.348.837 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.350.072 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.350.080 I llama_new_context_with_model: graph nodes  = 601
0.00.350.080 I llama_new_context_with_model: graph splits = 1
0.00.350.084 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.350.084 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.425.447 I main: llama threadpool init, n_threads = 4
0.00.425.462 I 
0.00.425.534 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.425.538 I 
0.00.425.569 I sampler seed: 3859822328
0.00.425.580 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.425.592 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.425.595 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.425.595 I 
 increamically, and finally shrieked in terror.

The sound was unlike anything she had ever heard before, a mix of fear and horror. She looked down

0.02.007.688 I llama_perf_sampler_print:    sampling time =       5.36 ms /    33 runs   (    0.16 ms per token,  6153.27 tokens per second)
0.02.007.690 I llama_perf_context_print:        load time =     424.70 ms
0.02.007.691 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.007.692 I llama_perf_context_print:        eval time =    1562.53 ms /    32 runs   (   48.83 ms per token,    20.48 tokens per second)
0.02.007.703 I llama_perf_context_print:       total time =    1582.25 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4417 (9394bbd4)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40207.64 ms
main:    total time = 40207.64 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.560 I build: 4417 (9394bbd4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.749 I main: llama backend init
0.00.000.755 I main: load the model and apply lora adapter, if any
0.00.021.107 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.123 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.129 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.130 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.132 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.133 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.134 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.134 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.135 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.135 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.138 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.139 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.140 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.141 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.141 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.222 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.418 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.276 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.282 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.283 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.284 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.285 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.285 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.286 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.289 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.290 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.294 I llama_model_loader: - type  f32:   37 tensors
0.00.131.295 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.296 I llama_model_loader: - type q6_K:   19 tensors
0.00.207.023 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.606 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.099 I llm_load_vocab: special tokens cache size = 5
0.00.267.973 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.990 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.991 I llm_load_print_meta: arch             = gemma
0.00.267.992 I llm_load_print_meta: vocab type       = SPM
0.00.267.993 I llm_load_print_meta: n_vocab          = 256000
0.00.267.994 I llm_load_print_meta: n_merges         = 0
0.00.267.995 I llm_load_print_meta: vocab_only       = 0
0.00.267.996 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.997 I llm_load_print_meta: n_embd           = 2048
0.00.267.997 I llm_load_print_meta: n_layer          = 18
0.00.268.009 I llm_load_print_meta: n_head           = 8
0.00.268.012 I llm_load_print_meta: n_head_kv        = 1
0.00.268.015 I llm_load_print_meta: n_rot            = 256
0.00.268.016 I llm_load_print_meta: n_swa            = 0
0.00.268.016 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.016 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.018 I llm_load_print_meta: n_gqa            = 8
0.00.268.020 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.022 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.023 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.025 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.025 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.026 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.026 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.028 I llm_load_print_meta: n_ff             = 16384
0.00.268.029 I llm_load_print_meta: n_expert         = 0
0.00.268.032 I llm_load_print_meta: n_expert_used    = 0
0.00.268.032 I llm_load_print_meta: causal attn      = 1
0.00.268.032 I llm_load_print_meta: pooling type     = 0
0.00.268.032 I llm_load_print_meta: rope type        = 2
0.00.268.033 I llm_load_print_meta: rope scaling     = linear
0.00.268.035 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.035 I llm_load_print_meta: freq_scale_train = 1
0.00.268.035 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.036 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.036 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.037 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.037 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.038 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.038 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.040 I llm_load_print_meta: model type       = 2B
0.00.268.041 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.268.042 I llm_load_print_meta: model params     = 2.51 B
0.00.268.043 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.268.044 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.045 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.045 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.045 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.046 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.046 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.047 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.048 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.049 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.049 I llm_load_print_meta: max token length = 93
0.00.327.057 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.332.126 I llama_new_context_with_model: n_seq_max     = 1
0.00.332.132 I llama_new_context_with_model: n_ctx         = 4096
0.00.332.133 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.332.133 I llama_new_context_with_model: n_batch       = 2048
0.00.332.133 I llama_new_context_with_model: n_ubatch      = 512
0.00.332.134 I llama_new_context_with_model: flash_attn    = 0
0.00.332.136 I llama_new_context_with_model: freq_base     = 10000.0
0.00.332.137 I llama_new_context_with_model: freq_scale    = 1
0.00.332.138 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.332.165 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.347.966 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.347.981 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.348.082 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.349.372 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.349.379 I llama_new_context_with_model: graph nodes  = 601
0.00.349.379 I llama_new_context_with_model: graph splits = 1
0.00.349.383 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.349.384 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.424.921 I main: llama threadpool init, n_threads = 4
0.00.424.936 I 
0.00.425.014 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.425.018 I 
0.00.425.060 I sampler seed: 1902400503
0.00.425.071 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.425.074 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.425.075 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.425.075 I 
 squaRED for this task.

**Task:**

Determine the frequency distribution of the variables in the dataset.

**Solution:**

**Step 1:

0.01.971.793 I llama_perf_sampler_print:    sampling time =       5.21 ms /    33 runs   (    0.16 ms per token,  6340.06 tokens per second)
0.01.971.795 I llama_perf_context_print:        load time =     424.15 ms
0.01.971.796 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.971.798 I llama_perf_context_print:        eval time =    1527.51 ms /    32 runs   (   47.73 ms per token,    20.95 tokens per second)
0.01.971.798 I llama_perf_context_print:       total time =    1546.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.244s
user	10m23.555s
sys	0m7.023s
