+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.541 I build: 4302 (43041d2e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.728 I main: llama backend init
0.00.000.735 I main: load the model and apply lora adapter, if any
0.00.021.240 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.249 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.257 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.261 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.262 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.265 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.269 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.269 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.270 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.271 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.271 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.275 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.275 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.276 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.276 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.277 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.244 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.272 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.097 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.104 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.105 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.106 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.107 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.108 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.110 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.113 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.114 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.115 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.117 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.118 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.121 I llama_model_loader: - type  f32:   37 tensors
0.00.131.122 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.085 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.092 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.673 I llm_load_vocab: special tokens cache size = 5
0.00.271.613 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.633 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.634 I llm_load_print_meta: arch             = gemma
0.00.271.635 I llm_load_print_meta: vocab type       = SPM
0.00.271.636 I llm_load_print_meta: n_vocab          = 256000
0.00.271.636 I llm_load_print_meta: n_merges         = 0
0.00.271.638 I llm_load_print_meta: vocab_only       = 0
0.00.271.638 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.639 I llm_load_print_meta: n_embd           = 2048
0.00.271.639 I llm_load_print_meta: n_layer          = 18
0.00.271.652 I llm_load_print_meta: n_head           = 8
0.00.271.654 I llm_load_print_meta: n_head_kv        = 1
0.00.271.654 I llm_load_print_meta: n_rot            = 256
0.00.271.655 I llm_load_print_meta: n_swa            = 0
0.00.271.656 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.656 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.658 I llm_load_print_meta: n_gqa            = 8
0.00.271.659 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.661 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.662 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.664 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.665 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.666 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.666 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.668 I llm_load_print_meta: n_ff             = 16384
0.00.271.668 I llm_load_print_meta: n_expert         = 0
0.00.271.669 I llm_load_print_meta: n_expert_used    = 0
0.00.271.669 I llm_load_print_meta: causal attn      = 1
0.00.271.670 I llm_load_print_meta: pooling type     = 0
0.00.271.670 I llm_load_print_meta: rope type        = 2
0.00.271.671 I llm_load_print_meta: rope scaling     = linear
0.00.271.673 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.674 I llm_load_print_meta: freq_scale_train = 1
0.00.271.677 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.678 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.679 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.679 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.680 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.680 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.680 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.681 I llm_load_print_meta: model type       = 2B
0.00.271.682 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.683 I llm_load_print_meta: model params     = 2.51 B
0.00.271.684 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.685 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.686 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.686 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.687 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.687 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.688 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.688 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.689 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.689 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.690 I llm_load_print_meta: max token length = 93
0.00.376.058 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.376.069 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.376.070 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.376.070 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.376.071 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.376.072 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.381.636 I llama_new_context_with_model: n_seq_max     = 1
0.00.381.643 I llama_new_context_with_model: n_ctx         = 4096
0.00.381.644 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.381.644 I llama_new_context_with_model: n_batch       = 2048
0.00.381.645 I llama_new_context_with_model: n_ubatch      = 512
0.00.381.645 I llama_new_context_with_model: flash_attn    = 0
0.00.381.648 I llama_new_context_with_model: freq_base     = 10000.0
0.00.381.649 I llama_new_context_with_model: freq_scale    = 1
0.00.381.651 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.396.098 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.396.113 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.396.209 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.397.461 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.397.468 I llama_new_context_with_model: graph nodes  = 601
0.00.397.468 I llama_new_context_with_model: graph splits = 1
0.00.397.470 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.484.240 I main: llama threadpool init, n_threads = 4
0.00.484.257 I 
0.00.484.347 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.484.350 I 
0.00.484.405 I sampler seed: 2005237853
0.00.484.420 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.484.423 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.484.426 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.484.427 I 
 increasities can be harmful and should not be tolerated. [end of text]


0.01.338.119 I llama_perf_sampler_print:    sampling time =       2.13 ms /    13 runs   (    0.16 ms per token,  6109.02 tokens per second)
0.01.338.121 I llama_perf_context_print:        load time =     483.49 ms
0.01.338.122 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.338.124 I llama_perf_context_print:        eval time =     845.37 ms /    12 runs   (   70.45 ms per token,    14.19 tokens per second)
0.01.338.124 I llama_perf_context_print:       total time =     853.89 ms /    13 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.537 I build: 4302 (43041d2e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.744 I main: llama backend init
0.00.000.751 I main: load the model and apply lora adapter, if any
0.00.020.796 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.811 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.822 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.827 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.832 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.833 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.834 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.835 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.835 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.836 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.844 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.851 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.853 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.853 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.855 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.630 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.778 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.685 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.692 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.692 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.693 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.693 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.694 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.695 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.698 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.698 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.700 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.700 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.701 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.705 I llama_model_loader: - type  f32:   37 tensors
0.00.131.707 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.578 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.402 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.941 I llm_load_vocab: special tokens cache size = 5
0.00.264.479 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.497 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.497 I llm_load_print_meta: arch             = gemma
0.00.264.498 I llm_load_print_meta: vocab type       = SPM
0.00.264.498 I llm_load_print_meta: n_vocab          = 256000
0.00.264.499 I llm_load_print_meta: n_merges         = 0
0.00.264.499 I llm_load_print_meta: vocab_only       = 0
0.00.264.500 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.500 I llm_load_print_meta: n_embd           = 2048
0.00.264.500 I llm_load_print_meta: n_layer          = 18
0.00.264.512 I llm_load_print_meta: n_head           = 8
0.00.264.513 I llm_load_print_meta: n_head_kv        = 1
0.00.264.513 I llm_load_print_meta: n_rot            = 256
0.00.264.513 I llm_load_print_meta: n_swa            = 0
0.00.264.514 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.514 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.515 I llm_load_print_meta: n_gqa            = 8
0.00.264.516 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.517 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.517 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.519 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.519 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.519 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.520 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.521 I llm_load_print_meta: n_ff             = 16384
0.00.264.521 I llm_load_print_meta: n_expert         = 0
0.00.264.521 I llm_load_print_meta: n_expert_used    = 0
0.00.264.521 I llm_load_print_meta: causal attn      = 1
0.00.264.522 I llm_load_print_meta: pooling type     = 0
0.00.264.522 I llm_load_print_meta: rope type        = 2
0.00.264.522 I llm_load_print_meta: rope scaling     = linear
0.00.264.524 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.524 I llm_load_print_meta: freq_scale_train = 1
0.00.264.524 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.525 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.525 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.525 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.526 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.526 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.526 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.527 I llm_load_print_meta: model type       = 2B
0.00.264.527 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.528 I llm_load_print_meta: model params     = 2.51 B
0.00.264.529 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.529 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.530 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.530 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.530 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.531 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.531 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.531 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.532 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.532 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.533 I llm_load_print_meta: max token length = 93
0.00.360.384 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.365.604 I llama_new_context_with_model: n_seq_max     = 1
0.00.365.611 I llama_new_context_with_model: n_ctx         = 4096
0.00.365.611 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.365.612 I llama_new_context_with_model: n_batch       = 2048
0.00.365.612 I llama_new_context_with_model: n_ubatch      = 512
0.00.365.613 I llama_new_context_with_model: flash_attn    = 0
0.00.365.615 I llama_new_context_with_model: freq_base     = 10000.0
0.00.365.616 I llama_new_context_with_model: freq_scale    = 1
0.00.365.617 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.380.146 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.380.160 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.380.251 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.381.529 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.381.536 I llama_new_context_with_model: graph nodes  = 601
0.00.381.536 I llama_new_context_with_model: graph splits = 1
0.00.381.539 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.461.836 I main: llama threadpool init, n_threads = 4
0.00.461.852 I 
0.00.461.937 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.461.940 I 
0.00.461.989 I sampler seed: 1244008006
0.00.462.000 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.462.005 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.462.006 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.462.007 I 
 increamically, a captivating tale of love, loss, and the enduring power of words.

**Prologue:**

The wind whistled through the barren branches of the

0.02.634.539 I llama_perf_sampler_print:    sampling time =       5.49 ms /    33 runs   (    0.17 ms per token,  6010.93 tokens per second)
0.02.634.542 I llama_perf_context_print:        load time =     461.07 ms
0.02.634.543 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.634.544 I llama_perf_context_print:        eval time =    2153.43 ms /    32 runs   (   67.29 ms per token,    14.86 tokens per second)
0.02.634.545 I llama_perf_context_print:       total time =    2172.71 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.521 I build: 4302 (43041d2e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.721 I main: llama backend init
0.00.000.727 I main: load the model and apply lora adapter, if any
0.00.020.986 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.996 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.004 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.009 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.012 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.016 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.017 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.018 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.019 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.019 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.020 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.024 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.024 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.025 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.025 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.026 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.444 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.478 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.235 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.243 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.244 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.244 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.245 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.246 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.247 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.248 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.249 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.250 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.250 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.251 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.254 I llama_model_loader: - type  f32:   37 tensors
0.00.130.255 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.121 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.769 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.353 I llm_load_vocab: special tokens cache size = 5
0.00.264.978 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.996 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.996 I llm_load_print_meta: arch             = gemma
0.00.264.997 I llm_load_print_meta: vocab type       = SPM
0.00.264.998 I llm_load_print_meta: n_vocab          = 256000
0.00.264.998 I llm_load_print_meta: n_merges         = 0
0.00.264.999 I llm_load_print_meta: vocab_only       = 0
0.00.264.999 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.999 I llm_load_print_meta: n_embd           = 2048
0.00.264.999 I llm_load_print_meta: n_layer          = 18
0.00.265.011 I llm_load_print_meta: n_head           = 8
0.00.265.012 I llm_load_print_meta: n_head_kv        = 1
0.00.265.012 I llm_load_print_meta: n_rot            = 256
0.00.265.012 I llm_load_print_meta: n_swa            = 0
0.00.265.012 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.013 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.014 I llm_load_print_meta: n_gqa            = 8
0.00.265.015 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.016 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.017 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.018 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.018 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.018 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.019 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.020 I llm_load_print_meta: n_ff             = 16384
0.00.265.020 I llm_load_print_meta: n_expert         = 0
0.00.265.020 I llm_load_print_meta: n_expert_used    = 0
0.00.265.021 I llm_load_print_meta: causal attn      = 1
0.00.265.021 I llm_load_print_meta: pooling type     = 0
0.00.265.021 I llm_load_print_meta: rope type        = 2
0.00.265.021 I llm_load_print_meta: rope scaling     = linear
0.00.265.023 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.023 I llm_load_print_meta: freq_scale_train = 1
0.00.265.024 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.024 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.024 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.025 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.025 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.025 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.025 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.026 I llm_load_print_meta: model type       = 2B
0.00.265.026 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.027 I llm_load_print_meta: model params     = 2.51 B
0.00.265.028 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.028 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.029 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.029 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.029 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.030 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.030 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.030 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.030 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.031 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.031 I llm_load_print_meta: max token length = 93
0.00.341.585 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.341.593 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.341.594 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.341.594 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.341.595 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.341.595 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.347.042 I llama_new_context_with_model: n_seq_max     = 1
0.00.347.048 I llama_new_context_with_model: n_ctx         = 4096
0.00.347.049 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.347.050 I llama_new_context_with_model: n_batch       = 2048
0.00.347.050 I llama_new_context_with_model: n_ubatch      = 512
0.00.347.051 I llama_new_context_with_model: flash_attn    = 0
0.00.347.055 I llama_new_context_with_model: freq_base     = 10000.0
0.00.347.056 I llama_new_context_with_model: freq_scale    = 1
0.00.347.057 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.362.704 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.362.720 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.362.816 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.364.150 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.364.158 I llama_new_context_with_model: graph nodes  = 601
0.00.364.158 I llama_new_context_with_model: graph splits = 1
0.00.364.161 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.452.979 I main: llama threadpool init, n_threads = 4
0.00.452.996 I 
0.00.453.075 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.453.079 I 
0.00.453.134 I sampler seed: 2774866884
0.00.453.147 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.453.154 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.453.154 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.453.154 I 
 increasities of the universe into simpler, more manageable units, such as galaxies or stars. [end of text]


0.01.795.684 I llama_perf_sampler_print:    sampling time =       3.39 ms /    20 runs   (    0.17 ms per token,  5904.93 tokens per second)
0.01.795.686 I llama_perf_context_print:        load time =     452.24 ms
0.01.795.687 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.795.689 I llama_perf_context_print:        eval time =    1330.43 ms /    19 runs   (   70.02 ms per token,    14.28 tokens per second)
0.01.795.689 I llama_perf_context_print:       total time =    1342.71 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.556 I build: 4302 (43041d2e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.768 I main: llama backend init
0.00.000.775 I main: load the model and apply lora adapter, if any
0.00.021.007 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.017 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.024 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.029 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.030 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.036 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.039 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.041 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.042 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.043 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.044 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.048 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.048 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.050 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.051 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.052 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.119 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.385 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.249 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.255 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.256 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.256 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.257 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.258 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.258 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.260 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.261 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.263 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.263 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.264 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.266 I llama_model_loader: - type  f32:   37 tensors
0.00.131.268 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.833 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.285 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.766 I llm_load_vocab: special tokens cache size = 5
0.00.260.239 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.254 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.255 I llm_load_print_meta: arch             = gemma
0.00.260.256 I llm_load_print_meta: vocab type       = SPM
0.00.260.256 I llm_load_print_meta: n_vocab          = 256000
0.00.260.257 I llm_load_print_meta: n_merges         = 0
0.00.260.257 I llm_load_print_meta: vocab_only       = 0
0.00.260.257 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.257 I llm_load_print_meta: n_embd           = 2048
0.00.260.258 I llm_load_print_meta: n_layer          = 18
0.00.260.268 I llm_load_print_meta: n_head           = 8
0.00.260.269 I llm_load_print_meta: n_head_kv        = 1
0.00.260.269 I llm_load_print_meta: n_rot            = 256
0.00.260.269 I llm_load_print_meta: n_swa            = 0
0.00.260.270 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.270 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.271 I llm_load_print_meta: n_gqa            = 8
0.00.260.272 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.273 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.274 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.276 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.276 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.277 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.281 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.281 I llm_load_print_meta: n_ff             = 16384
0.00.260.282 I llm_load_print_meta: n_expert         = 0
0.00.260.282 I llm_load_print_meta: n_expert_used    = 0
0.00.260.282 I llm_load_print_meta: causal attn      = 1
0.00.260.283 I llm_load_print_meta: pooling type     = 0
0.00.260.283 I llm_load_print_meta: rope type        = 2
0.00.260.283 I llm_load_print_meta: rope scaling     = linear
0.00.260.284 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.286 I llm_load_print_meta: freq_scale_train = 1
0.00.260.286 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.287 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.287 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.287 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.288 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.289 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.289 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.290 I llm_load_print_meta: model type       = 2B
0.00.260.291 I llm_load_print_meta: model ftype      = Q8_0
0.00.260.292 I llm_load_print_meta: model params     = 2.51 B
0.00.260.293 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.260.293 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.294 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.295 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.295 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.295 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.296 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.296 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.297 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.298 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.298 I llm_load_print_meta: max token length = 93
0.00.332.008 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.332.015 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.337.220 I llama_new_context_with_model: n_seq_max     = 1
0.00.337.226 I llama_new_context_with_model: n_ctx         = 4096
0.00.337.226 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.337.227 I llama_new_context_with_model: n_batch       = 2048
0.00.337.227 I llama_new_context_with_model: n_ubatch      = 512
0.00.337.228 I llama_new_context_with_model: flash_attn    = 0
0.00.337.230 I llama_new_context_with_model: freq_base     = 10000.0
0.00.337.231 I llama_new_context_with_model: freq_scale    = 1
0.00.337.232 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.352.033 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.352.049 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.352.146 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.353.459 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.353.467 I llama_new_context_with_model: graph nodes  = 601
0.00.353.467 I llama_new_context_with_model: graph splits = 1
0.00.353.470 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.439.746 I main: llama threadpool init, n_threads = 4
0.00.439.761 I 
0.00.439.842 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.439.846 I 
0.00.439.898 I sampler seed: 1837109817
0.00.439.909 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.439.916 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.439.920 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.439.920 I 
 seconally, using correct punctuation.

I am so excited about the opportunity to explore the world and discover new cultures.

I am also eager to learn more

0.02.864.485 I llama_perf_sampler_print:    sampling time =       5.90 ms /    33 runs   (    0.18 ms per token,  5595.12 tokens per second)
0.02.864.488 I llama_perf_context_print:        load time =     438.95 ms
0.02.864.489 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.864.490 I llama_perf_context_print:        eval time =    2404.72 ms /    32 runs   (   75.15 ms per token,    13.31 tokens per second)
0.02.864.491 I llama_perf_context_print:       total time =    2424.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.141s
user	0m30.019s
sys	0m9.327s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4302 (43041d2e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40264.07 ms
main:    total time = 40264.07 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.537 I build: 4302 (43041d2e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.744 I main: llama backend init
0.00.000.750 I main: load the model and apply lora adapter, if any
0.00.021.146 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.154 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.161 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.167 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.168 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.173 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.173 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.175 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.176 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.177 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.177 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.181 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.181 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.182 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.183 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.183 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.658 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.976 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.749 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.755 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.756 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.757 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.758 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.759 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.760 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.763 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.764 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.765 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.765 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.766 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.768 I llama_model_loader: - type  f32:   37 tensors
0.00.130.769 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.769 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.097 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.778 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.380 I llm_load_vocab: special tokens cache size = 5
0.00.266.055 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.072 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.072 I llm_load_print_meta: arch             = gemma
0.00.266.073 I llm_load_print_meta: vocab type       = SPM
0.00.266.073 I llm_load_print_meta: n_vocab          = 256000
0.00.266.074 I llm_load_print_meta: n_merges         = 0
0.00.266.074 I llm_load_print_meta: vocab_only       = 0
0.00.266.074 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.075 I llm_load_print_meta: n_embd           = 2048
0.00.266.075 I llm_load_print_meta: n_layer          = 18
0.00.266.085 I llm_load_print_meta: n_head           = 8
0.00.266.086 I llm_load_print_meta: n_head_kv        = 1
0.00.266.087 I llm_load_print_meta: n_rot            = 256
0.00.266.087 I llm_load_print_meta: n_swa            = 0
0.00.266.088 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.088 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.089 I llm_load_print_meta: n_gqa            = 8
0.00.266.090 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.091 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.092 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.093 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.093 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.093 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.094 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.095 I llm_load_print_meta: n_ff             = 16384
0.00.266.095 I llm_load_print_meta: n_expert         = 0
0.00.266.095 I llm_load_print_meta: n_expert_used    = 0
0.00.266.096 I llm_load_print_meta: causal attn      = 1
0.00.266.096 I llm_load_print_meta: pooling type     = 0
0.00.266.096 I llm_load_print_meta: rope type        = 2
0.00.266.097 I llm_load_print_meta: rope scaling     = linear
0.00.266.098 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.098 I llm_load_print_meta: freq_scale_train = 1
0.00.266.099 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.099 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.099 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.100 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.100 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.100 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.100 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.101 I llm_load_print_meta: model type       = 2B
0.00.266.101 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.266.102 I llm_load_print_meta: model params     = 2.51 B
0.00.266.103 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.266.103 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.104 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.104 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.104 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.104 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.105 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.105 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.105 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.106 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.106 I llm_load_print_meta: max token length = 93
0.00.326.347 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.326.354 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.326.355 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.326.355 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.326.356 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.326.356 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.331.520 I llama_new_context_with_model: n_seq_max     = 1
0.00.331.526 I llama_new_context_with_model: n_ctx         = 4096
0.00.331.526 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.331.527 I llama_new_context_with_model: n_batch       = 2048
0.00.331.527 I llama_new_context_with_model: n_ubatch      = 512
0.00.331.527 I llama_new_context_with_model: flash_attn    = 0
0.00.331.529 I llama_new_context_with_model: freq_base     = 10000.0
0.00.331.530 I llama_new_context_with_model: freq_scale    = 1
0.00.331.531 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.346.167 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.346.182 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.346.274 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.347.527 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.347.534 I llama_new_context_with_model: graph nodes  = 601
0.00.347.535 I llama_new_context_with_model: graph splits = 1
0.00.347.536 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.422.559 I main: llama threadpool init, n_threads = 4
0.00.422.577 I 
0.00.422.653 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.422.656 I 
0.00.422.702 I sampler seed: 1813574733
0.00.422.713 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.422.725 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.422.728 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.422.728 I 
 increamically. [end of text]


0.00.624.746 I llama_perf_sampler_print:    sampling time =       0.72 ms /     5 runs   (    0.14 ms per token,  6906.08 tokens per second)
0.00.624.749 I llama_perf_context_print:        load time =     421.79 ms
0.00.624.750 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.624.752 I llama_perf_context_print:        eval time =     198.55 ms /     4 runs   (   49.64 ms per token,    20.15 tokens per second)
0.00.624.752 I llama_perf_context_print:       total time =     202.19 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4302 (43041d2e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40173.97 ms
main:    total time = 40173.97 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.601 I build: 4302 (43041d2e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.793 I main: llama backend init
0.00.000.800 I main: load the model and apply lora adapter, if any
0.00.021.544 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.562 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.569 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.570 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.575 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.575 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.576 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.577 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.577 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.578 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.583 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.584 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.585 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.585 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.586 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.451 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.667 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.483 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.489 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.489 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.490 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.490 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.491 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.492 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.495 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.495 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.498 I llama_model_loader: - type  f32:   37 tensors
0.00.131.499 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.500 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.329 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.446 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.010 I llm_load_vocab: special tokens cache size = 5
0.00.265.802 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.818 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.818 I llm_load_print_meta: arch             = gemma
0.00.265.819 I llm_load_print_meta: vocab type       = SPM
0.00.265.819 I llm_load_print_meta: n_vocab          = 256000
0.00.265.820 I llm_load_print_meta: n_merges         = 0
0.00.265.820 I llm_load_print_meta: vocab_only       = 0
0.00.265.820 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.821 I llm_load_print_meta: n_embd           = 2048
0.00.265.821 I llm_load_print_meta: n_layer          = 18
0.00.265.833 I llm_load_print_meta: n_head           = 8
0.00.265.834 I llm_load_print_meta: n_head_kv        = 1
0.00.265.834 I llm_load_print_meta: n_rot            = 256
0.00.265.835 I llm_load_print_meta: n_swa            = 0
0.00.265.835 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.835 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.836 I llm_load_print_meta: n_gqa            = 8
0.00.265.837 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.838 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.839 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.840 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.840 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.841 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.841 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.842 I llm_load_print_meta: n_ff             = 16384
0.00.265.842 I llm_load_print_meta: n_expert         = 0
0.00.265.842 I llm_load_print_meta: n_expert_used    = 0
0.00.265.843 I llm_load_print_meta: causal attn      = 1
0.00.265.843 I llm_load_print_meta: pooling type     = 0
0.00.265.843 I llm_load_print_meta: rope type        = 2
0.00.265.843 I llm_load_print_meta: rope scaling     = linear
0.00.265.845 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.845 I llm_load_print_meta: freq_scale_train = 1
0.00.265.846 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.846 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.846 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.847 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.847 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.847 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.847 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.848 I llm_load_print_meta: model type       = 2B
0.00.265.848 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.849 I llm_load_print_meta: model params     = 2.51 B
0.00.265.849 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.850 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.850 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.851 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.851 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.851 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.852 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.852 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.852 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.853 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.853 I llm_load_print_meta: max token length = 93
0.00.322.470 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.327.808 I llama_new_context_with_model: n_seq_max     = 1
0.00.327.816 I llama_new_context_with_model: n_ctx         = 4096
0.00.327.816 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.327.817 I llama_new_context_with_model: n_batch       = 2048
0.00.327.817 I llama_new_context_with_model: n_ubatch      = 512
0.00.327.818 I llama_new_context_with_model: flash_attn    = 0
0.00.327.820 I llama_new_context_with_model: freq_base     = 10000.0
0.00.327.821 I llama_new_context_with_model: freq_scale    = 1
0.00.327.822 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.343.356 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.343.369 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.343.488 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.718 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.344.725 I llama_new_context_with_model: graph nodes  = 601
0.00.344.725 I llama_new_context_with_model: graph splits = 1
0.00.344.727 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.418.949 I main: llama threadpool init, n_threads = 4
0.00.418.965 I 
0.00.419.042 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.419.045 I 
0.00.419.094 I sampler seed: 4107018492
0.00.419.105 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.118 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.419.122 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.419.122 I 
 maneuvously.

The sentence is inappropriate because it uses the slang term " maneuvously". It would be better to use a more formal and appropriate word

0.01.999.728 I llama_perf_sampler_print:    sampling time =       5.78 ms /    33 runs   (    0.18 ms per token,  5709.34 tokens per second)
0.01.999.731 I llama_perf_context_print:        load time =     418.13 ms
0.01.999.732 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.999.733 I llama_perf_context_print:        eval time =    1560.06 ms /    32 runs   (   48.75 ms per token,    20.51 tokens per second)
0.01.999.734 I llama_perf_context_print:       total time =    1580.79 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m25.873s
user	10m18.743s
sys	0m6.808s
