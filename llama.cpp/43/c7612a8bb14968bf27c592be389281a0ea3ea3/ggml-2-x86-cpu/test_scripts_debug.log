+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.640 I build: 3931 (43c7612a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.840 I main: llama backend init
0.00.002.797 I main: load the model and apply lora adapter, if any
0.00.024.863 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.070 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.160 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.171 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.173 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.177 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.178 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.179 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.180 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.181 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.182 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.189 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.190 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.192 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.192 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.193 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.327 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.815 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.031 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.038 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.039 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.040 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.041 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.043 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.044 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.047 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.048 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.049 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.050 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.051 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.059 I llama_model_loader: - type  f32:   37 tensors
0.00.268.063 I llama_model_loader: - type q8_0:  127 tensors
0.00.456.583 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.510.894 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.511.926 I llm_load_vocab: special tokens cache size = 5
0.00.607.875 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.607.944 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.607.945 I llm_load_print_meta: arch             = gemma
0.00.607.945 I llm_load_print_meta: vocab type       = SPM
0.00.607.946 I llm_load_print_meta: n_vocab          = 256000
0.00.607.949 I llm_load_print_meta: n_merges         = 0
0.00.607.949 I llm_load_print_meta: vocab_only       = 0
0.00.607.950 I llm_load_print_meta: n_ctx_train      = 8192
0.00.607.950 I llm_load_print_meta: n_embd           = 2048
0.00.607.951 I llm_load_print_meta: n_layer          = 18
0.00.608.013 I llm_load_print_meta: n_head           = 8
0.00.608.020 I llm_load_print_meta: n_head_kv        = 1
0.00.608.022 I llm_load_print_meta: n_rot            = 256
0.00.608.022 I llm_load_print_meta: n_swa            = 0
0.00.608.023 I llm_load_print_meta: n_embd_head_k    = 256
0.00.608.023 I llm_load_print_meta: n_embd_head_v    = 256
0.00.608.028 I llm_load_print_meta: n_gqa            = 8
0.00.608.033 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.608.037 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.608.039 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.608.040 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.608.041 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.608.041 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.608.041 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.608.047 I llm_load_print_meta: n_ff             = 16384
0.00.608.047 I llm_load_print_meta: n_expert         = 0
0.00.608.047 I llm_load_print_meta: n_expert_used    = 0
0.00.608.049 I llm_load_print_meta: causal attn      = 1
0.00.608.049 I llm_load_print_meta: pooling type     = 0
0.00.608.050 I llm_load_print_meta: rope type        = 2
0.00.608.053 I llm_load_print_meta: rope scaling     = linear
0.00.608.055 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.608.055 I llm_load_print_meta: freq_scale_train = 1
0.00.608.055 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.608.056 I llm_load_print_meta: rope_finetuned   = unknown
0.00.608.056 I llm_load_print_meta: ssm_d_conv       = 0
0.00.608.057 I llm_load_print_meta: ssm_d_inner      = 0
0.00.608.057 I llm_load_print_meta: ssm_d_state      = 0
0.00.608.057 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.608.057 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.608.058 I llm_load_print_meta: model type       = 2B
0.00.608.059 I llm_load_print_meta: model ftype      = Q8_0
0.00.608.059 I llm_load_print_meta: model params     = 2.51 B
0.00.608.061 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.608.061 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.608.062 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.608.064 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.608.065 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.608.065 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.608.066 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.608.066 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.608.072 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.608.074 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.608.074 I llm_load_print_meta: max token length = 93
0.00.608.258 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.710.868 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.710.875 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.710.876 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.710.876 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.710.877 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.710.878 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.716.702 I llama_new_context_with_model: n_ctx      = 8192
0.00.716.710 I llama_new_context_with_model: n_batch    = 2048
0.00.716.710 I llama_new_context_with_model: n_ubatch   = 512
0.00.716.711 I llama_new_context_with_model: flash_attn = 0
0.00.716.713 I llama_new_context_with_model: freq_base  = 10000.0
0.00.716.713 I llama_new_context_with_model: freq_scale = 1
0.00.745.440 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.745.483 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.745.595 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.746.981 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.746.986 I llama_new_context_with_model: graph nodes  = 601
0.00.746.987 I llama_new_context_with_model: graph splits = 1
0.00.747.005 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.358.696 I main: llama threadpool init, n_threads = 4
0.01.358.706 I 
0.01.358.819 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.358.825 I 
0.01.358.998 I sampler seed: 2950119683
0.01.359.009 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.359.016 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.359.017 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.359.017 I 
 increasements as a way to determine the most likely sequence of events in a given situation. [end of text]


0.09.411.864 I llama_perf_sampler_print:    sampling time =      28.48 ms /    20 runs   (    1.42 ms per token,   702.37 tokens per second)
0.09.411.867 I llama_perf_context_print:        load time =    1355.81 ms
0.09.411.868 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.411.870 I llama_perf_context_print:        eval time =    8004.50 ms /    19 runs   (  421.29 ms per token,     2.37 tokens per second)
0.09.411.871 I llama_perf_context_print:       total time =    8053.18 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.621 I build: 3931 (43c7612a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.818 I main: llama backend init
0.00.002.767 I main: load the model and apply lora adapter, if any
0.00.024.444 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.533 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.547 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.548 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.552 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.554 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.555 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.556 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.557 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.558 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.565 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.566 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.567 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.568 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.570 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.200 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.997 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.143 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.151 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.152 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.153 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.154 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.155 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.156 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.160 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.161 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.162 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.163 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.268.164 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.172 I llama_model_loader: - type  f32:   37 tensors
0.00.268.176 I llama_model_loader: - type q8_0:  127 tensors
0.00.450.851 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.509.987 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.511.003 I llm_load_vocab: special tokens cache size = 5
0.00.607.219 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.607.289 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.607.290 I llm_load_print_meta: arch             = gemma
0.00.607.290 I llm_load_print_meta: vocab type       = SPM
0.00.607.291 I llm_load_print_meta: n_vocab          = 256000
0.00.607.293 I llm_load_print_meta: n_merges         = 0
0.00.607.294 I llm_load_print_meta: vocab_only       = 0
0.00.607.294 I llm_load_print_meta: n_ctx_train      = 8192
0.00.607.294 I llm_load_print_meta: n_embd           = 2048
0.00.607.295 I llm_load_print_meta: n_layer          = 18
0.00.607.361 I llm_load_print_meta: n_head           = 8
0.00.607.368 I llm_load_print_meta: n_head_kv        = 1
0.00.607.368 I llm_load_print_meta: n_rot            = 256
0.00.607.370 I llm_load_print_meta: n_swa            = 0
0.00.607.370 I llm_load_print_meta: n_embd_head_k    = 256
0.00.607.371 I llm_load_print_meta: n_embd_head_v    = 256
0.00.607.375 I llm_load_print_meta: n_gqa            = 8
0.00.607.380 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.607.385 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.607.386 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.607.388 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.607.388 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.607.389 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.607.390 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.607.395 I llm_load_print_meta: n_ff             = 16384
0.00.607.396 I llm_load_print_meta: n_expert         = 0
0.00.607.396 I llm_load_print_meta: n_expert_used    = 0
0.00.607.397 I llm_load_print_meta: causal attn      = 1
0.00.607.397 I llm_load_print_meta: pooling type     = 0
0.00.607.398 I llm_load_print_meta: rope type        = 2
0.00.607.398 I llm_load_print_meta: rope scaling     = linear
0.00.607.400 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.607.400 I llm_load_print_meta: freq_scale_train = 1
0.00.607.401 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.607.402 I llm_load_print_meta: rope_finetuned   = unknown
0.00.607.402 I llm_load_print_meta: ssm_d_conv       = 0
0.00.607.403 I llm_load_print_meta: ssm_d_inner      = 0
0.00.607.403 I llm_load_print_meta: ssm_d_state      = 0
0.00.607.404 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.607.405 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.607.405 I llm_load_print_meta: model type       = 2B
0.00.607.406 I llm_load_print_meta: model ftype      = Q8_0
0.00.607.407 I llm_load_print_meta: model params     = 2.51 B
0.00.607.408 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.607.408 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.607.409 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.607.410 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.607.410 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.607.411 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.607.411 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.607.416 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.607.422 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.607.424 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.607.424 I llm_load_print_meta: max token length = 93
0.00.607.590 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.702.206 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.707.749 I llama_new_context_with_model: n_ctx      = 8192
0.00.707.757 I llama_new_context_with_model: n_batch    = 2048
0.00.707.757 I llama_new_context_with_model: n_ubatch   = 512
0.00.707.758 I llama_new_context_with_model: flash_attn = 0
0.00.707.760 I llama_new_context_with_model: freq_base  = 10000.0
0.00.707.761 I llama_new_context_with_model: freq_scale = 1
0.00.736.287 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.736.334 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.736.452 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.737.833 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.737.838 I llama_new_context_with_model: graph nodes  = 601
0.00.737.839 I llama_new_context_with_model: graph splits = 1
0.00.737.854 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.353.018 I main: llama threadpool init, n_threads = 4
0.01.353.029 I 
0.01.353.142 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.353.146 I 
0.01.353.315 I sampler seed: 3750869778
0.01.353.325 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.353.332 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.353.333 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.353.334 I 
 increasities on Reddit and 4chan, where the users engage in sexually suggestive and inappropriate conversations.

These platforms are known for their permissive content and lack of

0.15.043.327 I llama_perf_sampler_print:    sampling time =      47.98 ms /    33 runs   (    1.45 ms per token,   687.74 tokens per second)
0.15.043.342 I llama_perf_context_print:        load time =    1350.16 ms
0.15.043.344 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.043.346 I llama_perf_context_print:        eval time =   13608.86 ms /    32 runs   (  425.28 ms per token,     2.35 tokens per second)
0.15.043.347 I llama_perf_context_print:       total time =   13690.32 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.642 I build: 3931 (43c7612a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.843 I main: llama backend init
0.00.002.793 I main: load the model and apply lora adapter, if any
0.00.025.921 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.026.132 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.026.222 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.234 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.235 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.240 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.242 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.243 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.244 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.245 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.246 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.253 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.257 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.258 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.258 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.260 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.973 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.832 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.051 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.061 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.062 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.063 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.064 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.066 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.067 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.086 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.089 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.091 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.092 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.270.093 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.102 I llama_model_loader: - type  f32:   37 tensors
0.00.270.107 I llama_model_loader: - type q8_0:  127 tensors
0.00.460.361 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.522.322 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.523.377 I llm_load_vocab: special tokens cache size = 5
0.00.619.501 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.619.571 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.619.572 I llm_load_print_meta: arch             = gemma
0.00.619.572 I llm_load_print_meta: vocab type       = SPM
0.00.619.574 I llm_load_print_meta: n_vocab          = 256000
0.00.619.576 I llm_load_print_meta: n_merges         = 0
0.00.619.576 I llm_load_print_meta: vocab_only       = 0
0.00.619.577 I llm_load_print_meta: n_ctx_train      = 8192
0.00.619.577 I llm_load_print_meta: n_embd           = 2048
0.00.619.577 I llm_load_print_meta: n_layer          = 18
0.00.619.639 I llm_load_print_meta: n_head           = 8
0.00.619.646 I llm_load_print_meta: n_head_kv        = 1
0.00.619.647 I llm_load_print_meta: n_rot            = 256
0.00.619.647 I llm_load_print_meta: n_swa            = 0
0.00.619.647 I llm_load_print_meta: n_embd_head_k    = 256
0.00.619.648 I llm_load_print_meta: n_embd_head_v    = 256
0.00.619.652 I llm_load_print_meta: n_gqa            = 8
0.00.619.657 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.619.662 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.619.678 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.619.680 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.619.680 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.619.681 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.619.681 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.619.686 I llm_load_print_meta: n_ff             = 16384
0.00.619.687 I llm_load_print_meta: n_expert         = 0
0.00.619.687 I llm_load_print_meta: n_expert_used    = 0
0.00.619.688 I llm_load_print_meta: causal attn      = 1
0.00.619.688 I llm_load_print_meta: pooling type     = 0
0.00.619.689 I llm_load_print_meta: rope type        = 2
0.00.619.689 I llm_load_print_meta: rope scaling     = linear
0.00.619.690 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.619.691 I llm_load_print_meta: freq_scale_train = 1
0.00.619.691 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.619.692 I llm_load_print_meta: rope_finetuned   = unknown
0.00.619.697 I llm_load_print_meta: ssm_d_conv       = 0
0.00.619.698 I llm_load_print_meta: ssm_d_inner      = 0
0.00.619.698 I llm_load_print_meta: ssm_d_state      = 0
0.00.619.699 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.619.699 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.619.712 I llm_load_print_meta: model type       = 2B
0.00.619.715 I llm_load_print_meta: model ftype      = Q8_0
0.00.619.716 I llm_load_print_meta: model params     = 2.51 B
0.00.619.717 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.619.725 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.619.727 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.619.727 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.619.728 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.619.729 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.619.730 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.619.730 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.619.736 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.619.737 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.619.737 I llm_load_print_meta: max token length = 93
0.00.619.902 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.697.444 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.697.454 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.697.455 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.697.455 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.697.456 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.697.457 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.703.139 I llama_new_context_with_model: n_ctx      = 8192
0.00.703.147 I llama_new_context_with_model: n_batch    = 2048
0.00.703.148 I llama_new_context_with_model: n_ubatch   = 512
0.00.703.149 I llama_new_context_with_model: flash_attn = 0
0.00.703.152 I llama_new_context_with_model: freq_base  = 10000.0
0.00.703.153 I llama_new_context_with_model: freq_scale = 1
0.00.732.488 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.732.530 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.732.652 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.734.072 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.734.077 I llama_new_context_with_model: graph nodes  = 601
0.00.734.077 I llama_new_context_with_model: graph splits = 1
0.00.734.094 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.347.392 I main: llama threadpool init, n_threads = 4
0.01.347.403 I 
0.01.347.508 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.347.512 I 
0.01.347.681 I sampler seed: 2478894102
0.01.347.693 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.347.700 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.347.701 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.347.702 I 
 increasities in the game, and the resulting frustration and disappointment for players.

**Causes of player frustration:**

* **RNG:** The random nature of some

0.14.904.930 I llama_perf_sampler_print:    sampling time =      47.93 ms /    33 runs   (    1.45 ms per token,   688.46 tokens per second)
0.14.904.954 I llama_perf_context_print:        load time =    1344.51 ms
0.14.904.956 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.904.958 I llama_perf_context_print:        eval time =   13476.62 ms /    32 runs   (  421.14 ms per token,     2.37 tokens per second)
0.14.904.959 I llama_perf_context_print:       total time =   13557.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.626 I build: 3931 (43c7612a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.824 I main: llama backend init
0.00.002.756 I main: load the model and apply lora adapter, if any
0.00.024.815 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.024 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.113 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.125 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.127 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.131 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.132 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.133 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.135 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.136 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.137 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.145 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.146 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.147 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.148 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.149 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.961 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.640 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.918 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.928 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.929 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.930 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.931 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.933 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.934 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.937 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.938 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.939 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.940 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.268.941 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.950 I llama_model_loader: - type  f32:   37 tensors
0.00.268.954 I llama_model_loader: - type q8_0:  127 tensors
0.00.460.955 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.524.351 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.525.399 I llm_load_vocab: special tokens cache size = 5
0.00.621.841 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.621.915 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.621.919 I llm_load_print_meta: arch             = gemma
0.00.621.919 I llm_load_print_meta: vocab type       = SPM
0.00.621.920 I llm_load_print_meta: n_vocab          = 256000
0.00.621.922 I llm_load_print_meta: n_merges         = 0
0.00.621.923 I llm_load_print_meta: vocab_only       = 0
0.00.621.924 I llm_load_print_meta: n_ctx_train      = 8192
0.00.621.924 I llm_load_print_meta: n_embd           = 2048
0.00.621.925 I llm_load_print_meta: n_layer          = 18
0.00.621.988 I llm_load_print_meta: n_head           = 8
0.00.621.999 I llm_load_print_meta: n_head_kv        = 1
0.00.621.999 I llm_load_print_meta: n_rot            = 256
0.00.622.000 I llm_load_print_meta: n_swa            = 0
0.00.622.001 I llm_load_print_meta: n_embd_head_k    = 256
0.00.622.002 I llm_load_print_meta: n_embd_head_v    = 256
0.00.622.007 I llm_load_print_meta: n_gqa            = 8
0.00.622.012 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.622.017 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.622.019 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.622.021 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.622.022 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.622.022 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.622.025 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.622.031 I llm_load_print_meta: n_ff             = 16384
0.00.622.031 I llm_load_print_meta: n_expert         = 0
0.00.622.032 I llm_load_print_meta: n_expert_used    = 0
0.00.622.032 I llm_load_print_meta: causal attn      = 1
0.00.622.032 I llm_load_print_meta: pooling type     = 0
0.00.622.032 I llm_load_print_meta: rope type        = 2
0.00.622.033 I llm_load_print_meta: rope scaling     = linear
0.00.622.034 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.622.055 I llm_load_print_meta: freq_scale_train = 1
0.00.622.056 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.622.057 I llm_load_print_meta: rope_finetuned   = unknown
0.00.622.057 I llm_load_print_meta: ssm_d_conv       = 0
0.00.622.058 I llm_load_print_meta: ssm_d_inner      = 0
0.00.622.058 I llm_load_print_meta: ssm_d_state      = 0
0.00.622.059 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.622.059 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.622.060 I llm_load_print_meta: model type       = 2B
0.00.622.061 I llm_load_print_meta: model ftype      = Q8_0
0.00.622.062 I llm_load_print_meta: model params     = 2.51 B
0.00.622.063 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.622.063 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.622.065 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.622.065 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.622.066 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.622.066 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.622.067 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.622.068 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.622.074 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.622.085 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.622.086 I llm_load_print_meta: max token length = 93
0.00.622.252 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.694.132 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.694.143 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.699.934 I llama_new_context_with_model: n_ctx      = 8192
0.00.699.941 I llama_new_context_with_model: n_batch    = 2048
0.00.699.942 I llama_new_context_with_model: n_ubatch   = 512
0.00.699.942 I llama_new_context_with_model: flash_attn = 0
0.00.699.945 I llama_new_context_with_model: freq_base  = 10000.0
0.00.699.946 I llama_new_context_with_model: freq_scale = 1
0.00.729.751 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.729.803 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.729.921 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.731.294 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.731.299 I llama_new_context_with_model: graph nodes  = 601
0.00.731.299 I llama_new_context_with_model: graph splits = 1
0.00.731.315 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.345.201 I main: llama threadpool init, n_threads = 4
0.01.345.212 I 
0.01.345.332 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.345.336 I 
0.01.345.518 I sampler seed: 2100043929
0.01.345.533 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.345.545 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.345.549 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.345.550 I 
 increadibly complex and nuanced arguments in a way that resonates with a general audience. [end of text]


0.08.536.773 I llama_perf_sampler_print:    sampling time =      25.55 ms /    18 runs   (    1.42 ms per token,   704.58 tokens per second)
0.08.536.776 I llama_perf_context_print:        load time =    1342.36 ms
0.08.536.778 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.536.780 I llama_perf_context_print:        eval time =    7147.34 ms /    17 runs   (  420.43 ms per token,     2.38 tokens per second)
0.08.536.782 I llama_perf_context_print:       total time =    7191.58 ms /    18 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m57.555s
user	3m2.662s
sys	0m9.445s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3931 (43c7612a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198992.26 ms
main:    total time = 198992.26 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 3931 (43c7612a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.822 I main: llama backend init
0.00.002.779 I main: load the model and apply lora adapter, if any
0.00.024.788 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.983 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.071 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.082 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.083 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.087 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.089 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.090 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.091 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.100 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.101 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.107 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.111 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.112 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.113 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.114 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.449 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.959 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.121 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.129 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.130 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.131 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.132 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.134 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.135 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.138 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.139 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.141 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.142 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.143 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.150 I llama_model_loader: - type  f32:   37 tensors
0.00.267.154 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.154 I llama_model_loader: - type q6_K:   19 tensors
0.00.442.187 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.494.121 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.495.215 I llm_load_vocab: special tokens cache size = 5
0.00.591.325 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.591.394 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.591.398 I llm_load_print_meta: arch             = gemma
0.00.591.398 I llm_load_print_meta: vocab type       = SPM
0.00.591.399 I llm_load_print_meta: n_vocab          = 256000
0.00.591.401 I llm_load_print_meta: n_merges         = 0
0.00.591.402 I llm_load_print_meta: vocab_only       = 0
0.00.591.402 I llm_load_print_meta: n_ctx_train      = 8192
0.00.591.403 I llm_load_print_meta: n_embd           = 2048
0.00.591.403 I llm_load_print_meta: n_layer          = 18
0.00.591.464 I llm_load_print_meta: n_head           = 8
0.00.591.475 I llm_load_print_meta: n_head_kv        = 1
0.00.591.476 I llm_load_print_meta: n_rot            = 256
0.00.591.486 I llm_load_print_meta: n_swa            = 0
0.00.591.487 I llm_load_print_meta: n_embd_head_k    = 256
0.00.591.488 I llm_load_print_meta: n_embd_head_v    = 256
0.00.591.494 I llm_load_print_meta: n_gqa            = 8
0.00.591.502 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.591.507 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.591.509 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.591.510 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.591.511 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.591.511 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.591.524 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.591.532 I llm_load_print_meta: n_ff             = 16384
0.00.591.533 I llm_load_print_meta: n_expert         = 0
0.00.591.533 I llm_load_print_meta: n_expert_used    = 0
0.00.591.534 I llm_load_print_meta: causal attn      = 1
0.00.591.534 I llm_load_print_meta: pooling type     = 0
0.00.591.535 I llm_load_print_meta: rope type        = 2
0.00.591.535 I llm_load_print_meta: rope scaling     = linear
0.00.591.537 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.591.537 I llm_load_print_meta: freq_scale_train = 1
0.00.591.538 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.591.547 I llm_load_print_meta: rope_finetuned   = unknown
0.00.591.547 I llm_load_print_meta: ssm_d_conv       = 0
0.00.591.548 I llm_load_print_meta: ssm_d_inner      = 0
0.00.591.549 I llm_load_print_meta: ssm_d_state      = 0
0.00.591.549 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.591.549 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.591.550 I llm_load_print_meta: model type       = 2B
0.00.591.551 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.591.553 I llm_load_print_meta: model params     = 2.51 B
0.00.591.553 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.591.554 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.591.555 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.591.556 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.591.556 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.591.557 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.591.558 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.591.558 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.591.564 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.591.566 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.591.567 I llm_load_print_meta: max token length = 93
0.00.591.731 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.652.387 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.652.396 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.652.397 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.652.398 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.652.398 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.652.399 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.657.953 I llama_new_context_with_model: n_ctx      = 8192
0.00.657.960 I llama_new_context_with_model: n_batch    = 2048
0.00.657.960 I llama_new_context_with_model: n_ubatch   = 512
0.00.657.960 I llama_new_context_with_model: flash_attn = 0
0.00.657.963 I llama_new_context_with_model: freq_base  = 10000.0
0.00.657.963 I llama_new_context_with_model: freq_scale = 1
0.00.687.287 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.687.328 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.687.448 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.688.843 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.688.848 I llama_new_context_with_model: graph nodes  = 601
0.00.688.848 I llama_new_context_with_model: graph splits = 1
0.00.688.864 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.269.448 I main: llama threadpool init, n_threads = 4
0.01.269.458 I 
0.01.269.566 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.269.569 I 
0.01.269.737 I sampler seed: 421854564
0.01.269.747 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.269.754 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.269.755 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.269.756 I 
 seconded, while the other two were unscrambled. I hope you understand.

What am I?

I am a group of words that are scrambled.

0.12.158.045 I llama_perf_sampler_print:    sampling time =      47.53 ms /    33 runs   (    1.44 ms per token,   694.24 tokens per second)
0.12.158.058 I llama_perf_context_print:        load time =    1266.59 ms
0.12.158.060 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.158.062 I llama_perf_context_print:        eval time =   10807.49 ms /    32 runs   (  337.73 ms per token,     2.96 tokens per second)
0.12.158.064 I llama_perf_context_print:       total time =   10888.61 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3931 (43c7612a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198888.44 ms
main:    total time = 198888.44 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.621 I build: 3931 (43c7612a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.836 I main: llama backend init
0.00.002.788 I main: load the model and apply lora adapter, if any
0.00.024.628 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.718 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.731 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.733 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.737 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.741 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.742 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.743 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.745 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.746 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.753 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.754 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.755 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.757 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.758 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.569 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.627 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.771 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.780 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.781 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.782 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.783 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.785 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.786 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.789 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.790 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.799 I llama_model_loader: - type  f32:   37 tensors
0.00.268.803 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.804 I llama_model_loader: - type q6_K:   19 tensors
0.00.448.203 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.502.524 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.503.550 I llm_load_vocab: special tokens cache size = 5
0.00.599.882 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.599.950 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.599.951 I llm_load_print_meta: arch             = gemma
0.00.599.951 I llm_load_print_meta: vocab type       = SPM
0.00.599.952 I llm_load_print_meta: n_vocab          = 256000
0.00.599.954 I llm_load_print_meta: n_merges         = 0
0.00.599.955 I llm_load_print_meta: vocab_only       = 0
0.00.599.955 I llm_load_print_meta: n_ctx_train      = 8192
0.00.599.956 I llm_load_print_meta: n_embd           = 2048
0.00.599.956 I llm_load_print_meta: n_layer          = 18
0.00.600.019 I llm_load_print_meta: n_head           = 8
0.00.600.026 I llm_load_print_meta: n_head_kv        = 1
0.00.600.027 I llm_load_print_meta: n_rot            = 256
0.00.600.027 I llm_load_print_meta: n_swa            = 0
0.00.600.029 I llm_load_print_meta: n_embd_head_k    = 256
0.00.600.029 I llm_load_print_meta: n_embd_head_v    = 256
0.00.600.035 I llm_load_print_meta: n_gqa            = 8
0.00.600.040 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.600.045 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.600.046 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.600.048 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.600.058 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.600.062 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.600.063 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.600.069 I llm_load_print_meta: n_ff             = 16384
0.00.600.071 I llm_load_print_meta: n_expert         = 0
0.00.600.071 I llm_load_print_meta: n_expert_used    = 0
0.00.600.072 I llm_load_print_meta: causal attn      = 1
0.00.600.072 I llm_load_print_meta: pooling type     = 0
0.00.600.072 I llm_load_print_meta: rope type        = 2
0.00.600.073 I llm_load_print_meta: rope scaling     = linear
0.00.600.074 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.600.075 I llm_load_print_meta: freq_scale_train = 1
0.00.600.075 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.600.076 I llm_load_print_meta: rope_finetuned   = unknown
0.00.600.089 I llm_load_print_meta: ssm_d_conv       = 0
0.00.600.092 I llm_load_print_meta: ssm_d_inner      = 0
0.00.600.093 I llm_load_print_meta: ssm_d_state      = 0
0.00.600.093 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.600.094 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.600.095 I llm_load_print_meta: model type       = 2B
0.00.600.096 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.600.104 I llm_load_print_meta: model params     = 2.51 B
0.00.600.106 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.600.106 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.600.107 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.600.107 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.600.108 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.600.108 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.600.109 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.600.109 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.600.115 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.600.117 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.600.117 I llm_load_print_meta: max token length = 93
0.00.600.285 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.657.889 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.663.454 I llama_new_context_with_model: n_ctx      = 8192
0.00.663.460 I llama_new_context_with_model: n_batch    = 2048
0.00.663.461 I llama_new_context_with_model: n_ubatch   = 512
0.00.663.462 I llama_new_context_with_model: flash_attn = 0
0.00.663.464 I llama_new_context_with_model: freq_base  = 10000.0
0.00.663.464 I llama_new_context_with_model: freq_scale = 1
0.00.693.423 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.693.467 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.693.583 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.694.951 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.694.956 I llama_new_context_with_model: graph nodes  = 601
0.00.694.956 I llama_new_context_with_model: graph splits = 1
0.00.694.971 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.274.676 I main: llama threadpool init, n_threads = 4
0.01.274.686 I 
0.01.274.791 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.274.794 I 
0.01.274.959 I sampler seed: 1739780970
0.01.274.969 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.274.975 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.274.976 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.274.976 I 
 squaRE.

## The Squaring of a Circle

Squaring a circle is a well-known problem in mathematics. It involves finding a way to express

0.12.313.184 I llama_perf_sampler_print:    sampling time =      47.66 ms /    33 runs   (    1.44 ms per token,   692.36 tokens per second)
0.12.313.201 I llama_perf_context_print:        load time =    1271.80 ms
0.12.313.203 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.313.205 I llama_perf_context_print:        eval time =   10958.53 ms /    32 runs   (  342.45 ms per token,     2.92 tokens per second)
0.12.313.206 I llama_perf_context_print:       total time =   11038.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.235s
user	50m7.386s
sys	0m6.302s
