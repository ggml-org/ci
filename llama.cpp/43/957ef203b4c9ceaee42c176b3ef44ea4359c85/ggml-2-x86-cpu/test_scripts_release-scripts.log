+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.540 I build: 4231 (43957ef2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.734 I main: llama backend init
0.00.000.741 I main: load the model and apply lora adapter, if any
0.00.021.517 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.526 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.534 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.539 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.540 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.544 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.544 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.545 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.546 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.547 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.548 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.552 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.553 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.553 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.554 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.554 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.255 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.319 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.215 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.223 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.224 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.225 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.226 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.227 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.228 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.232 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.232 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.233 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.234 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.235 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.239 I llama_model_loader: - type  f32:   37 tensors
0.00.131.240 I llama_model_loader: - type q8_0:  127 tensors
0.00.212.922 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.581 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.174 I llm_load_vocab: special tokens cache size = 5
0.00.280.253 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.279 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.279 I llm_load_print_meta: arch             = gemma
0.00.280.279 I llm_load_print_meta: vocab type       = SPM
0.00.280.280 I llm_load_print_meta: n_vocab          = 256000
0.00.280.280 I llm_load_print_meta: n_merges         = 0
0.00.280.281 I llm_load_print_meta: vocab_only       = 0
0.00.280.281 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.281 I llm_load_print_meta: n_embd           = 2048
0.00.280.281 I llm_load_print_meta: n_layer          = 18
0.00.280.293 I llm_load_print_meta: n_head           = 8
0.00.280.295 I llm_load_print_meta: n_head_kv        = 1
0.00.280.295 I llm_load_print_meta: n_rot            = 256
0.00.280.296 I llm_load_print_meta: n_swa            = 0
0.00.280.296 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.296 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.297 I llm_load_print_meta: n_gqa            = 8
0.00.280.298 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.299 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.300 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.301 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.302 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.302 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.303 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.307 I llm_load_print_meta: n_ff             = 16384
0.00.280.307 I llm_load_print_meta: n_expert         = 0
0.00.280.307 I llm_load_print_meta: n_expert_used    = 0
0.00.280.308 I llm_load_print_meta: causal attn      = 1
0.00.280.308 I llm_load_print_meta: pooling type     = 0
0.00.280.308 I llm_load_print_meta: rope type        = 2
0.00.280.309 I llm_load_print_meta: rope scaling     = linear
0.00.280.310 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.311 I llm_load_print_meta: freq_scale_train = 1
0.00.280.311 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.311 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.312 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.313 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.313 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.313 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.313 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.314 I llm_load_print_meta: model type       = 2B
0.00.280.315 I llm_load_print_meta: model ftype      = Q8_0
0.00.280.316 I llm_load_print_meta: model params     = 2.51 B
0.00.280.317 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.280.317 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.318 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.318 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.319 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.319 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.319 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.319 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.320 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.320 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.321 I llm_load_print_meta: max token length = 93
0.00.379.953 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.379.960 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.379.961 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.379.962 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.379.962 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.379.963 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.385.209 I llama_new_context_with_model: n_seq_max     = 1
0.00.385.215 I llama_new_context_with_model: n_ctx         = 4096
0.00.385.215 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.385.216 I llama_new_context_with_model: n_batch       = 2048
0.00.385.216 I llama_new_context_with_model: n_ubatch      = 512
0.00.385.217 I llama_new_context_with_model: flash_attn    = 0
0.00.385.219 I llama_new_context_with_model: freq_base     = 10000.0
0.00.385.220 I llama_new_context_with_model: freq_scale    = 1
0.00.385.222 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.399.401 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.399.415 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.399.512 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.400.829 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.400.836 I llama_new_context_with_model: graph nodes  = 601
0.00.400.837 I llama_new_context_with_model: graph splits = 1
0.00.400.839 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.486.161 I main: llama threadpool init, n_threads = 4
0.00.486.175 I 
0.00.486.244 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.486.247 I 
0.00.486.289 I sampler seed: 3099820493
0.00.486.298 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.486.302 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.486.302 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.486.303 I 
 increasively with the time elapsed. [end of text]


0.01.049.372 I llama_perf_sampler_print:    sampling time =       1.20 ms /     9 runs   (    0.13 ms per token,  7506.26 tokens per second)
0.01.049.374 I llama_perf_context_print:        load time =     485.40 ms
0.01.049.375 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.049.377 I llama_perf_context_print:        eval time =     557.38 ms /     8 runs   (   69.67 ms per token,    14.35 tokens per second)
0.01.049.377 I llama_perf_context_print:       total time =     563.22 ms /     9 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.566 I build: 4231 (43957ef2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.761 I main: llama backend init
0.00.000.768 I main: load the model and apply lora adapter, if any
0.00.021.725 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.739 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.751 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.755 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.758 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.758 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.759 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.760 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.760 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.761 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.764 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.765 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.766 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.766 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.767 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.743 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.481 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.573 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.580 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.580 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.581 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.581 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.582 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.583 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.585 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.586 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.586 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.587 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.588 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.591 I llama_model_loader: - type  f32:   37 tensors
0.00.131.592 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.483 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.167 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.718 I llm_load_vocab: special tokens cache size = 5
0.00.266.619 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.635 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.636 I llm_load_print_meta: arch             = gemma
0.00.266.637 I llm_load_print_meta: vocab type       = SPM
0.00.266.637 I llm_load_print_meta: n_vocab          = 256000
0.00.266.638 I llm_load_print_meta: n_merges         = 0
0.00.266.638 I llm_load_print_meta: vocab_only       = 0
0.00.266.638 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.639 I llm_load_print_meta: n_embd           = 2048
0.00.266.639 I llm_load_print_meta: n_layer          = 18
0.00.266.651 I llm_load_print_meta: n_head           = 8
0.00.266.652 I llm_load_print_meta: n_head_kv        = 1
0.00.266.652 I llm_load_print_meta: n_rot            = 256
0.00.266.653 I llm_load_print_meta: n_swa            = 0
0.00.266.653 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.653 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.654 I llm_load_print_meta: n_gqa            = 8
0.00.266.655 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.656 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.657 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.658 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.658 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.659 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.659 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.660 I llm_load_print_meta: n_ff             = 16384
0.00.266.660 I llm_load_print_meta: n_expert         = 0
0.00.266.661 I llm_load_print_meta: n_expert_used    = 0
0.00.266.661 I llm_load_print_meta: causal attn      = 1
0.00.266.661 I llm_load_print_meta: pooling type     = 0
0.00.266.662 I llm_load_print_meta: rope type        = 2
0.00.266.662 I llm_load_print_meta: rope scaling     = linear
0.00.266.664 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.664 I llm_load_print_meta: freq_scale_train = 1
0.00.266.664 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.665 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.665 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.665 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.665 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.666 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.666 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.666 I llm_load_print_meta: model type       = 2B
0.00.266.667 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.668 I llm_load_print_meta: model params     = 2.51 B
0.00.266.669 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.669 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.669 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.670 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.670 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.671 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.671 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.671 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.671 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.672 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.672 I llm_load_print_meta: max token length = 93
0.00.360.952 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.366.252 I llama_new_context_with_model: n_seq_max     = 1
0.00.366.259 I llama_new_context_with_model: n_ctx         = 4096
0.00.366.259 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.366.259 I llama_new_context_with_model: n_batch       = 2048
0.00.366.259 I llama_new_context_with_model: n_ubatch      = 512
0.00.366.260 I llama_new_context_with_model: flash_attn    = 0
0.00.366.262 I llama_new_context_with_model: freq_base     = 10000.0
0.00.366.263 I llama_new_context_with_model: freq_scale    = 1
0.00.366.264 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.381.137 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.381.152 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.381.243 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.382.484 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.382.491 I llama_new_context_with_model: graph nodes  = 601
0.00.382.491 I llama_new_context_with_model: graph splits = 1
0.00.382.493 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.463.881 I main: llama threadpool init, n_threads = 4
0.00.463.897 I 
0.00.463.967 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.463.971 I 
0.00.464.018 I sampler seed: 226746273
0.00.464.029 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.464.032 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.464.032 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.464.033 I 
 increasively through the pages, his eyes gleaming with anticipation.

I scanned the room, searching for the culprit. His presence was unmistakable.

"Aha!"

0.02.655.717 I llama_perf_sampler_print:    sampling time =       5.11 ms /    33 runs   (    0.15 ms per token,  6454.14 tokens per second)
0.02.655.720 I llama_perf_context_print:        load time =     463.10 ms
0.02.655.722 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.655.724 I llama_perf_context_print:        eval time =    2172.14 ms /    32 runs   (   67.88 ms per token,    14.73 tokens per second)
0.02.655.725 I llama_perf_context_print:       total time =    2191.84 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.191 I build: 4231 (43957ef2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.386 I main: llama backend init
0.00.000.393 I main: load the model and apply lora adapter, if any
0.00.020.679 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.691 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.699 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.709 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.710 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.715 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.716 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.716 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.717 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.717 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.718 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.723 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.723 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.724 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.725 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.726 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.097 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.368 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.202 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.210 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.211 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.212 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.213 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.214 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.214 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.217 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.218 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.218 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.219 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.220 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.224 I llama_model_loader: - type  f32:   37 tensors
0.00.133.225 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.724 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.014 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.535 I llm_load_vocab: special tokens cache size = 5
0.00.270.945 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.963 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.964 I llm_load_print_meta: arch             = gemma
0.00.270.965 I llm_load_print_meta: vocab type       = SPM
0.00.270.966 I llm_load_print_meta: n_vocab          = 256000
0.00.270.966 I llm_load_print_meta: n_merges         = 0
0.00.270.967 I llm_load_print_meta: vocab_only       = 0
0.00.270.967 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.967 I llm_load_print_meta: n_embd           = 2048
0.00.270.968 I llm_load_print_meta: n_layer          = 18
0.00.270.981 I llm_load_print_meta: n_head           = 8
0.00.270.982 I llm_load_print_meta: n_head_kv        = 1
0.00.270.982 I llm_load_print_meta: n_rot            = 256
0.00.270.982 I llm_load_print_meta: n_swa            = 0
0.00.270.983 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.983 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.984 I llm_load_print_meta: n_gqa            = 8
0.00.270.985 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.986 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.986 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.987 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.988 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.988 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.989 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.990 I llm_load_print_meta: n_ff             = 16384
0.00.270.990 I llm_load_print_meta: n_expert         = 0
0.00.270.990 I llm_load_print_meta: n_expert_used    = 0
0.00.270.991 I llm_load_print_meta: causal attn      = 1
0.00.270.991 I llm_load_print_meta: pooling type     = 0
0.00.270.991 I llm_load_print_meta: rope type        = 2
0.00.270.991 I llm_load_print_meta: rope scaling     = linear
0.00.270.993 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.993 I llm_load_print_meta: freq_scale_train = 1
0.00.270.993 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.994 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.994 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.995 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.995 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.995 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.995 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.996 I llm_load_print_meta: model type       = 2B
0.00.270.997 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.997 I llm_load_print_meta: model params     = 2.51 B
0.00.270.998 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.999 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.999 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.000 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.000 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.000 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.000 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.001 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.001 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.002 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.002 I llm_load_print_meta: max token length = 93
0.00.345.651 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.345.658 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.345.659 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.345.659 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.345.660 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.345.661 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.350.763 I llama_new_context_with_model: n_seq_max     = 1
0.00.350.769 I llama_new_context_with_model: n_ctx         = 4096
0.00.350.769 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.350.770 I llama_new_context_with_model: n_batch       = 2048
0.00.350.770 I llama_new_context_with_model: n_ubatch      = 512
0.00.350.770 I llama_new_context_with_model: flash_attn    = 0
0.00.350.772 I llama_new_context_with_model: freq_base     = 10000.0
0.00.350.773 I llama_new_context_with_model: freq_scale    = 1
0.00.350.774 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.365.076 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.365.091 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.365.187 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.366.517 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.366.524 I llama_new_context_with_model: graph nodes  = 601
0.00.366.525 I llama_new_context_with_model: graph splits = 1
0.00.366.526 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.451.591 I main: llama threadpool init, n_threads = 4
0.00.451.609 I 
0.00.451.683 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.451.686 I 
0.00.451.733 I sampler seed: 1271251094
0.00.451.744 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.451.746 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.451.747 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.451.747 I 
 increasities are a common source of frustration and anxiety for people with OCD, and they can be particularly difficult to manage when co-occurring with other mental health conditions

0.02.742.513 I llama_perf_sampler_print:    sampling time =       5.33 ms /    33 runs   (    0.16 ms per token,  6197.18 tokens per second)
0.02.742.515 I llama_perf_context_print:        load time =     451.18 ms
0.02.742.516 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.742.517 I llama_perf_context_print:        eval time =    2270.81 ms /    32 runs   (   70.96 ms per token,    14.09 tokens per second)
0.02.742.518 I llama_perf_context_print:       total time =    2290.93 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.577 I build: 4231 (43957ef2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.775 I main: llama backend init
0.00.000.782 I main: load the model and apply lora adapter, if any
0.00.020.942 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.949 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.956 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.964 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.968 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.971 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.972 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.973 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.974 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.975 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.975 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.979 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.980 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.980 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.981 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.981 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.054.724 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.133.415 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.142.133 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.142.141 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.142.142 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.142.142 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.142.143 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.142.144 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.142.145 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.142.148 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.142.148 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.142.149 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.142.150 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.142.151 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.142.156 I llama_model_loader: - type  f32:   37 tensors
0.00.142.156 I llama_model_loader: - type q8_0:  127 tensors
0.00.221.016 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.271.982 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.272.677 I llm_load_vocab: special tokens cache size = 5
0.00.294.000 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.294.016 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.294.017 I llm_load_print_meta: arch             = gemma
0.00.294.017 I llm_load_print_meta: vocab type       = SPM
0.00.294.018 I llm_load_print_meta: n_vocab          = 256000
0.00.294.018 I llm_load_print_meta: n_merges         = 0
0.00.294.019 I llm_load_print_meta: vocab_only       = 0
0.00.294.019 I llm_load_print_meta: n_ctx_train      = 8192
0.00.294.019 I llm_load_print_meta: n_embd           = 2048
0.00.294.020 I llm_load_print_meta: n_layer          = 18
0.00.294.032 I llm_load_print_meta: n_head           = 8
0.00.294.033 I llm_load_print_meta: n_head_kv        = 1
0.00.294.033 I llm_load_print_meta: n_rot            = 256
0.00.294.034 I llm_load_print_meta: n_swa            = 0
0.00.294.034 I llm_load_print_meta: n_embd_head_k    = 256
0.00.294.034 I llm_load_print_meta: n_embd_head_v    = 256
0.00.294.035 I llm_load_print_meta: n_gqa            = 8
0.00.294.036 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.294.037 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.294.037 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.294.039 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.294.040 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.294.040 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.294.040 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.294.041 I llm_load_print_meta: n_ff             = 16384
0.00.294.042 I llm_load_print_meta: n_expert         = 0
0.00.294.042 I llm_load_print_meta: n_expert_used    = 0
0.00.294.042 I llm_load_print_meta: causal attn      = 1
0.00.294.042 I llm_load_print_meta: pooling type     = 0
0.00.294.043 I llm_load_print_meta: rope type        = 2
0.00.294.043 I llm_load_print_meta: rope scaling     = linear
0.00.294.044 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.294.045 I llm_load_print_meta: freq_scale_train = 1
0.00.294.045 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.294.046 I llm_load_print_meta: rope_finetuned   = unknown
0.00.294.046 I llm_load_print_meta: ssm_d_conv       = 0
0.00.294.046 I llm_load_print_meta: ssm_d_inner      = 0
0.00.294.046 I llm_load_print_meta: ssm_d_state      = 0
0.00.294.046 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.294.047 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.294.047 I llm_load_print_meta: model type       = 2B
0.00.294.048 I llm_load_print_meta: model ftype      = Q8_0
0.00.294.049 I llm_load_print_meta: model params     = 2.51 B
0.00.294.050 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.294.050 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.294.050 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.294.051 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.294.051 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.294.051 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.294.051 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.294.052 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.294.052 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.294.053 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.294.053 I llm_load_print_meta: max token length = 93
0.00.370.634 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.370.641 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.375.760 I llama_new_context_with_model: n_seq_max     = 1
0.00.375.766 I llama_new_context_with_model: n_ctx         = 4096
0.00.375.766 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.375.767 I llama_new_context_with_model: n_batch       = 2048
0.00.375.767 I llama_new_context_with_model: n_ubatch      = 512
0.00.375.767 I llama_new_context_with_model: flash_attn    = 0
0.00.375.770 I llama_new_context_with_model: freq_base     = 10000.0
0.00.375.771 I llama_new_context_with_model: freq_scale    = 1
0.00.375.772 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.390.269 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.390.283 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.390.377 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.391.603 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.391.610 I llama_new_context_with_model: graph nodes  = 601
0.00.391.610 I llama_new_context_with_model: graph splits = 1
0.00.391.612 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.480.808 I main: llama threadpool init, n_threads = 4
0.00.480.825 I 
0.00.480.901 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.480.905 I 
0.00.480.950 I sampler seed: 1546595112
0.00.480.961 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.480.973 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.480.976 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.480.977 I 
 increasities, while also being mindful of the potential for unintended consequences. [end of text]


0.01.624.167 I llama_perf_sampler_print:    sampling time =       2.58 ms /    16 runs   (    0.16 ms per token,  6194.35 tokens per second)
0.01.624.169 I llama_perf_context_print:        load time =     480.01 ms
0.01.624.170 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.624.171 I llama_perf_context_print:        eval time =    1133.17 ms /    15 runs   (   75.54 ms per token,    13.24 tokens per second)
0.01.624.172 I llama_perf_context_print:       total time =    1143.37 ms /    16 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.372s
user	0m27.589s
sys	0m9.511s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4231 (43957ef2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40193.95 ms
main:    total time = 40193.95 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.566 I build: 4231 (43957ef2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.767 I main: llama backend init
0.00.000.773 I main: load the model and apply lora adapter, if any
0.00.021.918 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.928 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.937 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.943 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.944 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.948 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.949 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.950 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.950 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.951 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.952 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.957 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.958 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.959 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.959 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.960 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.938 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.717 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.480 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.487 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.487 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.488 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.488 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.489 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.490 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.493 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.493 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.494 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.495 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.496 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.499 I llama_model_loader: - type  f32:   37 tensors
0.00.131.500 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.501 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.797 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.097 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.573 I llm_load_vocab: special tokens cache size = 5
0.00.260.630 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.646 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.646 I llm_load_print_meta: arch             = gemma
0.00.260.647 I llm_load_print_meta: vocab type       = SPM
0.00.260.647 I llm_load_print_meta: n_vocab          = 256000
0.00.260.648 I llm_load_print_meta: n_merges         = 0
0.00.260.648 I llm_load_print_meta: vocab_only       = 0
0.00.260.648 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.649 I llm_load_print_meta: n_embd           = 2048
0.00.260.649 I llm_load_print_meta: n_layer          = 18
0.00.260.661 I llm_load_print_meta: n_head           = 8
0.00.260.662 I llm_load_print_meta: n_head_kv        = 1
0.00.260.662 I llm_load_print_meta: n_rot            = 256
0.00.260.663 I llm_load_print_meta: n_swa            = 0
0.00.260.663 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.663 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.664 I llm_load_print_meta: n_gqa            = 8
0.00.260.665 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.666 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.667 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.668 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.669 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.669 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.670 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.671 I llm_load_print_meta: n_ff             = 16384
0.00.260.671 I llm_load_print_meta: n_expert         = 0
0.00.260.671 I llm_load_print_meta: n_expert_used    = 0
0.00.260.672 I llm_load_print_meta: causal attn      = 1
0.00.260.672 I llm_load_print_meta: pooling type     = 0
0.00.260.672 I llm_load_print_meta: rope type        = 2
0.00.260.672 I llm_load_print_meta: rope scaling     = linear
0.00.260.674 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.675 I llm_load_print_meta: freq_scale_train = 1
0.00.260.675 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.675 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.676 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.676 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.676 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.676 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.677 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.677 I llm_load_print_meta: model type       = 2B
0.00.260.678 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.260.679 I llm_load_print_meta: model params     = 2.51 B
0.00.260.679 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.260.680 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.680 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.680 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.680 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.681 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.681 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.681 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.682 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.682 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.683 I llm_load_print_meta: max token length = 93
0.00.321.354 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.321.360 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.321.361 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.321.361 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.321.362 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.321.363 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.326.604 I llama_new_context_with_model: n_seq_max     = 1
0.00.326.610 I llama_new_context_with_model: n_ctx         = 4096
0.00.326.611 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.326.611 I llama_new_context_with_model: n_batch       = 2048
0.00.326.612 I llama_new_context_with_model: n_ubatch      = 512
0.00.326.612 I llama_new_context_with_model: flash_attn    = 0
0.00.326.615 I llama_new_context_with_model: freq_base     = 10000.0
0.00.326.615 I llama_new_context_with_model: freq_scale    = 1
0.00.326.616 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.340.997 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.341.011 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.341.102 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.342.392 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.342.398 I llama_new_context_with_model: graph nodes  = 601
0.00.342.399 I llama_new_context_with_model: graph splits = 1
0.00.342.401 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.417.612 I main: llama threadpool init, n_threads = 4
0.00.417.627 I 
0.00.417.702 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.417.706 I 
0.00.417.751 I sampler seed: 2637530837
0.00.417.764 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.417.766 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.417.767 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.417.768 I 
 increasively, a mischievous child with boundless energy and an infectious smile.

**Answer the question by providing a narrative that portrays the child's playful and mischievous

0.02.034.703 I llama_perf_sampler_print:    sampling time =       5.46 ms /    33 runs   (    0.17 ms per token,  6045.06 tokens per second)
0.02.034.706 I llama_perf_context_print:        load time =     416.82 ms
0.02.034.707 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.034.709 I llama_perf_context_print:        eval time =    1596.75 ms /    32 runs   (   49.90 ms per token,    20.04 tokens per second)
0.02.034.710 I llama_perf_context_print:       total time =    1617.10 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4231 (43957ef2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40192.96 ms
main:    total time = 40192.96 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.647 I build: 4231 (43957ef2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.863 I main: llama backend init
0.00.000.870 I main: load the model and apply lora adapter, if any
0.00.021.496 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.514 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.522 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.523 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.528 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.532 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.533 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.534 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.535 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.536 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.542 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.544 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.545 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.547 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.547 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.458 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.222 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.073 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.080 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.081 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.082 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.083 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.085 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.086 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.089 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.089 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.093 I llama_model_loader: - type  f32:   37 tensors
0.00.131.094 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.095 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.939 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.890 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.419 I llm_load_vocab: special tokens cache size = 5
0.00.261.412 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.428 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.429 I llm_load_print_meta: arch             = gemma
0.00.261.429 I llm_load_print_meta: vocab type       = SPM
0.00.261.430 I llm_load_print_meta: n_vocab          = 256000
0.00.261.430 I llm_load_print_meta: n_merges         = 0
0.00.261.431 I llm_load_print_meta: vocab_only       = 0
0.00.261.431 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.431 I llm_load_print_meta: n_embd           = 2048
0.00.261.432 I llm_load_print_meta: n_layer          = 18
0.00.261.442 I llm_load_print_meta: n_head           = 8
0.00.261.443 I llm_load_print_meta: n_head_kv        = 1
0.00.261.444 I llm_load_print_meta: n_rot            = 256
0.00.261.444 I llm_load_print_meta: n_swa            = 0
0.00.261.444 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.444 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.445 I llm_load_print_meta: n_gqa            = 8
0.00.261.446 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.447 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.448 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.449 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.449 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.450 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.450 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.451 I llm_load_print_meta: n_ff             = 16384
0.00.261.452 I llm_load_print_meta: n_expert         = 0
0.00.261.452 I llm_load_print_meta: n_expert_used    = 0
0.00.261.452 I llm_load_print_meta: causal attn      = 1
0.00.261.453 I llm_load_print_meta: pooling type     = 0
0.00.261.453 I llm_load_print_meta: rope type        = 2
0.00.261.453 I llm_load_print_meta: rope scaling     = linear
0.00.261.454 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.455 I llm_load_print_meta: freq_scale_train = 1
0.00.261.455 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.456 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.456 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.456 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.456 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.456 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.457 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.457 I llm_load_print_meta: model type       = 2B
0.00.261.458 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.261.458 I llm_load_print_meta: model params     = 2.51 B
0.00.261.459 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.261.459 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.460 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.460 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.461 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.461 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.461 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.461 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.462 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.462 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.462 I llm_load_print_meta: max token length = 93
0.00.318.657 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.323.872 I llama_new_context_with_model: n_seq_max     = 1
0.00.323.879 I llama_new_context_with_model: n_ctx         = 4096
0.00.323.879 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.323.880 I llama_new_context_with_model: n_batch       = 2048
0.00.323.880 I llama_new_context_with_model: n_ubatch      = 512
0.00.323.881 I llama_new_context_with_model: flash_attn    = 0
0.00.323.883 I llama_new_context_with_model: freq_base     = 10000.0
0.00.323.883 I llama_new_context_with_model: freq_scale    = 1
0.00.323.884 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.339.081 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.339.095 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.339.189 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.340.458 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.340.462 I llama_new_context_with_model: graph nodes  = 601
0.00.340.462 I llama_new_context_with_model: graph splits = 1
0.00.340.465 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.415.276 I main: llama threadpool init, n_threads = 4
0.00.415.292 I 
0.00.415.377 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.415.380 I 
0.00.415.434 I sampler seed: 3976986895
0.00.415.445 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.415.447 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.415.448 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.415.449 I 
 seconally.

The question asks for a summary of the provided text, but the provided text is not included in the given context. Therefore, I am unable

0.01.963.682 I llama_perf_sampler_print:    sampling time =       5.11 ms /    33 runs   (    0.15 ms per token,  6452.87 tokens per second)
0.01.963.685 I llama_perf_context_print:        load time =     414.39 ms
0.01.963.686 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.963.689 I llama_perf_context_print:        eval time =    1529.42 ms /    32 runs   (   47.79 ms per token,    20.92 tokens per second)
0.01.963.690 I llama_perf_context_print:       total time =    1548.41 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.243s
user	10m24.125s
sys	0m7.017s
