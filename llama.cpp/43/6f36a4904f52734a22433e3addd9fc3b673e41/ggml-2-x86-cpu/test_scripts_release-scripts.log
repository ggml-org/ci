+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.527 I build: 4216 (436f36a4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.720 I main: llama backend init
0.00.000.726 I main: load the model and apply lora adapter, if any
0.00.021.170 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.180 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.187 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.195 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.197 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.201 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.202 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.202 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.203 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.203 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.204 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.207 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.207 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.208 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.208 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.209 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.828 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.212 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.019 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.025 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.026 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.026 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.027 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.028 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.028 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.030 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.031 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.032 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.033 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.034 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.037 I llama_model_loader: - type  f32:   37 tensors
0.00.130.037 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.324 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.372 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.852 I llm_load_vocab: special tokens cache size = 5
0.00.260.809 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.824 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.825 I llm_load_print_meta: arch             = gemma
0.00.260.825 I llm_load_print_meta: vocab type       = SPM
0.00.260.826 I llm_load_print_meta: n_vocab          = 256000
0.00.260.826 I llm_load_print_meta: n_merges         = 0
0.00.260.827 I llm_load_print_meta: vocab_only       = 0
0.00.260.827 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.827 I llm_load_print_meta: n_embd           = 2048
0.00.260.828 I llm_load_print_meta: n_layer          = 18
0.00.260.840 I llm_load_print_meta: n_head           = 8
0.00.260.841 I llm_load_print_meta: n_head_kv        = 1
0.00.260.842 I llm_load_print_meta: n_rot            = 256
0.00.260.842 I llm_load_print_meta: n_swa            = 0
0.00.260.842 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.843 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.843 I llm_load_print_meta: n_gqa            = 8
0.00.260.844 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.845 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.846 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.847 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.848 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.848 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.848 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.849 I llm_load_print_meta: n_ff             = 16384
0.00.260.850 I llm_load_print_meta: n_expert         = 0
0.00.260.850 I llm_load_print_meta: n_expert_used    = 0
0.00.260.850 I llm_load_print_meta: causal attn      = 1
0.00.260.850 I llm_load_print_meta: pooling type     = 0
0.00.260.851 I llm_load_print_meta: rope type        = 2
0.00.260.851 I llm_load_print_meta: rope scaling     = linear
0.00.260.852 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.853 I llm_load_print_meta: freq_scale_train = 1
0.00.260.853 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.854 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.854 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.855 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.855 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.856 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.857 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.857 I llm_load_print_meta: model type       = 2B
0.00.260.858 I llm_load_print_meta: model ftype      = Q8_0
0.00.260.858 I llm_load_print_meta: model params     = 2.51 B
0.00.260.859 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.260.860 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.860 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.860 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.861 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.861 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.861 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.862 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.862 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.863 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.863 I llm_load_print_meta: max token length = 93
0.00.362.498 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.362.505 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.362.506 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.362.506 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.362.507 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.362.507 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.367.859 I llama_new_context_with_model: n_seq_max     = 1
0.00.367.865 I llama_new_context_with_model: n_ctx         = 4096
0.00.367.865 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.367.865 I llama_new_context_with_model: n_batch       = 2048
0.00.367.866 I llama_new_context_with_model: n_ubatch      = 512
0.00.367.867 I llama_new_context_with_model: flash_attn    = 0
0.00.367.869 I llama_new_context_with_model: freq_base     = 10000.0
0.00.367.869 I llama_new_context_with_model: freq_scale    = 1
0.00.367.870 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.382.085 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.382.100 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.382.189 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.383.458 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.383.465 I llama_new_context_with_model: graph nodes  = 601
0.00.383.465 I llama_new_context_with_model: graph splits = 1
0.00.383.467 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.468.445 I main: llama threadpool init, n_threads = 4
0.00.468.461 I 
0.00.468.532 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.468.535 I 
0.00.468.579 I sampler seed: 1535097795
0.00.468.590 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.468.603 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.468.606 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.468.607 I 
 increasities in his writing, leading to accusations of plagiarism.

The evidence suggests that the plagiarism allegations are unfounded. The writer has provided extensive documentation to support his

0.02.704.016 I llama_perf_sampler_print:    sampling time =       4.91 ms /    33 runs   (    0.15 ms per token,  6722.35 tokens per second)
0.02.704.019 I llama_perf_context_print:        load time =     467.70 ms
0.02.704.020 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.704.022 I llama_perf_context_print:        eval time =    2216.22 ms /    32 runs   (   69.26 ms per token,    14.44 tokens per second)
0.02.704.023 I llama_perf_context_print:       total time =    2235.58 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.606 I build: 4216 (436f36a4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.801 I main: llama backend init
0.00.000.808 I main: load the model and apply lora adapter, if any
0.00.021.340 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.354 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.361 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.362 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.366 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.366 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.367 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.367 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.369 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.369 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.373 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.375 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.375 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.376 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.376 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.816 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.413 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.209 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.215 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.216 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.216 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.217 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.218 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.218 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.222 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.223 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.223 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.224 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.225 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.229 I llama_model_loader: - type  f32:   37 tensors
0.00.130.230 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.805 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.382 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.892 I llm_load_vocab: special tokens cache size = 5
0.00.265.730 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.747 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.748 I llm_load_print_meta: arch             = gemma
0.00.265.748 I llm_load_print_meta: vocab type       = SPM
0.00.265.749 I llm_load_print_meta: n_vocab          = 256000
0.00.265.750 I llm_load_print_meta: n_merges         = 0
0.00.265.750 I llm_load_print_meta: vocab_only       = 0
0.00.265.750 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.751 I llm_load_print_meta: n_embd           = 2048
0.00.265.751 I llm_load_print_meta: n_layer          = 18
0.00.265.761 I llm_load_print_meta: n_head           = 8
0.00.265.762 I llm_load_print_meta: n_head_kv        = 1
0.00.265.763 I llm_load_print_meta: n_rot            = 256
0.00.265.763 I llm_load_print_meta: n_swa            = 0
0.00.265.763 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.763 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.764 I llm_load_print_meta: n_gqa            = 8
0.00.265.765 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.766 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.767 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.769 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.769 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.770 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.770 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.771 I llm_load_print_meta: n_ff             = 16384
0.00.265.771 I llm_load_print_meta: n_expert         = 0
0.00.265.772 I llm_load_print_meta: n_expert_used    = 0
0.00.265.772 I llm_load_print_meta: causal attn      = 1
0.00.265.772 I llm_load_print_meta: pooling type     = 0
0.00.265.773 I llm_load_print_meta: rope type        = 2
0.00.265.773 I llm_load_print_meta: rope scaling     = linear
0.00.265.774 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.775 I llm_load_print_meta: freq_scale_train = 1
0.00.265.775 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.775 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.776 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.776 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.776 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.776 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.777 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.777 I llm_load_print_meta: model type       = 2B
0.00.265.778 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.778 I llm_load_print_meta: model params     = 2.51 B
0.00.265.779 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.780 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.780 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.781 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.781 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.781 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.781 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.782 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.782 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.782 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.783 I llm_load_print_meta: max token length = 93
0.00.359.406 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.364.576 I llama_new_context_with_model: n_seq_max     = 1
0.00.364.581 I llama_new_context_with_model: n_ctx         = 4096
0.00.364.582 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.364.582 I llama_new_context_with_model: n_batch       = 2048
0.00.364.582 I llama_new_context_with_model: n_ubatch      = 512
0.00.364.583 I llama_new_context_with_model: flash_attn    = 0
0.00.364.585 I llama_new_context_with_model: freq_base     = 10000.0
0.00.364.586 I llama_new_context_with_model: freq_scale    = 1
0.00.364.586 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.379.354 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.379.370 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.379.472 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.775 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.380.780 I llama_new_context_with_model: graph nodes  = 601
0.00.380.780 I llama_new_context_with_model: graph splits = 1
0.00.380.782 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.461.481 I main: llama threadpool init, n_threads = 4
0.00.461.496 I 
0.00.461.566 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.461.569 I 
0.00.461.618 I sampler seed: 2591361105
0.00.461.628 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.461.631 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.461.632 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.461.632 I 
 increasities in a relationship?

**1. Emotional Intimacy:**

- Disconnectedness
- Lack of vulnerability
- Difficulty expressing emotions
- Feeling

0.02.631.844 I llama_perf_sampler_print:    sampling time =       4.72 ms /    33 runs   (    0.14 ms per token,  6991.53 tokens per second)
0.02.631.846 I llama_perf_context_print:        load time =     460.66 ms
0.02.631.847 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.631.848 I llama_perf_context_print:        eval time =    2151.30 ms /    32 runs   (   67.23 ms per token,    14.87 tokens per second)
0.02.631.849 I llama_perf_context_print:       total time =    2170.37 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.172 I build: 4216 (436f36a4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.365 I main: llama backend init
0.00.000.372 I main: load the model and apply lora adapter, if any
0.00.020.410 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.420 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.427 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.431 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.431 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.434 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.435 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.435 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.436 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.436 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.436 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.440 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.441 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.441 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.441 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.442 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.085 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.871 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.674 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.681 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.682 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.683 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.684 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.685 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.686 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.689 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.689 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.691 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.691 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.129.692 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.695 I llama_model_loader: - type  f32:   37 tensors
0.00.129.696 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.476 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.251 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.752 I llm_load_vocab: special tokens cache size = 5
0.00.262.737 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.758 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.760 I llm_load_print_meta: arch             = gemma
0.00.262.761 I llm_load_print_meta: vocab type       = SPM
0.00.262.761 I llm_load_print_meta: n_vocab          = 256000
0.00.262.762 I llm_load_print_meta: n_merges         = 0
0.00.262.762 I llm_load_print_meta: vocab_only       = 0
0.00.262.762 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.762 I llm_load_print_meta: n_embd           = 2048
0.00.262.763 I llm_load_print_meta: n_layer          = 18
0.00.262.781 I llm_load_print_meta: n_head           = 8
0.00.262.782 I llm_load_print_meta: n_head_kv        = 1
0.00.262.783 I llm_load_print_meta: n_rot            = 256
0.00.262.783 I llm_load_print_meta: n_swa            = 0
0.00.262.784 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.784 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.785 I llm_load_print_meta: n_gqa            = 8
0.00.262.786 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.787 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.789 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.791 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.792 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.793 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.793 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.794 I llm_load_print_meta: n_ff             = 16384
0.00.262.795 I llm_load_print_meta: n_expert         = 0
0.00.262.795 I llm_load_print_meta: n_expert_used    = 0
0.00.262.795 I llm_load_print_meta: causal attn      = 1
0.00.262.797 I llm_load_print_meta: pooling type     = 0
0.00.262.798 I llm_load_print_meta: rope type        = 2
0.00.262.798 I llm_load_print_meta: rope scaling     = linear
0.00.262.800 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.800 I llm_load_print_meta: freq_scale_train = 1
0.00.262.801 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.802 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.802 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.802 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.803 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.803 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.803 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.804 I llm_load_print_meta: model type       = 2B
0.00.262.805 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.806 I llm_load_print_meta: model params     = 2.51 B
0.00.262.807 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.808 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.808 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.808 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.809 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.809 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.809 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.809 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.810 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.811 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.811 I llm_load_print_meta: max token length = 93
0.00.336.696 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.336.703 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.336.704 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.336.705 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.336.705 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.336.706 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.341.938 I llama_new_context_with_model: n_seq_max     = 1
0.00.341.946 I llama_new_context_with_model: n_ctx         = 4096
0.00.341.947 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.341.947 I llama_new_context_with_model: n_batch       = 2048
0.00.341.948 I llama_new_context_with_model: n_ubatch      = 512
0.00.341.948 I llama_new_context_with_model: flash_attn    = 0
0.00.341.951 I llama_new_context_with_model: freq_base     = 10000.0
0.00.341.952 I llama_new_context_with_model: freq_scale    = 1
0.00.341.953 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.357.395 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.357.409 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.357.510 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.864 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.358.869 I llama_new_context_with_model: graph nodes  = 601
0.00.358.869 I llama_new_context_with_model: graph splits = 1
0.00.358.872 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.444.927 I main: llama threadpool init, n_threads = 4
0.00.444.943 I 
0.00.445.011 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.445.014 I 
0.00.445.054 I sampler seed: 1672081818
0.00.445.065 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.445.070 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.445.070 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.445.070 I 
 increably, defying the odds, and leaving the world in awe. [end of text]


0.01.523.566 I llama_perf_sampler_print:    sampling time =       2.25 ms /    16 runs   (    0.14 ms per token,  7120.61 tokens per second)
0.01.523.568 I llama_perf_context_print:        load time =     444.54 ms
0.01.523.569 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.523.570 I llama_perf_context_print:        eval time =    1069.47 ms /    15 runs   (   71.30 ms per token,    14.03 tokens per second)
0.01.523.571 I llama_perf_context_print:       total time =    1078.65 ms /    16 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.191 I build: 4216 (436f36a4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.389 I main: llama backend init
0.00.000.395 I main: load the model and apply lora adapter, if any
0.00.020.776 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.784 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.792 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.797 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.798 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.801 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.802 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.802 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.803 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.803 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.804 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.808 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.809 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.809 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.810 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.810 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.805 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.257 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.114 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.120 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.121 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.121 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.121 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.122 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.123 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.125 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.126 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.127 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.128 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.130.128 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.132 I llama_model_loader: - type  f32:   37 tensors
0.00.130.133 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.890 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.692 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.313 I llm_load_vocab: special tokens cache size = 5
0.00.266.394 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.410 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.411 I llm_load_print_meta: arch             = gemma
0.00.266.412 I llm_load_print_meta: vocab type       = SPM
0.00.266.414 I llm_load_print_meta: n_vocab          = 256000
0.00.266.415 I llm_load_print_meta: n_merges         = 0
0.00.266.415 I llm_load_print_meta: vocab_only       = 0
0.00.266.415 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.416 I llm_load_print_meta: n_embd           = 2048
0.00.266.416 I llm_load_print_meta: n_layer          = 18
0.00.266.427 I llm_load_print_meta: n_head           = 8
0.00.266.428 I llm_load_print_meta: n_head_kv        = 1
0.00.266.428 I llm_load_print_meta: n_rot            = 256
0.00.266.428 I llm_load_print_meta: n_swa            = 0
0.00.266.429 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.429 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.430 I llm_load_print_meta: n_gqa            = 8
0.00.266.431 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.432 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.433 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.435 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.438 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.438 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.438 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.439 I llm_load_print_meta: n_ff             = 16384
0.00.266.439 I llm_load_print_meta: n_expert         = 0
0.00.266.440 I llm_load_print_meta: n_expert_used    = 0
0.00.266.440 I llm_load_print_meta: causal attn      = 1
0.00.266.440 I llm_load_print_meta: pooling type     = 0
0.00.266.441 I llm_load_print_meta: rope type        = 2
0.00.266.441 I llm_load_print_meta: rope scaling     = linear
0.00.266.443 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.443 I llm_load_print_meta: freq_scale_train = 1
0.00.266.444 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.444 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.445 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.445 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.445 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.446 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.447 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.447 I llm_load_print_meta: model type       = 2B
0.00.266.448 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.449 I llm_load_print_meta: model params     = 2.51 B
0.00.266.450 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.450 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.451 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.451 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.452 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.452 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.452 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.452 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.453 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.454 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.454 I llm_load_print_meta: max token length = 93
0.00.337.817 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.337.824 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.342.896 I llama_new_context_with_model: n_seq_max     = 1
0.00.342.903 I llama_new_context_with_model: n_ctx         = 4096
0.00.342.903 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.342.904 I llama_new_context_with_model: n_batch       = 2048
0.00.342.904 I llama_new_context_with_model: n_ubatch      = 512
0.00.342.905 I llama_new_context_with_model: flash_attn    = 0
0.00.342.907 I llama_new_context_with_model: freq_base     = 10000.0
0.00.342.908 I llama_new_context_with_model: freq_scale    = 1
0.00.342.909 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.357.256 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.357.269 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.357.368 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.589 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.358.594 I llama_new_context_with_model: graph nodes  = 601
0.00.358.594 I llama_new_context_with_model: graph splits = 1
0.00.358.596 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.445.699 I main: llama threadpool init, n_threads = 4
0.00.445.714 I 
0.00.445.784 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.445.787 I 
0.00.445.829 I sampler seed: 371712411
0.00.445.841 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.445.852 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.445.855 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.445.855 I 
 increamental, and conditional statements are the main building blocks of **computer programming**.

**True or False?**

The given statement is **True**.



0.02.860.516 I llama_perf_sampler_print:    sampling time =       5.10 ms /    33 runs   (    0.15 ms per token,  6466.78 tokens per second)
0.02.860.518 I llama_perf_context_print:        load time =     445.29 ms
0.02.860.520 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.860.521 I llama_perf_context_print:        eval time =    2394.68 ms /    32 runs   (   74.83 ms per token,    13.36 tokens per second)
0.02.860.521 I llama_perf_context_print:       total time =    2414.82 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.110s
user	0m34.393s
sys	0m9.299s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4216 (436f36a4)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40181.20 ms
main:    total time = 40181.20 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.536 I build: 4216 (436f36a4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.726 I main: llama backend init
0.00.000.733 I main: load the model and apply lora adapter, if any
0.00.021.382 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.392 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.400 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.404 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.407 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.411 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.411 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.412 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.413 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.413 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.414 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.417 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.418 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.419 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.420 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.420 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.646 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.403 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.164 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.171 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.171 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.172 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.172 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.173 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.174 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.176 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.177 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.177 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.178 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.179 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.181 I llama_model_loader: - type  f32:   37 tensors
0.00.130.182 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.183 I llama_model_loader: - type q6_K:   19 tensors
0.00.199.577 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.237.364 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.237.896 I llm_load_vocab: special tokens cache size = 5
0.00.258.965 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.258.981 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.258.982 I llm_load_print_meta: arch             = gemma
0.00.258.982 I llm_load_print_meta: vocab type       = SPM
0.00.258.983 I llm_load_print_meta: n_vocab          = 256000
0.00.258.983 I llm_load_print_meta: n_merges         = 0
0.00.258.983 I llm_load_print_meta: vocab_only       = 0
0.00.258.984 I llm_load_print_meta: n_ctx_train      = 8192
0.00.258.984 I llm_load_print_meta: n_embd           = 2048
0.00.258.984 I llm_load_print_meta: n_layer          = 18
0.00.258.995 I llm_load_print_meta: n_head           = 8
0.00.258.996 I llm_load_print_meta: n_head_kv        = 1
0.00.258.996 I llm_load_print_meta: n_rot            = 256
0.00.258.997 I llm_load_print_meta: n_swa            = 0
0.00.258.997 I llm_load_print_meta: n_embd_head_k    = 256
0.00.258.997 I llm_load_print_meta: n_embd_head_v    = 256
0.00.258.998 I llm_load_print_meta: n_gqa            = 8
0.00.258.999 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.259.000 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.259.001 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.259.002 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.259.002 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.259.002 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.259.003 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.259.004 I llm_load_print_meta: n_ff             = 16384
0.00.259.004 I llm_load_print_meta: n_expert         = 0
0.00.259.005 I llm_load_print_meta: n_expert_used    = 0
0.00.259.005 I llm_load_print_meta: causal attn      = 1
0.00.259.005 I llm_load_print_meta: pooling type     = 0
0.00.259.006 I llm_load_print_meta: rope type        = 2
0.00.259.006 I llm_load_print_meta: rope scaling     = linear
0.00.259.007 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.259.008 I llm_load_print_meta: freq_scale_train = 1
0.00.259.008 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.259.008 I llm_load_print_meta: rope_finetuned   = unknown
0.00.259.009 I llm_load_print_meta: ssm_d_conv       = 0
0.00.259.009 I llm_load_print_meta: ssm_d_inner      = 0
0.00.259.009 I llm_load_print_meta: ssm_d_state      = 0
0.00.259.009 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.259.010 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.259.010 I llm_load_print_meta: model type       = 2B
0.00.259.011 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.259.012 I llm_load_print_meta: model params     = 2.51 B
0.00.259.013 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.259.013 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.259.014 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.259.014 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.259.014 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.259.015 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.259.015 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.259.015 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.259.016 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.259.016 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.259.017 I llm_load_print_meta: max token length = 93
0.00.318.824 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.318.831 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.318.831 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.318.832 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.318.832 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.318.833 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.323.917 I llama_new_context_with_model: n_seq_max     = 1
0.00.323.922 I llama_new_context_with_model: n_ctx         = 4096
0.00.323.923 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.323.924 I llama_new_context_with_model: n_batch       = 2048
0.00.323.924 I llama_new_context_with_model: n_ubatch      = 512
0.00.323.925 I llama_new_context_with_model: flash_attn    = 0
0.00.323.927 I llama_new_context_with_model: freq_base     = 10000.0
0.00.323.928 I llama_new_context_with_model: freq_scale    = 1
0.00.323.929 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.337.858 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.337.871 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.337.958 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.339.233 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.339.238 I llama_new_context_with_model: graph nodes  = 601
0.00.339.238 I llama_new_context_with_model: graph splits = 1
0.00.339.240 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.413.659 I main: llama threadpool init, n_threads = 4
0.00.413.676 I 
0.00.413.752 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.413.755 I 
0.00.413.800 I sampler seed: 415432520
0.00.413.810 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.413.818 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.413.821 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.413.821 I 
 effei!

I am unable to access the internet at the moment, and I am unsure of the best way to proceed.

**1. Check your

0.01.985.266 I llama_perf_sampler_print:    sampling time =       5.24 ms /    33 runs   (    0.16 ms per token,  6295.31 tokens per second)
0.01.985.268 I llama_perf_context_print:        load time =     412.91 ms
0.01.985.269 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.985.271 I llama_perf_context_print:        eval time =    1552.24 ms /    32 runs   (   48.51 ms per token,    20.62 tokens per second)
0.01.985.271 I llama_perf_context_print:       total time =    1571.61 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4216 (436f36a4)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40155.94 ms
main:    total time = 40155.94 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.540 I build: 4216 (436f36a4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.727 I main: llama backend init
0.00.000.734 I main: load the model and apply lora adapter, if any
0.00.020.807 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.823 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.829 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.830 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.833 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.835 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.835 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.836 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.836 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.837 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.840 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.840 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.841 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.842 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.842 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.812 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.185 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.939 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.945 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.946 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.946 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.947 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.948 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.949 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.950 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.951 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.954 I llama_model_loader: - type  f32:   37 tensors
0.00.129.955 I llama_model_loader: - type q4_K:  108 tensors
0.00.129.955 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.659 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.275 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.824 I llm_load_vocab: special tokens cache size = 5
0.00.263.673 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.688 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.689 I llm_load_print_meta: arch             = gemma
0.00.263.689 I llm_load_print_meta: vocab type       = SPM
0.00.263.690 I llm_load_print_meta: n_vocab          = 256000
0.00.263.690 I llm_load_print_meta: n_merges         = 0
0.00.263.690 I llm_load_print_meta: vocab_only       = 0
0.00.263.691 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.691 I llm_load_print_meta: n_embd           = 2048
0.00.263.691 I llm_load_print_meta: n_layer          = 18
0.00.263.702 I llm_load_print_meta: n_head           = 8
0.00.263.703 I llm_load_print_meta: n_head_kv        = 1
0.00.263.704 I llm_load_print_meta: n_rot            = 256
0.00.263.704 I llm_load_print_meta: n_swa            = 0
0.00.263.705 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.705 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.706 I llm_load_print_meta: n_gqa            = 8
0.00.263.707 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.709 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.710 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.712 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.713 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.713 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.714 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.715 I llm_load_print_meta: n_ff             = 16384
0.00.263.715 I llm_load_print_meta: n_expert         = 0
0.00.263.715 I llm_load_print_meta: n_expert_used    = 0
0.00.263.716 I llm_load_print_meta: causal attn      = 1
0.00.263.717 I llm_load_print_meta: pooling type     = 0
0.00.263.717 I llm_load_print_meta: rope type        = 2
0.00.263.718 I llm_load_print_meta: rope scaling     = linear
0.00.263.719 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.720 I llm_load_print_meta: freq_scale_train = 1
0.00.263.720 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.721 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.721 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.721 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.722 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.722 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.722 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.723 I llm_load_print_meta: model type       = 2B
0.00.263.723 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.263.724 I llm_load_print_meta: model params     = 2.51 B
0.00.263.725 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.263.726 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.726 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.726 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.727 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.728 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.728 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.728 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.729 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.729 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.730 I llm_load_print_meta: max token length = 93
0.00.317.860 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.323.007 I llama_new_context_with_model: n_seq_max     = 1
0.00.323.013 I llama_new_context_with_model: n_ctx         = 4096
0.00.323.013 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.323.014 I llama_new_context_with_model: n_batch       = 2048
0.00.323.014 I llama_new_context_with_model: n_ubatch      = 512
0.00.323.015 I llama_new_context_with_model: flash_attn    = 0
0.00.323.017 I llama_new_context_with_model: freq_base     = 10000.0
0.00.323.018 I llama_new_context_with_model: freq_scale    = 1
0.00.323.018 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.337.693 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.337.708 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.337.797 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.339.029 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.339.035 I llama_new_context_with_model: graph nodes  = 601
0.00.339.036 I llama_new_context_with_model: graph splits = 1
0.00.339.037 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.413.713 I main: llama threadpool init, n_threads = 4
0.00.413.729 I 
0.00.413.805 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.413.809 I 
0.00.413.854 I sampler seed: 4057936825
0.00.413.868 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.413.879 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.413.882 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.413.883 I 
 encompasses, but she does not have the ability to manipulate her own body.

What is the relationship between Curse and Cloak?

The context does not provide

0.01.976.481 I llama_perf_sampler_print:    sampling time =       4.91 ms /    33 runs   (    0.15 ms per token,  6719.61 tokens per second)
0.01.976.484 I llama_perf_context_print:        load time =     412.96 ms
0.01.976.486 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.976.487 I llama_perf_context_print:        eval time =    1543.86 ms /    32 runs   (   48.25 ms per token,    20.73 tokens per second)
0.01.976.488 I llama_perf_context_print:       total time =    1562.78 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.101s
user	10m23.757s
sys	0m6.939s
