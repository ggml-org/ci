+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.666 I build: 4216 (436f36a4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.868 I main: llama backend init
0.00.000.877 I main: load the model and apply lora adapter, if any
0.00.023.376 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.388 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.474 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.485 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.487 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.492 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.494 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.495 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.497 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.498 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.500 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.510 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.514 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.515 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.517 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.518 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.243.585 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.345.727 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.369.212 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.369.221 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.369.223 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.369.224 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.369.226 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.369.227 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.369.228 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.369.233 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.369.234 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.369.236 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.369.237 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.369.239 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.369.247 I llama_model_loader: - type  f32:   37 tensors
0.00.369.250 I llama_model_loader: - type q8_0:  127 tensors
0.00.602.776 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.660.592 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.661.519 I llm_load_vocab: special tokens cache size = 5
0.00.861.196 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.861.270 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.861.272 I llm_load_print_meta: arch             = gemma
0.00.861.272 I llm_load_print_meta: vocab type       = SPM
0.00.861.273 I llm_load_print_meta: n_vocab          = 256000
0.00.861.275 I llm_load_print_meta: n_merges         = 0
0.00.861.276 I llm_load_print_meta: vocab_only       = 0
0.00.861.276 I llm_load_print_meta: n_ctx_train      = 8192
0.00.861.277 I llm_load_print_meta: n_embd           = 2048
0.00.861.277 I llm_load_print_meta: n_layer          = 18
0.00.861.343 I llm_load_print_meta: n_head           = 8
0.00.861.350 I llm_load_print_meta: n_head_kv        = 1
0.00.861.350 I llm_load_print_meta: n_rot            = 256
0.00.861.351 I llm_load_print_meta: n_swa            = 0
0.00.861.351 I llm_load_print_meta: n_embd_head_k    = 256
0.00.861.351 I llm_load_print_meta: n_embd_head_v    = 256
0.00.861.356 I llm_load_print_meta: n_gqa            = 8
0.00.861.361 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.861.366 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.861.368 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.861.369 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.861.370 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.861.371 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.861.372 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.861.377 I llm_load_print_meta: n_ff             = 16384
0.00.861.378 I llm_load_print_meta: n_expert         = 0
0.00.861.379 I llm_load_print_meta: n_expert_used    = 0
0.00.861.379 I llm_load_print_meta: causal attn      = 1
0.00.861.380 I llm_load_print_meta: pooling type     = 0
0.00.861.380 I llm_load_print_meta: rope type        = 2
0.00.861.381 I llm_load_print_meta: rope scaling     = linear
0.00.861.383 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.861.383 I llm_load_print_meta: freq_scale_train = 1
0.00.861.384 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.861.384 I llm_load_print_meta: rope_finetuned   = unknown
0.00.861.394 I llm_load_print_meta: ssm_d_conv       = 0
0.00.861.407 I llm_load_print_meta: ssm_d_inner      = 0
0.00.861.407 I llm_load_print_meta: ssm_d_state      = 0
0.00.861.408 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.861.409 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.861.410 I llm_load_print_meta: model type       = 2B
0.00.861.412 I llm_load_print_meta: model ftype      = Q8_0
0.00.861.413 I llm_load_print_meta: model params     = 2.51 B
0.00.861.422 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.861.422 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.861.423 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.861.424 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.861.425 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.861.426 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.861.426 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.861.434 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.861.444 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.861.446 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.861.446 I llm_load_print_meta: max token length = 93
0.00.964.688 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.964.698 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.964.699 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.964.700 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.964.701 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.964.701 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.970.542 I llama_new_context_with_model: n_seq_max     = 1
0.00.970.549 I llama_new_context_with_model: n_ctx         = 4096
0.00.970.549 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.970.550 I llama_new_context_with_model: n_batch       = 2048
0.00.970.550 I llama_new_context_with_model: n_ubatch      = 512
0.00.970.551 I llama_new_context_with_model: flash_attn    = 0
0.00.970.553 I llama_new_context_with_model: freq_base     = 10000.0
0.00.970.554 I llama_new_context_with_model: freq_scale    = 1
0.00.970.554 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.985.270 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.985.310 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.985.437 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.988.000 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.988.004 I llama_new_context_with_model: graph nodes  = 601
0.00.988.004 I llama_new_context_with_model: graph splits = 1
0.00.988.027 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.598.665 I main: llama threadpool init, n_threads = 4
0.01.598.681 I 
0.01.598.801 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.598.805 I 
0.01.599.048 I sampler seed: 3978494657
0.01.599.062 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.599.081 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.599.085 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.599.085 I 
 increasements in the 18th century.

**Answer:**

I am unable to find any information regarding increasements in the 18th century

0.15.113.837 I llama_perf_sampler_print:    sampling time =      48.08 ms /    33 runs   (    1.46 ms per token,   686.31 tokens per second)
0.15.113.849 I llama_perf_context_print:        load time =    1597.70 ms
0.15.113.851 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.113.853 I llama_perf_context_print:        eval time =   13427.35 ms /    32 runs   (  419.60 ms per token,     2.38 tokens per second)
0.15.113.866 I llama_perf_context_print:       total time =   13515.19 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.667 I build: 4216 (436f36a4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.884 I main: llama backend init
0.00.000.891 I main: load the model and apply lora adapter, if any
0.00.023.239 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.332 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.346 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.348 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.354 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.356 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.357 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.358 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.359 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.361 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.367 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.377 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.378 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.380 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.381 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.939 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.328 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.954 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.962 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.964 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.965 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.966 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.968 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.969 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.974 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.975 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.977 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.978 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.352.979 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.988 I llama_model_loader: - type  f32:   37 tensors
0.00.352.991 I llama_model_loader: - type q8_0:  127 tensors
0.00.578.821 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.638.252 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.639.162 I llm_load_vocab: special tokens cache size = 5
0.00.835.348 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.835.421 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.835.422 I llm_load_print_meta: arch             = gemma
0.00.835.423 I llm_load_print_meta: vocab type       = SPM
0.00.835.424 I llm_load_print_meta: n_vocab          = 256000
0.00.835.426 I llm_load_print_meta: n_merges         = 0
0.00.835.427 I llm_load_print_meta: vocab_only       = 0
0.00.835.427 I llm_load_print_meta: n_ctx_train      = 8192
0.00.835.428 I llm_load_print_meta: n_embd           = 2048
0.00.835.428 I llm_load_print_meta: n_layer          = 18
0.00.835.493 I llm_load_print_meta: n_head           = 8
0.00.835.501 I llm_load_print_meta: n_head_kv        = 1
0.00.835.502 I llm_load_print_meta: n_rot            = 256
0.00.835.503 I llm_load_print_meta: n_swa            = 0
0.00.835.503 I llm_load_print_meta: n_embd_head_k    = 256
0.00.835.504 I llm_load_print_meta: n_embd_head_v    = 256
0.00.835.508 I llm_load_print_meta: n_gqa            = 8
0.00.835.513 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.835.518 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.835.519 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.835.521 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.835.521 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.835.522 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.835.522 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.835.528 I llm_load_print_meta: n_ff             = 16384
0.00.835.528 I llm_load_print_meta: n_expert         = 0
0.00.835.529 I llm_load_print_meta: n_expert_used    = 0
0.00.835.529 I llm_load_print_meta: causal attn      = 1
0.00.835.544 I llm_load_print_meta: pooling type     = 0
0.00.835.545 I llm_load_print_meta: rope type        = 2
0.00.835.555 I llm_load_print_meta: rope scaling     = linear
0.00.835.557 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.835.558 I llm_load_print_meta: freq_scale_train = 1
0.00.835.558 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.835.559 I llm_load_print_meta: rope_finetuned   = unknown
0.00.835.559 I llm_load_print_meta: ssm_d_conv       = 0
0.00.835.567 I llm_load_print_meta: ssm_d_inner      = 0
0.00.835.567 I llm_load_print_meta: ssm_d_state      = 0
0.00.835.568 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.835.569 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.835.570 I llm_load_print_meta: model type       = 2B
0.00.835.571 I llm_load_print_meta: model ftype      = Q8_0
0.00.835.578 I llm_load_print_meta: model params     = 2.51 B
0.00.835.587 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.835.587 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.835.588 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.835.598 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.835.599 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.835.600 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.835.603 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.835.604 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.835.611 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.835.612 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.835.613 I llm_load_print_meta: max token length = 93
0.00.934.208 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.940.198 I llama_new_context_with_model: n_seq_max     = 1
0.00.940.206 I llama_new_context_with_model: n_ctx         = 4096
0.00.940.206 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.940.207 I llama_new_context_with_model: n_batch       = 2048
0.00.940.207 I llama_new_context_with_model: n_ubatch      = 512
0.00.940.208 I llama_new_context_with_model: flash_attn    = 0
0.00.940.210 I llama_new_context_with_model: freq_base     = 10000.0
0.00.940.211 I llama_new_context_with_model: freq_scale    = 1
0.00.940.212 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.955.797 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.955.842 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.955.974 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.958.539 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.958.543 I llama_new_context_with_model: graph nodes  = 601
0.00.958.544 I llama_new_context_with_model: graph splits = 1
0.00.958.568 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.601.507 I main: llama threadpool init, n_threads = 4
0.01.601.523 I 
0.01.601.641 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.601.646 I 
0.01.601.884 I sampler seed: 2634944051
0.01.601.900 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.601.922 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.601.923 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.601.923 I 
 increably in the night, a symphony of shadows stretching across the barren landscape. A raven perched on a crag, eyes gleaming with cryptic knowledge, watched as the

0.15.074.015 I llama_perf_sampler_print:    sampling time =      48.69 ms /    33 runs   (    1.48 ms per token,   677.76 tokens per second)
0.15.074.017 I llama_perf_context_print:        load time =    1600.52 ms
0.15.074.018 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.074.045 I llama_perf_context_print:        eval time =   13384.18 ms /    32 runs   (  418.26 ms per token,     2.39 tokens per second)
0.15.074.056 I llama_perf_context_print:       total time =   13472.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.645 I build: 4216 (436f36a4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.852 I main: llama backend init
0.00.000.860 I main: load the model and apply lora adapter, if any
0.00.023.430 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.442 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.543 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.558 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.564 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.571 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.577 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.579 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.582 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.584 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.590 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.599 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.602 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.605 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.610 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.622 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.131 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.466 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.901 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.912 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.913 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.915 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.916 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.918 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.919 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.923 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.944 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.949 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.953 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.351.956 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.967 I llama_model_loader: - type  f32:   37 tensors
0.00.351.970 I llama_model_loader: - type q8_0:  127 tensors
0.00.572.867 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.633.337 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.634.238 I llm_load_vocab: special tokens cache size = 5
0.00.822.901 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.822.974 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.822.975 I llm_load_print_meta: arch             = gemma
0.00.822.975 I llm_load_print_meta: vocab type       = SPM
0.00.822.976 I llm_load_print_meta: n_vocab          = 256000
0.00.822.979 I llm_load_print_meta: n_merges         = 0
0.00.822.979 I llm_load_print_meta: vocab_only       = 0
0.00.822.980 I llm_load_print_meta: n_ctx_train      = 8192
0.00.822.980 I llm_load_print_meta: n_embd           = 2048
0.00.822.981 I llm_load_print_meta: n_layer          = 18
0.00.823.049 I llm_load_print_meta: n_head           = 8
0.00.823.058 I llm_load_print_meta: n_head_kv        = 1
0.00.823.062 I llm_load_print_meta: n_rot            = 256
0.00.823.063 I llm_load_print_meta: n_swa            = 0
0.00.823.063 I llm_load_print_meta: n_embd_head_k    = 256
0.00.823.064 I llm_load_print_meta: n_embd_head_v    = 256
0.00.823.070 I llm_load_print_meta: n_gqa            = 8
0.00.823.077 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.823.084 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.823.088 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.823.090 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.823.091 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.823.092 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.823.094 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.823.102 I llm_load_print_meta: n_ff             = 16384
0.00.823.103 I llm_load_print_meta: n_expert         = 0
0.00.823.104 I llm_load_print_meta: n_expert_used    = 0
0.00.823.104 I llm_load_print_meta: causal attn      = 1
0.00.823.105 I llm_load_print_meta: pooling type     = 0
0.00.823.106 I llm_load_print_meta: rope type        = 2
0.00.823.107 I llm_load_print_meta: rope scaling     = linear
0.00.823.109 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.823.110 I llm_load_print_meta: freq_scale_train = 1
0.00.823.111 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.823.112 I llm_load_print_meta: rope_finetuned   = unknown
0.00.823.113 I llm_load_print_meta: ssm_d_conv       = 0
0.00.823.114 I llm_load_print_meta: ssm_d_inner      = 0
0.00.823.114 I llm_load_print_meta: ssm_d_state      = 0
0.00.823.115 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.823.116 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.823.117 I llm_load_print_meta: model type       = 2B
0.00.823.118 I llm_load_print_meta: model ftype      = Q8_0
0.00.823.122 I llm_load_print_meta: model params     = 2.51 B
0.00.823.141 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.823.142 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.823.143 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.823.144 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.823.145 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.823.147 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.823.147 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.823.148 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.823.157 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.823.159 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.823.161 I llm_load_print_meta: max token length = 93
0.00.899.592 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.899.602 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.899.603 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.899.604 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.899.605 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.899.606 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.905.799 I llama_new_context_with_model: n_seq_max     = 1
0.00.905.805 I llama_new_context_with_model: n_ctx         = 4096
0.00.905.806 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.905.806 I llama_new_context_with_model: n_batch       = 2048
0.00.905.807 I llama_new_context_with_model: n_ubatch      = 512
0.00.905.807 I llama_new_context_with_model: flash_attn    = 0
0.00.905.810 I llama_new_context_with_model: freq_base     = 10000.0
0.00.905.810 I llama_new_context_with_model: freq_scale    = 1
0.00.905.811 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.920.478 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.920.518 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.920.655 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.923.225 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.923.229 I llama_new_context_with_model: graph nodes  = 601
0.00.923.229 I llama_new_context_with_model: graph splits = 1
0.00.923.255 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.533.866 I main: llama threadpool init, n_threads = 4
0.01.533.880 I 
0.01.534.009 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.534.013 I 
0.01.534.255 I sampler seed: 116318632
0.01.534.269 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.534.284 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.534.294 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.534.296 I 
 increasively.

I am unable to generate a response for this query as it contains potentially harmful and unsafe content. [end of text]


0.11.642.459 I llama_perf_sampler_print:    sampling time =      36.52 ms /    25 runs   (    1.46 ms per token,   684.63 tokens per second)
0.11.642.463 I llama_perf_context_print:        load time =    1532.91 ms
0.11.642.464 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.642.466 I llama_perf_context_print:        eval time =   10042.01 ms /    24 runs   (  418.42 ms per token,     2.39 tokens per second)
0.11.642.480 I llama_perf_context_print:       total time =   10108.60 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.747 I build: 4216 (436f36a4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.958 I main: llama backend init
0.00.000.967 I main: load the model and apply lora adapter, if any
0.00.024.749 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.760 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.859 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.871 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.874 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.881 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.888 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.890 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.893 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.895 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.898 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.907 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.912 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.915 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.918 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.920 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.569 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.817 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.610 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.619 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.620 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.622 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.623 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.625 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.626 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.631 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.632 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.634 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.635 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.352.637 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.645 I llama_model_loader: - type  f32:   37 tensors
0.00.352.648 I llama_model_loader: - type q8_0:  127 tensors
0.00.569.351 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.639.006 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.640.063 I llm_load_vocab: special tokens cache size = 5
0.00.829.898 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.829.972 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.829.973 I llm_load_print_meta: arch             = gemma
0.00.829.974 I llm_load_print_meta: vocab type       = SPM
0.00.829.975 I llm_load_print_meta: n_vocab          = 256000
0.00.829.977 I llm_load_print_meta: n_merges         = 0
0.00.829.977 I llm_load_print_meta: vocab_only       = 0
0.00.829.978 I llm_load_print_meta: n_ctx_train      = 8192
0.00.829.978 I llm_load_print_meta: n_embd           = 2048
0.00.829.979 I llm_load_print_meta: n_layer          = 18
0.00.830.043 I llm_load_print_meta: n_head           = 8
0.00.830.052 I llm_load_print_meta: n_head_kv        = 1
0.00.830.053 I llm_load_print_meta: n_rot            = 256
0.00.830.054 I llm_load_print_meta: n_swa            = 0
0.00.830.054 I llm_load_print_meta: n_embd_head_k    = 256
0.00.830.056 I llm_load_print_meta: n_embd_head_v    = 256
0.00.830.063 I llm_load_print_meta: n_gqa            = 8
0.00.830.069 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.830.076 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.830.084 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.830.086 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.830.087 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.830.088 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.830.089 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.830.096 I llm_load_print_meta: n_ff             = 16384
0.00.830.098 I llm_load_print_meta: n_expert         = 0
0.00.830.098 I llm_load_print_meta: n_expert_used    = 0
0.00.830.099 I llm_load_print_meta: causal attn      = 1
0.00.830.100 I llm_load_print_meta: pooling type     = 0
0.00.830.101 I llm_load_print_meta: rope type        = 2
0.00.830.101 I llm_load_print_meta: rope scaling     = linear
0.00.830.104 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.830.107 I llm_load_print_meta: freq_scale_train = 1
0.00.830.108 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.830.108 I llm_load_print_meta: rope_finetuned   = unknown
0.00.830.109 I llm_load_print_meta: ssm_d_conv       = 0
0.00.830.109 I llm_load_print_meta: ssm_d_inner      = 0
0.00.830.110 I llm_load_print_meta: ssm_d_state      = 0
0.00.830.111 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.830.111 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.830.112 I llm_load_print_meta: model type       = 2B
0.00.830.114 I llm_load_print_meta: model ftype      = Q8_0
0.00.830.115 I llm_load_print_meta: model params     = 2.51 B
0.00.830.127 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.830.127 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.830.128 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.830.129 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.830.133 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.830.134 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.830.134 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.830.135 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.830.144 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.830.148 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.830.148 I llm_load_print_meta: max token length = 93
0.00.902.795 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.902.805 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.910.105 I llama_new_context_with_model: n_seq_max     = 1
0.00.910.112 I llama_new_context_with_model: n_ctx         = 4096
0.00.910.112 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.910.113 I llama_new_context_with_model: n_batch       = 2048
0.00.910.113 I llama_new_context_with_model: n_ubatch      = 512
0.00.910.114 I llama_new_context_with_model: flash_attn    = 0
0.00.910.116 I llama_new_context_with_model: freq_base     = 10000.0
0.00.910.117 I llama_new_context_with_model: freq_scale    = 1
0.00.910.118 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.924.744 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.924.786 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.924.934 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.927.409 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.927.414 I llama_new_context_with_model: graph nodes  = 601
0.00.927.415 I llama_new_context_with_model: graph splits = 1
0.00.927.440 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.536.361 I main: llama threadpool init, n_threads = 4
0.01.536.378 I 
0.01.536.512 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.536.516 I 
0.01.536.753 I sampler seed: 2542981425
0.01.536.766 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.536.779 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.536.780 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.536.780 I 
 increasities that occurred in the ancient world.

**Answer:**

**The ancient world witnessed numerous remarkable and intriguing increasities that shaped the course of history.**

0.15.110.024 I llama_perf_sampler_print:    sampling time =      48.55 ms /    33 runs   (    1.47 ms per token,   679.77 tokens per second)
0.15.110.027 I llama_perf_context_print:        load time =    1535.29 ms
0.15.110.028 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.110.030 I llama_perf_context_print:        eval time =   13484.62 ms /    32 runs   (  421.39 ms per token,     2.37 tokens per second)
0.15.110.031 I llama_perf_context_print:       total time =   13573.67 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m6.535s
user	3m36.358s
sys	0m9.364s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4216 (436f36a4)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185688.90 ms
main:    total time = 185688.90 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.643 I build: 4216 (436f36a4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.846 I main: llama backend init
0.00.000.854 I main: load the model and apply lora adapter, if any
0.00.023.462 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.472 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.559 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.570 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.572 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.577 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.582 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.583 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.584 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.586 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.587 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.592 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.594 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.608 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.610 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.611 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.648 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.657 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.055 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.062 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.064 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.065 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.067 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.068 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.070 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.074 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.075 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.077 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.078 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.352.080 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.088 I llama_model_loader: - type  f32:   37 tensors
0.00.352.090 I llama_model_loader: - type q4_K:  108 tensors
0.00.352.091 I llama_model_loader: - type q6_K:   19 tensors
0.00.575.893 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.631.227 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.632.078 I llm_load_vocab: special tokens cache size = 5
0.00.834.340 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.834.406 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.834.407 I llm_load_print_meta: arch             = gemma
0.00.834.408 I llm_load_print_meta: vocab type       = SPM
0.00.834.409 I llm_load_print_meta: n_vocab          = 256000
0.00.834.411 I llm_load_print_meta: n_merges         = 0
0.00.834.411 I llm_load_print_meta: vocab_only       = 0
0.00.834.412 I llm_load_print_meta: n_ctx_train      = 8192
0.00.834.412 I llm_load_print_meta: n_embd           = 2048
0.00.834.412 I llm_load_print_meta: n_layer          = 18
0.00.834.479 I llm_load_print_meta: n_head           = 8
0.00.834.488 I llm_load_print_meta: n_head_kv        = 1
0.00.834.489 I llm_load_print_meta: n_rot            = 256
0.00.834.489 I llm_load_print_meta: n_swa            = 0
0.00.834.491 I llm_load_print_meta: n_embd_head_k    = 256
0.00.834.491 I llm_load_print_meta: n_embd_head_v    = 256
0.00.834.496 I llm_load_print_meta: n_gqa            = 8
0.00.834.500 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.834.506 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.834.511 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.834.512 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.834.512 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.834.513 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.834.513 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.834.519 I llm_load_print_meta: n_ff             = 16384
0.00.834.519 I llm_load_print_meta: n_expert         = 0
0.00.834.520 I llm_load_print_meta: n_expert_used    = 0
0.00.834.521 I llm_load_print_meta: causal attn      = 1
0.00.834.521 I llm_load_print_meta: pooling type     = 0
0.00.834.521 I llm_load_print_meta: rope type        = 2
0.00.834.522 I llm_load_print_meta: rope scaling     = linear
0.00.834.524 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.834.525 I llm_load_print_meta: freq_scale_train = 1
0.00.834.525 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.834.526 I llm_load_print_meta: rope_finetuned   = unknown
0.00.834.526 I llm_load_print_meta: ssm_d_conv       = 0
0.00.834.527 I llm_load_print_meta: ssm_d_inner      = 0
0.00.834.527 I llm_load_print_meta: ssm_d_state      = 0
0.00.834.528 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.834.528 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.834.529 I llm_load_print_meta: model type       = 2B
0.00.834.530 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.834.532 I llm_load_print_meta: model params     = 2.51 B
0.00.834.540 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.834.541 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.834.542 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.834.542 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.834.543 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.834.544 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.834.544 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.834.545 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.834.551 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.834.553 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.834.553 I llm_load_print_meta: max token length = 93
0.00.896.961 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.896.974 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.896.975 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.896.976 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.896.977 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.896.977 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.902.871 I llama_new_context_with_model: n_seq_max     = 1
0.00.902.879 I llama_new_context_with_model: n_ctx         = 4096
0.00.902.879 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.902.880 I llama_new_context_with_model: n_batch       = 2048
0.00.902.880 I llama_new_context_with_model: n_ubatch      = 512
0.00.902.881 I llama_new_context_with_model: flash_attn    = 0
0.00.902.884 I llama_new_context_with_model: freq_base     = 10000.0
0.00.902.885 I llama_new_context_with_model: freq_scale    = 1
0.00.902.886 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.918.478 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.918.520 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.918.650 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.921.217 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.921.221 I llama_new_context_with_model: graph nodes  = 601
0.00.921.221 I llama_new_context_with_model: graph splits = 1
0.00.921.246 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.504.594 I main: llama threadpool init, n_threads = 4
0.01.504.612 I 
0.01.504.727 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.504.731 I 
0.01.504.964 I sampler seed: 848581256
0.01.504.978 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.504.990 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.504.990 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.504.991 I 
 increasities and other forms of bullying that target students based on their personal characteristics.

These experiences can have significant and long-lasting negative effects on the victim'

0.12.625.332 I llama_perf_sampler_print:    sampling time =      47.98 ms /    33 runs   (    1.45 ms per token,   687.80 tokens per second)
0.12.625.336 I llama_perf_context_print:        load time =    1503.65 ms
0.12.625.350 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.625.353 I llama_perf_context_print:        eval time =   11032.69 ms /    32 runs   (  344.77 ms per token,     2.90 tokens per second)
0.12.625.354 I llama_perf_context_print:       total time =   11120.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4216 (436f36a4)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185541.12 ms
main:    total time = 185541.12 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.693 I build: 4216 (436f36a4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.894 I main: llama backend init
0.00.000.902 I main: load the model and apply lora adapter, if any
0.00.023.242 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.352 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.369 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.374 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.381 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.383 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.385 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.387 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.388 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.389 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.397 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.401 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.402 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.404 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.405 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.613 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.709 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.193 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.202 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.203 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.205 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.206 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.207 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.209 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.213 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.214 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.222 I llama_model_loader: - type  f32:   37 tensors
0.00.350.225 I llama_model_loader: - type q4_K:  108 tensors
0.00.350.225 I llama_model_loader: - type q6_K:   19 tensors
0.00.570.797 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.629.234 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.630.107 I llm_load_vocab: special tokens cache size = 5
0.00.828.004 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.828.075 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.828.077 I llm_load_print_meta: arch             = gemma
0.00.828.077 I llm_load_print_meta: vocab type       = SPM
0.00.828.078 I llm_load_print_meta: n_vocab          = 256000
0.00.828.080 I llm_load_print_meta: n_merges         = 0
0.00.828.081 I llm_load_print_meta: vocab_only       = 0
0.00.828.081 I llm_load_print_meta: n_ctx_train      = 8192
0.00.828.082 I llm_load_print_meta: n_embd           = 2048
0.00.828.082 I llm_load_print_meta: n_layer          = 18
0.00.828.148 I llm_load_print_meta: n_head           = 8
0.00.828.155 I llm_load_print_meta: n_head_kv        = 1
0.00.828.156 I llm_load_print_meta: n_rot            = 256
0.00.828.157 I llm_load_print_meta: n_swa            = 0
0.00.828.157 I llm_load_print_meta: n_embd_head_k    = 256
0.00.828.158 I llm_load_print_meta: n_embd_head_v    = 256
0.00.828.162 I llm_load_print_meta: n_gqa            = 8
0.00.828.167 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.828.172 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.828.173 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.828.175 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.828.175 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.828.175 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.828.176 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.828.181 I llm_load_print_meta: n_ff             = 16384
0.00.828.181 I llm_load_print_meta: n_expert         = 0
0.00.828.182 I llm_load_print_meta: n_expert_used    = 0
0.00.828.182 I llm_load_print_meta: causal attn      = 1
0.00.828.183 I llm_load_print_meta: pooling type     = 0
0.00.828.183 I llm_load_print_meta: rope type        = 2
0.00.828.183 I llm_load_print_meta: rope scaling     = linear
0.00.828.185 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.828.185 I llm_load_print_meta: freq_scale_train = 1
0.00.828.186 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.828.187 I llm_load_print_meta: rope_finetuned   = unknown
0.00.828.187 I llm_load_print_meta: ssm_d_conv       = 0
0.00.828.187 I llm_load_print_meta: ssm_d_inner      = 0
0.00.828.188 I llm_load_print_meta: ssm_d_state      = 0
0.00.828.189 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.828.189 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.828.190 I llm_load_print_meta: model type       = 2B
0.00.828.191 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.828.192 I llm_load_print_meta: model params     = 2.51 B
0.00.828.213 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.828.214 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.828.219 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.828.220 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.828.220 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.828.221 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.828.233 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.828.234 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.828.241 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.828.243 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.828.243 I llm_load_print_meta: max token length = 93
0.00.885.590 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.891.387 I llama_new_context_with_model: n_seq_max     = 1
0.00.891.393 I llama_new_context_with_model: n_ctx         = 4096
0.00.891.394 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.891.394 I llama_new_context_with_model: n_batch       = 2048
0.00.891.395 I llama_new_context_with_model: n_ubatch      = 512
0.00.891.395 I llama_new_context_with_model: flash_attn    = 0
0.00.891.398 I llama_new_context_with_model: freq_base     = 10000.0
0.00.891.399 I llama_new_context_with_model: freq_scale    = 1
0.00.891.399 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.906.665 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.906.709 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.906.840 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.909.390 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.909.393 I llama_new_context_with_model: graph nodes  = 601
0.00.909.394 I llama_new_context_with_model: graph splits = 1
0.00.909.420 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.494.569 I main: llama threadpool init, n_threads = 4
0.01.494.586 I 
0.01.494.705 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.494.710 I 
0.01.494.944 I sampler seed: 3313326500
0.01.494.958 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.494.970 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.494.970 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.494.971 I 
 maneuvously.

I'm not sure if I should use the word "unfavorable" or "adverse."

**Unfavorable** seems more

0.12.616.841 I llama_perf_sampler_print:    sampling time =      48.17 ms /    33 runs   (    1.46 ms per token,   685.12 tokens per second)
0.12.616.864 I llama_perf_context_print:        load time =    1493.56 ms
0.12.616.866 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.616.868 I llama_perf_context_print:        eval time =   11034.63 ms /    32 runs   (  344.83 ms per token,     2.90 tokens per second)
0.12.616.869 I llama_perf_context_print:       total time =   11122.28 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m39.356s
user	46m44.173s
sys	0m6.304s
