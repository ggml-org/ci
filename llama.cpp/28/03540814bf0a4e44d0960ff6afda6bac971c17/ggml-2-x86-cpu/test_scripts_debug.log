+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.695 I build: 4264 (28035408) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.898 I main: llama backend init
0.00.000.907 I main: load the model and apply lora adapter, if any
0.00.023.887 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.900 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.997 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.011 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.012 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.020 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.024 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.025 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.027 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.029 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.030 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.038 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.040 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.050 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.051 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.053 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.355 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.853 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.034 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.044 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.045 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.047 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.048 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.049 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.051 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.055 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.056 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.058 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.059 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.350.061 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.069 I llama_model_loader: - type  f32:   37 tensors
0.00.350.071 I llama_model_loader: - type q8_0:  127 tensors
0.00.627.265 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.754.112 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.755.200 I llm_load_vocab: special tokens cache size = 5
0.00.958.467 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.958.542 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.958.543 I llm_load_print_meta: arch             = gemma
0.00.958.543 I llm_load_print_meta: vocab type       = SPM
0.00.958.544 I llm_load_print_meta: n_vocab          = 256000
0.00.958.546 I llm_load_print_meta: n_merges         = 0
0.00.958.547 I llm_load_print_meta: vocab_only       = 0
0.00.958.547 I llm_load_print_meta: n_ctx_train      = 8192
0.00.958.548 I llm_load_print_meta: n_embd           = 2048
0.00.958.548 I llm_load_print_meta: n_layer          = 18
0.00.958.612 I llm_load_print_meta: n_head           = 8
0.00.958.620 I llm_load_print_meta: n_head_kv        = 1
0.00.958.621 I llm_load_print_meta: n_rot            = 256
0.00.958.622 I llm_load_print_meta: n_swa            = 0
0.00.958.623 I llm_load_print_meta: n_embd_head_k    = 256
0.00.958.624 I llm_load_print_meta: n_embd_head_v    = 256
0.00.958.629 I llm_load_print_meta: n_gqa            = 8
0.00.958.634 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.958.639 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.958.641 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.958.642 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.958.643 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.958.643 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.958.648 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.958.653 I llm_load_print_meta: n_ff             = 16384
0.00.958.654 I llm_load_print_meta: n_expert         = 0
0.00.958.654 I llm_load_print_meta: n_expert_used    = 0
0.00.958.655 I llm_load_print_meta: causal attn      = 1
0.00.958.655 I llm_load_print_meta: pooling type     = 0
0.00.958.655 I llm_load_print_meta: rope type        = 2
0.00.958.657 I llm_load_print_meta: rope scaling     = linear
0.00.958.658 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.958.659 I llm_load_print_meta: freq_scale_train = 1
0.00.958.660 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.958.660 I llm_load_print_meta: rope_finetuned   = unknown
0.00.958.660 I llm_load_print_meta: ssm_d_conv       = 0
0.00.958.661 I llm_load_print_meta: ssm_d_inner      = 0
0.00.958.662 I llm_load_print_meta: ssm_d_state      = 0
0.00.958.662 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.958.662 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.958.663 I llm_load_print_meta: model type       = 2B
0.00.958.664 I llm_load_print_meta: model ftype      = Q8_0
0.00.958.665 I llm_load_print_meta: model params     = 2.51 B
0.00.958.666 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.958.667 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.958.667 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.958.671 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.958.671 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.958.672 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.958.672 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.958.673 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.958.679 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.958.681 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.958.682 I llm_load_print_meta: max token length = 93
0.01.061.659 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.061.670 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.061.671 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.061.672 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.061.672 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.061.673 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.067.525 I llama_new_context_with_model: n_seq_max     = 1
0.01.067.533 I llama_new_context_with_model: n_ctx         = 4096
0.01.067.533 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.067.534 I llama_new_context_with_model: n_batch       = 2048
0.01.067.534 I llama_new_context_with_model: n_ubatch      = 512
0.01.067.534 I llama_new_context_with_model: flash_attn    = 0
0.01.067.537 I llama_new_context_with_model: freq_base     = 10000.0
0.01.067.538 I llama_new_context_with_model: freq_scale    = 1
0.01.067.539 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.082.691 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.082.732 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.082.887 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.085.484 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.085.489 I llama_new_context_with_model: graph nodes  = 601
0.01.085.489 I llama_new_context_with_model: graph splits = 1
0.01.085.513 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.695.243 I main: llama threadpool init, n_threads = 4
0.01.695.260 I 
0.01.695.379 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.695.383 I 
0.01.695.630 I sampler seed: 2870265233
0.01.695.643 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.695.654 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.695.655 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.695.655 I 
 increadibly. [end of text]


0.03.403.674 I llama_perf_sampler_print:    sampling time =       6.27 ms /     5 runs   (    1.25 ms per token,   797.07 tokens per second)
0.03.403.677 I llama_perf_context_print:        load time =    1694.23 ms
0.03.403.678 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.403.693 I llama_perf_context_print:        eval time =    1695.72 ms /     4 runs   (  423.93 ms per token,     2.36 tokens per second)
0.03.403.694 I llama_perf_context_print:       total time =    1708.44 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.658 I build: 4264 (28035408) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.861 I main: llama backend init
0.00.000.869 I main: load the model and apply lora adapter, if any
0.00.023.492 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.593 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.607 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.612 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.618 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.623 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.624 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.626 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.628 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.629 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.639 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.643 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.645 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.646 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.647 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.029 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.532 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.721 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.730 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.731 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.732 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.733 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.735 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.736 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.740 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.742 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.743 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.744 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.350.747 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.755 I llama_model_loader: - type  f32:   37 tensors
0.00.350.758 I llama_model_loader: - type q8_0:  127 tensors
0.00.634.161 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.760.887 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.761.871 I llm_load_vocab: special tokens cache size = 5
0.00.962.309 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.962.385 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.962.387 I llm_load_print_meta: arch             = gemma
0.00.962.387 I llm_load_print_meta: vocab type       = SPM
0.00.962.388 I llm_load_print_meta: n_vocab          = 256000
0.00.962.390 I llm_load_print_meta: n_merges         = 0
0.00.962.391 I llm_load_print_meta: vocab_only       = 0
0.00.962.391 I llm_load_print_meta: n_ctx_train      = 8192
0.00.962.392 I llm_load_print_meta: n_embd           = 2048
0.00.962.392 I llm_load_print_meta: n_layer          = 18
0.00.962.456 I llm_load_print_meta: n_head           = 8
0.00.962.463 I llm_load_print_meta: n_head_kv        = 1
0.00.962.463 I llm_load_print_meta: n_rot            = 256
0.00.962.464 I llm_load_print_meta: n_swa            = 0
0.00.962.464 I llm_load_print_meta: n_embd_head_k    = 256
0.00.962.465 I llm_load_print_meta: n_embd_head_v    = 256
0.00.962.469 I llm_load_print_meta: n_gqa            = 8
0.00.962.474 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.962.479 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.962.481 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.962.482 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.962.483 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.962.483 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.962.483 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.962.489 I llm_load_print_meta: n_ff             = 16384
0.00.962.489 I llm_load_print_meta: n_expert         = 0
0.00.962.490 I llm_load_print_meta: n_expert_used    = 0
0.00.962.490 I llm_load_print_meta: causal attn      = 1
0.00.962.490 I llm_load_print_meta: pooling type     = 0
0.00.962.491 I llm_load_print_meta: rope type        = 2
0.00.962.491 I llm_load_print_meta: rope scaling     = linear
0.00.962.492 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.962.493 I llm_load_print_meta: freq_scale_train = 1
0.00.962.494 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.962.494 I llm_load_print_meta: rope_finetuned   = unknown
0.00.962.494 I llm_load_print_meta: ssm_d_conv       = 0
0.00.962.495 I llm_load_print_meta: ssm_d_inner      = 0
0.00.962.495 I llm_load_print_meta: ssm_d_state      = 0
0.00.962.495 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.962.496 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.962.496 I llm_load_print_meta: model type       = 2B
0.00.962.497 I llm_load_print_meta: model ftype      = Q8_0
0.00.962.498 I llm_load_print_meta: model params     = 2.51 B
0.00.962.498 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.962.499 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.962.499 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.962.529 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.962.530 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.962.536 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.962.537 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.962.538 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.962.545 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.962.547 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.962.547 I llm_load_print_meta: max token length = 93
0.01.057.967 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.064.076 I llama_new_context_with_model: n_seq_max     = 1
0.01.064.084 I llama_new_context_with_model: n_ctx         = 4096
0.01.064.085 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.064.085 I llama_new_context_with_model: n_batch       = 2048
0.01.064.086 I llama_new_context_with_model: n_ubatch      = 512
0.01.064.086 I llama_new_context_with_model: flash_attn    = 0
0.01.064.090 I llama_new_context_with_model: freq_base     = 10000.0
0.01.064.091 I llama_new_context_with_model: freq_scale    = 1
0.01.064.091 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.080.132 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.080.178 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.080.303 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.082.920 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.082.924 I llama_new_context_with_model: graph nodes  = 601
0.01.082.925 I llama_new_context_with_model: graph splits = 1
0.01.082.949 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.694.512 I main: llama threadpool init, n_threads = 4
0.01.694.529 I 
0.01.694.653 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.694.657 I 
0.01.694.906 I sampler seed: 496403269
0.01.694.920 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.694.930 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.694.934 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.694.934 I 
 increasities, and the rise of social media.

The influence of social media on modern society is undeniable. It has transformed the way we communicate, learn,

0.15.270.001 I llama_perf_sampler_print:    sampling time =      49.27 ms /    33 runs   (    1.49 ms per token,   669.77 tokens per second)
0.15.270.005 I llama_perf_context_print:        load time =    1693.53 ms
0.15.270.007 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.270.008 I llama_perf_context_print:        eval time =   13485.76 ms /    32 runs   (  421.43 ms per token,     2.37 tokens per second)
0.15.270.010 I llama_perf_context_print:       total time =   13575.50 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.660 I build: 4264 (28035408) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.869 I main: llama backend init
0.00.000.876 I main: load the model and apply lora adapter, if any
0.00.023.554 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.565 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.656 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.670 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.672 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.677 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.679 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.680 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.682 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.683 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.684 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.694 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.698 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.700 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.701 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.702 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.925 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.761 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.062 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.072 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.074 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.075 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.076 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.078 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.079 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.083 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.085 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.086 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.353.087 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.353.089 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.353.098 I llama_model_loader: - type  f32:   37 tensors
0.00.353.101 I llama_model_loader: - type q8_0:  127 tensors
0.00.612.652 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.743.990 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.745.023 I llm_load_vocab: special tokens cache size = 5
0.00.936.023 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.936.104 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.936.105 I llm_load_print_meta: arch             = gemma
0.00.936.105 I llm_load_print_meta: vocab type       = SPM
0.00.936.107 I llm_load_print_meta: n_vocab          = 256000
0.00.936.109 I llm_load_print_meta: n_merges         = 0
0.00.936.110 I llm_load_print_meta: vocab_only       = 0
0.00.936.110 I llm_load_print_meta: n_ctx_train      = 8192
0.00.936.110 I llm_load_print_meta: n_embd           = 2048
0.00.936.111 I llm_load_print_meta: n_layer          = 18
0.00.936.177 I llm_load_print_meta: n_head           = 8
0.00.936.184 I llm_load_print_meta: n_head_kv        = 1
0.00.936.184 I llm_load_print_meta: n_rot            = 256
0.00.936.185 I llm_load_print_meta: n_swa            = 0
0.00.936.185 I llm_load_print_meta: n_embd_head_k    = 256
0.00.936.185 I llm_load_print_meta: n_embd_head_v    = 256
0.00.936.190 I llm_load_print_meta: n_gqa            = 8
0.00.936.197 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.936.202 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.936.204 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.936.205 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.936.205 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.936.206 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.936.206 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.936.211 I llm_load_print_meta: n_ff             = 16384
0.00.936.211 I llm_load_print_meta: n_expert         = 0
0.00.936.212 I llm_load_print_meta: n_expert_used    = 0
0.00.936.212 I llm_load_print_meta: causal attn      = 1
0.00.936.212 I llm_load_print_meta: pooling type     = 0
0.00.936.212 I llm_load_print_meta: rope type        = 2
0.00.936.213 I llm_load_print_meta: rope scaling     = linear
0.00.936.214 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.936.215 I llm_load_print_meta: freq_scale_train = 1
0.00.936.215 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.936.216 I llm_load_print_meta: rope_finetuned   = unknown
0.00.936.216 I llm_load_print_meta: ssm_d_conv       = 0
0.00.936.217 I llm_load_print_meta: ssm_d_inner      = 0
0.00.936.217 I llm_load_print_meta: ssm_d_state      = 0
0.00.936.217 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.936.218 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.936.218 I llm_load_print_meta: model type       = 2B
0.00.936.219 I llm_load_print_meta: model ftype      = Q8_0
0.00.936.220 I llm_load_print_meta: model params     = 2.51 B
0.00.936.221 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.936.221 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.936.222 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.936.222 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.936.235 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.936.236 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.936.255 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.936.256 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.936.269 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.936.272 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.936.272 I llm_load_print_meta: max token length = 93
0.01.013.199 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.013.209 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.013.210 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.013.211 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.013.211 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.013.212 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.019.264 I llama_new_context_with_model: n_seq_max     = 1
0.01.019.273 I llama_new_context_with_model: n_ctx         = 4096
0.01.019.273 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.019.274 I llama_new_context_with_model: n_batch       = 2048
0.01.019.274 I llama_new_context_with_model: n_ubatch      = 512
0.01.019.275 I llama_new_context_with_model: flash_attn    = 0
0.01.019.279 I llama_new_context_with_model: freq_base     = 10000.0
0.01.019.280 I llama_new_context_with_model: freq_scale    = 1
0.01.019.280 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.034.638 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.034.681 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.034.804 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.037.452 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.037.456 I llama_new_context_with_model: graph nodes  = 601
0.01.037.456 I llama_new_context_with_model: graph splits = 1
0.01.037.479 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.682.196 I main: llama threadpool init, n_threads = 4
0.01.682.212 I 
0.01.682.331 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.682.335 I 
0.01.682.576 I sampler seed: 4180074274
0.01.682.590 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.682.599 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.682.603 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.682.603 I 
 increasities. It is necessary to provide evidence to support your claims.

**Argument:**

The increasing prevalence of social media and digital communication platforms has had a

0.15.312.646 I llama_perf_sampler_print:    sampling time =      49.46 ms /    33 runs   (    1.50 ms per token,   667.26 tokens per second)
0.15.312.661 I llama_perf_context_print:        load time =    1681.22 ms
0.15.312.663 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.312.665 I llama_perf_context_print:        eval time =   13540.10 ms /    32 runs   (  423.13 ms per token,     2.36 tokens per second)
0.15.312.667 I llama_perf_context_print:       total time =   13630.46 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 4264 (28035408) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.830 I main: llama backend init
0.00.000.837 I main: load the model and apply lora adapter, if any
0.00.023.207 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.219 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.309 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.320 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.324 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.331 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.335 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.336 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.338 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.339 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.341 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.351 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.355 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.356 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.357 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.359 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.406 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.771 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.063 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.075 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.076 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.077 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.079 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.080 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.082 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.086 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.087 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.089 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.090 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.352.093 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.103 I llama_model_loader: - type  f32:   37 tensors
0.00.352.106 I llama_model_loader: - type q8_0:  127 tensors
0.00.625.739 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.755.310 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.756.306 I llm_load_vocab: special tokens cache size = 5
0.00.946.148 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.946.223 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.946.224 I llm_load_print_meta: arch             = gemma
0.00.946.225 I llm_load_print_meta: vocab type       = SPM
0.00.946.227 I llm_load_print_meta: n_vocab          = 256000
0.00.946.229 I llm_load_print_meta: n_merges         = 0
0.00.946.229 I llm_load_print_meta: vocab_only       = 0
0.00.946.230 I llm_load_print_meta: n_ctx_train      = 8192
0.00.946.230 I llm_load_print_meta: n_embd           = 2048
0.00.946.231 I llm_load_print_meta: n_layer          = 18
0.00.946.298 I llm_load_print_meta: n_head           = 8
0.00.946.305 I llm_load_print_meta: n_head_kv        = 1
0.00.946.306 I llm_load_print_meta: n_rot            = 256
0.00.946.306 I llm_load_print_meta: n_swa            = 0
0.00.946.307 I llm_load_print_meta: n_embd_head_k    = 256
0.00.946.307 I llm_load_print_meta: n_embd_head_v    = 256
0.00.946.311 I llm_load_print_meta: n_gqa            = 8
0.00.946.316 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.946.321 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.946.323 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.946.326 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.946.327 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.946.351 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.946.356 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.946.361 I llm_load_print_meta: n_ff             = 16384
0.00.946.362 I llm_load_print_meta: n_expert         = 0
0.00.946.365 I llm_load_print_meta: n_expert_used    = 0
0.00.946.365 I llm_load_print_meta: causal attn      = 1
0.00.946.366 I llm_load_print_meta: pooling type     = 0
0.00.946.366 I llm_load_print_meta: rope type        = 2
0.00.946.367 I llm_load_print_meta: rope scaling     = linear
0.00.946.368 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.946.369 I llm_load_print_meta: freq_scale_train = 1
0.00.946.369 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.946.369 I llm_load_print_meta: rope_finetuned   = unknown
0.00.946.370 I llm_load_print_meta: ssm_d_conv       = 0
0.00.946.370 I llm_load_print_meta: ssm_d_inner      = 0
0.00.946.370 I llm_load_print_meta: ssm_d_state      = 0
0.00.946.371 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.946.371 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.946.372 I llm_load_print_meta: model type       = 2B
0.00.946.373 I llm_load_print_meta: model ftype      = Q8_0
0.00.946.373 I llm_load_print_meta: model params     = 2.51 B
0.00.946.374 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.946.375 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.946.376 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.946.378 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.946.379 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.946.379 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.946.380 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.946.380 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.946.394 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.946.396 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.946.396 I llm_load_print_meta: max token length = 93
0.01.019.925 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.019.938 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.025.756 I llama_new_context_with_model: n_seq_max     = 1
0.01.025.762 I llama_new_context_with_model: n_ctx         = 4096
0.01.025.762 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.025.763 I llama_new_context_with_model: n_batch       = 2048
0.01.025.763 I llama_new_context_with_model: n_ubatch      = 512
0.01.025.764 I llama_new_context_with_model: flash_attn    = 0
0.01.025.766 I llama_new_context_with_model: freq_base     = 10000.0
0.01.025.767 I llama_new_context_with_model: freq_scale    = 1
0.01.025.768 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.040.429 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.040.470 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.040.591 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.043.205 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.043.209 I llama_new_context_with_model: graph nodes  = 601
0.01.043.210 I llama_new_context_with_model: graph splits = 1
0.01.043.233 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.654.321 I main: llama threadpool init, n_threads = 4
0.01.654.337 I 
0.01.654.459 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.654.464 I 
0.01.654.705 I sampler seed: 3842051681
0.01.654.719 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.654.728 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.654.731 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.654.732 I 
 increasities, but she claims it's just a phase.

**Analysis:**

* The narrator's perspective suggests an emotional vulnerability.
* The

0.15.392.402 I llama_perf_sampler_print:    sampling time =      49.33 ms /    33 runs   (    1.49 ms per token,   668.99 tokens per second)
0.15.392.408 I llama_perf_context_print:        load time =    1653.39 ms
0.15.392.409 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.392.411 I llama_perf_context_print:        eval time =   13648.86 ms /    32 runs   (  426.53 ms per token,     2.34 tokens per second)
0.15.392.412 I llama_perf_context_print:       total time =   13738.09 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m59.106s
user	3m4.871s
sys	0m9.413s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4264 (28035408)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 189069.99 ms
main:    total time = 189069.99 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.697 I build: 4264 (28035408) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.900 I main: llama backend init
0.00.000.909 I main: load the model and apply lora adapter, if any
0.00.023.677 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.689 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.792 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.805 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.807 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.815 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.819 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.820 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.822 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.823 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.824 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.836 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.839 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.840 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.842 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.843 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.904 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.557 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.845 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.857 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.859 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.860 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.861 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.863 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.864 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.869 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.886 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.891 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.893 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.350.895 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.905 I llama_model_loader: - type  f32:   37 tensors
0.00.350.907 I llama_model_loader: - type q4_K:  108 tensors
0.00.350.908 I llama_model_loader: - type q6_K:   19 tensors
0.00.632.081 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.762.555 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.763.591 I llm_load_vocab: special tokens cache size = 5
0.00.965.519 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.965.599 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.965.600 I llm_load_print_meta: arch             = gemma
0.00.965.602 I llm_load_print_meta: vocab type       = SPM
0.00.965.603 I llm_load_print_meta: n_vocab          = 256000
0.00.965.605 I llm_load_print_meta: n_merges         = 0
0.00.965.606 I llm_load_print_meta: vocab_only       = 0
0.00.965.606 I llm_load_print_meta: n_ctx_train      = 8192
0.00.965.606 I llm_load_print_meta: n_embd           = 2048
0.00.965.607 I llm_load_print_meta: n_layer          = 18
0.00.965.673 I llm_load_print_meta: n_head           = 8
0.00.965.682 I llm_load_print_meta: n_head_kv        = 1
0.00.965.682 I llm_load_print_meta: n_rot            = 256
0.00.965.683 I llm_load_print_meta: n_swa            = 0
0.00.965.683 I llm_load_print_meta: n_embd_head_k    = 256
0.00.965.683 I llm_load_print_meta: n_embd_head_v    = 256
0.00.965.688 I llm_load_print_meta: n_gqa            = 8
0.00.965.693 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.965.698 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.965.699 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.965.700 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.965.701 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.965.701 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.965.701 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.965.707 I llm_load_print_meta: n_ff             = 16384
0.00.965.707 I llm_load_print_meta: n_expert         = 0
0.00.965.707 I llm_load_print_meta: n_expert_used    = 0
0.00.965.708 I llm_load_print_meta: causal attn      = 1
0.00.965.708 I llm_load_print_meta: pooling type     = 0
0.00.965.708 I llm_load_print_meta: rope type        = 2
0.00.965.709 I llm_load_print_meta: rope scaling     = linear
0.00.965.710 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.965.711 I llm_load_print_meta: freq_scale_train = 1
0.00.965.711 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.965.712 I llm_load_print_meta: rope_finetuned   = unknown
0.00.965.712 I llm_load_print_meta: ssm_d_conv       = 0
0.00.965.712 I llm_load_print_meta: ssm_d_inner      = 0
0.00.965.713 I llm_load_print_meta: ssm_d_state      = 0
0.00.965.713 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.965.713 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.965.714 I llm_load_print_meta: model type       = 2B
0.00.965.715 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.965.716 I llm_load_print_meta: model params     = 2.51 B
0.00.965.716 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.965.717 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.965.717 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.965.718 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.965.718 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.965.719 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.965.719 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.965.719 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.965.726 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.965.727 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.965.727 I llm_load_print_meta: max token length = 93
0.01.027.108 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.027.120 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.027.120 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.027.121 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.027.122 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.027.123 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.033.069 I llama_new_context_with_model: n_seq_max     = 1
0.01.033.078 I llama_new_context_with_model: n_ctx         = 4096
0.01.033.078 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.033.078 I llama_new_context_with_model: n_batch       = 2048
0.01.033.079 I llama_new_context_with_model: n_ubatch      = 512
0.01.033.079 I llama_new_context_with_model: flash_attn    = 0
0.01.033.083 I llama_new_context_with_model: freq_base     = 10000.0
0.01.033.083 I llama_new_context_with_model: freq_scale    = 1
0.01.033.084 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.048.688 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.048.731 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.048.851 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.051.446 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.051.450 I llama_new_context_with_model: graph nodes  = 601
0.01.051.450 I llama_new_context_with_model: graph splits = 1
0.01.051.476 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.638.237 I main: llama threadpool init, n_threads = 4
0.01.638.253 I 
0.01.638.373 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.638.377 I 
0.01.638.618 I sampler seed: 3000848284
0.01.638.632 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.638.645 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.638.646 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.638.646 I 
 maneutruing the following sentence:

The man who was once a humble lawyer, now a renowned statesman, exemplifies the transformative power of perseverance and unwavering dedication.

0.12.766.187 I llama_perf_sampler_print:    sampling time =      49.63 ms /    33 runs   (    1.50 ms per token,   664.95 tokens per second)
0.12.766.190 I llama_perf_context_print:        load time =    1637.21 ms
0.12.766.191 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.766.216 I llama_perf_context_print:        eval time =   11037.86 ms /    32 runs   (  344.93 ms per token,     2.90 tokens per second)
0.12.766.218 I llama_perf_context_print:       total time =   11127.96 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4264 (28035408)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185713.63 ms
main:    total time = 185713.63 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.638 I build: 4264 (28035408) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.840 I main: llama backend init
0.00.000.848 I main: load the model and apply lora adapter, if any
0.00.023.300 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.401 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.415 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.417 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.425 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.429 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.431 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.432 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.433 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.434 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.443 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.445 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.446 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.447 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.449 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.474 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.975 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.245 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.255 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.256 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.257 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.259 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.260 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.262 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.266 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.267 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.276 I llama_model_loader: - type  f32:   37 tensors
0.00.350.278 I llama_model_loader: - type q4_K:  108 tensors
0.00.350.279 I llama_model_loader: - type q6_K:   19 tensors
0.00.618.223 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.746.738 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.747.810 I llm_load_vocab: special tokens cache size = 5
0.00.935.546 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.935.624 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.935.626 I llm_load_print_meta: arch             = gemma
0.00.935.626 I llm_load_print_meta: vocab type       = SPM
0.00.935.627 I llm_load_print_meta: n_vocab          = 256000
0.00.935.630 I llm_load_print_meta: n_merges         = 0
0.00.935.630 I llm_load_print_meta: vocab_only       = 0
0.00.935.631 I llm_load_print_meta: n_ctx_train      = 8192
0.00.935.631 I llm_load_print_meta: n_embd           = 2048
0.00.935.632 I llm_load_print_meta: n_layer          = 18
0.00.935.699 I llm_load_print_meta: n_head           = 8
0.00.935.706 I llm_load_print_meta: n_head_kv        = 1
0.00.935.707 I llm_load_print_meta: n_rot            = 256
0.00.935.707 I llm_load_print_meta: n_swa            = 0
0.00.935.707 I llm_load_print_meta: n_embd_head_k    = 256
0.00.935.708 I llm_load_print_meta: n_embd_head_v    = 256
0.00.935.712 I llm_load_print_meta: n_gqa            = 8
0.00.935.716 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.935.721 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.935.722 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.935.749 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.935.750 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.935.751 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.935.751 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.935.758 I llm_load_print_meta: n_ff             = 16384
0.00.935.759 I llm_load_print_meta: n_expert         = 0
0.00.935.759 I llm_load_print_meta: n_expert_used    = 0
0.00.935.768 I llm_load_print_meta: causal attn      = 1
0.00.935.769 I llm_load_print_meta: pooling type     = 0
0.00.935.769 I llm_load_print_meta: rope type        = 2
0.00.935.770 I llm_load_print_meta: rope scaling     = linear
0.00.935.771 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.935.772 I llm_load_print_meta: freq_scale_train = 1
0.00.935.772 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.935.773 I llm_load_print_meta: rope_finetuned   = unknown
0.00.935.778 I llm_load_print_meta: ssm_d_conv       = 0
0.00.935.778 I llm_load_print_meta: ssm_d_inner      = 0
0.00.935.779 I llm_load_print_meta: ssm_d_state      = 0
0.00.935.779 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.935.779 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.935.780 I llm_load_print_meta: model type       = 2B
0.00.935.781 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.935.789 I llm_load_print_meta: model params     = 2.51 B
0.00.935.790 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.935.791 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.935.792 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.935.792 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.935.792 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.935.793 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.935.794 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.935.794 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.935.800 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.935.802 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.935.802 I llm_load_print_meta: max token length = 93
0.00.993.202 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.999.222 I llama_new_context_with_model: n_seq_max     = 1
0.00.999.230 I llama_new_context_with_model: n_ctx         = 4096
0.00.999.230 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.999.230 I llama_new_context_with_model: n_batch       = 2048
0.00.999.231 I llama_new_context_with_model: n_ubatch      = 512
0.00.999.231 I llama_new_context_with_model: flash_attn    = 0
0.00.999.235 I llama_new_context_with_model: freq_base     = 10000.0
0.00.999.235 I llama_new_context_with_model: freq_scale    = 1
0.00.999.236 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.014.434 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.014.481 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.014.611 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.017.054 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.017.058 I llama_new_context_with_model: graph nodes  = 601
0.01.017.059 I llama_new_context_with_model: graph splits = 1
0.01.017.082 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.604.937 I main: llama threadpool init, n_threads = 4
0.01.604.955 I 
0.01.605.076 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.605.080 I 
0.01.605.324 I sampler seed: 3026418140
0.01.605.338 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.605.348 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.605.349 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.605.350 I 
 seconded wings and a powerful tail fin, the dragonfly is a majestic insect that glides gracefully through the air. [end of text]


0.09.592.913 I llama_perf_sampler_print:    sampling time =      35.53 ms /    24 runs   (    1.48 ms per token,   675.45 tokens per second)
0.09.592.916 I llama_perf_context_print:        load time =    1603.98 ms
0.09.592.919 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.592.920 I llama_perf_context_print:        eval time =    7923.06 ms /    23 runs   (  344.48 ms per token,     2.90 tokens per second)
0.09.592.933 I llama_perf_context_print:       total time =    7987.98 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m40.085s
user	47m1.259s
sys	0m6.535s
