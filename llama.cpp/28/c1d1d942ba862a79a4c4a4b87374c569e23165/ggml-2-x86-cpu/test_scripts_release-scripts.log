+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.541 I build: 4017 (28c1d1d9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.730 I main: llama backend init
0.00.000.865 I main: load the model and apply lora adapter, if any
0.00.021.367 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.377 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.385 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.389 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.390 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.394 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.395 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.395 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.396 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.397 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.397 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.401 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.402 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.402 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.403 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.403 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.049 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.814 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.808 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.813 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.814 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.814 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.815 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.816 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.817 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.819 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.819 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.820 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.821 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.822 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.825 I llama_model_loader: - type  f32:   37 tensors
0.00.131.826 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.192 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.731 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.329 I llm_load_vocab: special tokens cache size = 5
0.00.270.247 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.260 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.261 I llm_load_print_meta: arch             = gemma
0.00.270.262 I llm_load_print_meta: vocab type       = SPM
0.00.270.263 I llm_load_print_meta: n_vocab          = 256000
0.00.270.263 I llm_load_print_meta: n_merges         = 0
0.00.270.264 I llm_load_print_meta: vocab_only       = 0
0.00.270.264 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.264 I llm_load_print_meta: n_embd           = 2048
0.00.270.264 I llm_load_print_meta: n_layer          = 18
0.00.270.275 I llm_load_print_meta: n_head           = 8
0.00.270.276 I llm_load_print_meta: n_head_kv        = 1
0.00.270.276 I llm_load_print_meta: n_rot            = 256
0.00.270.277 I llm_load_print_meta: n_swa            = 0
0.00.270.277 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.277 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.278 I llm_load_print_meta: n_gqa            = 8
0.00.270.279 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.280 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.281 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.282 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.283 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.283 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.283 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.284 I llm_load_print_meta: n_ff             = 16384
0.00.270.284 I llm_load_print_meta: n_expert         = 0
0.00.270.285 I llm_load_print_meta: n_expert_used    = 0
0.00.270.285 I llm_load_print_meta: causal attn      = 1
0.00.270.285 I llm_load_print_meta: pooling type     = 0
0.00.270.285 I llm_load_print_meta: rope type        = 2
0.00.270.286 I llm_load_print_meta: rope scaling     = linear
0.00.270.287 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.288 I llm_load_print_meta: freq_scale_train = 1
0.00.270.288 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.288 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.289 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.289 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.289 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.289 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.290 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.290 I llm_load_print_meta: model type       = 2B
0.00.270.290 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.291 I llm_load_print_meta: model params     = 2.51 B
0.00.270.292 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.292 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.293 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.293 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.294 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.295 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.295 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.295 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.295 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.296 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.296 I llm_load_print_meta: max token length = 93
0.00.372.174 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.372.182 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.372.183 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.372.184 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.372.184 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.372.185 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.377.523 I llama_new_context_with_model: n_seq_max     = 1
0.00.377.530 I llama_new_context_with_model: n_ctx         = 4096
0.00.377.531 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.377.531 I llama_new_context_with_model: n_batch       = 2048
0.00.377.532 I llama_new_context_with_model: n_ubatch      = 512
0.00.377.532 I llama_new_context_with_model: flash_attn    = 0
0.00.377.535 I llama_new_context_with_model: freq_base     = 10000.0
0.00.377.536 I llama_new_context_with_model: freq_scale    = 1
0.00.377.537 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.393.217 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.393.232 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.393.319 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.394.580 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.394.585 I llama_new_context_with_model: graph nodes  = 601
0.00.394.585 I llama_new_context_with_model: graph splits = 1
0.00.394.587 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.479.410 I main: llama threadpool init, n_threads = 4
0.00.479.423 I 
0.00.479.495 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.479.498 I 
0.00.479.540 I sampler seed: 4054397045
0.00.479.550 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.479.553 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.479.554 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.479.555 I 
 increasities. 
I cannot find an answer that fits this criteria. [end of text]


0.01.608.979 I llama_perf_sampler_print:    sampling time =       2.43 ms /    17 runs   (    0.14 ms per token,  6987.26 tokens per second)
0.01.608.981 I llama_perf_context_print:        load time =     478.53 ms
0.01.608.983 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.608.984 I llama_perf_context_print:        eval time =    1119.22 ms /    16 runs   (   69.95 ms per token,    14.30 tokens per second)
0.01.608.985 I llama_perf_context_print:       total time =    1129.58 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.576 I build: 4017 (28c1d1d9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.772 I main: llama backend init
0.00.000.909 I main: load the model and apply lora adapter, if any
0.00.021.516 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.527 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.533 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.534 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.538 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.538 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.539 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.540 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.540 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.541 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.545 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.546 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.547 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.547 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.547 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.866 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.097 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.965 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.972 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.973 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.973 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.974 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.975 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.976 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.978 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.979 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.979 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.980 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.981 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.984 I llama_model_loader: - type  f32:   37 tensors
0.00.131.985 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.596 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.549 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.164 I llm_load_vocab: special tokens cache size = 5
0.00.267.029 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.046 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.046 I llm_load_print_meta: arch             = gemma
0.00.267.047 I llm_load_print_meta: vocab type       = SPM
0.00.267.047 I llm_load_print_meta: n_vocab          = 256000
0.00.267.048 I llm_load_print_meta: n_merges         = 0
0.00.267.048 I llm_load_print_meta: vocab_only       = 0
0.00.267.049 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.049 I llm_load_print_meta: n_embd           = 2048
0.00.267.049 I llm_load_print_meta: n_layer          = 18
0.00.267.061 I llm_load_print_meta: n_head           = 8
0.00.267.062 I llm_load_print_meta: n_head_kv        = 1
0.00.267.062 I llm_load_print_meta: n_rot            = 256
0.00.267.063 I llm_load_print_meta: n_swa            = 0
0.00.267.063 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.063 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.064 I llm_load_print_meta: n_gqa            = 8
0.00.267.065 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.066 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.067 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.068 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.068 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.069 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.069 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.070 I llm_load_print_meta: n_ff             = 16384
0.00.267.070 I llm_load_print_meta: n_expert         = 0
0.00.267.070 I llm_load_print_meta: n_expert_used    = 0
0.00.267.071 I llm_load_print_meta: causal attn      = 1
0.00.267.071 I llm_load_print_meta: pooling type     = 0
0.00.267.071 I llm_load_print_meta: rope type        = 2
0.00.267.072 I llm_load_print_meta: rope scaling     = linear
0.00.267.073 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.074 I llm_load_print_meta: freq_scale_train = 1
0.00.267.075 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.076 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.076 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.076 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.078 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.078 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.078 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.079 I llm_load_print_meta: model type       = 2B
0.00.267.080 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.081 I llm_load_print_meta: model params     = 2.51 B
0.00.267.082 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.083 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.083 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.084 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.088 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.088 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.089 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.089 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.089 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.090 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.090 I llm_load_print_meta: max token length = 93
0.00.364.734 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.369.943 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.949 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.949 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.950 I llama_new_context_with_model: n_batch       = 2048
0.00.369.950 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.951 I llama_new_context_with_model: flash_attn    = 0
0.00.369.953 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.954 I llama_new_context_with_model: freq_scale    = 1
0.00.369.955 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.386.000 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.386.015 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.386.113 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.387.381 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.387.387 I llama_new_context_with_model: graph nodes  = 601
0.00.387.388 I llama_new_context_with_model: graph splits = 1
0.00.387.389 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.469.600 I main: llama threadpool init, n_threads = 4
0.00.469.613 I 
0.00.469.692 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.469.695 I 
0.00.469.734 I sampler seed: 3894004648
0.00.469.745 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.469.747 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.469.748 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.469.749 I 
 increasels, and other mythical creatures. [end of text]


0.01.093.935 I llama_perf_sampler_print:    sampling time =       1.63 ms /    10 runs   (    0.16 ms per token,  6127.45 tokens per second)
0.01.093.937 I llama_perf_context_print:        load time =     468.67 ms
0.01.093.938 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.093.940 I llama_perf_context_print:        eval time =     617.54 ms /     9 runs   (   68.62 ms per token,    14.57 tokens per second)
0.01.093.940 I llama_perf_context_print:       total time =     624.34 ms /    10 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.566 I build: 4017 (28c1d1d9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.782 I main: llama backend init
0.00.000.915 I main: load the model and apply lora adapter, if any
0.00.021.275 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.284 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.291 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.297 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.298 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.302 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.303 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.304 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.305 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.306 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.307 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.311 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.311 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.312 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.312 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.313 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.740 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.751 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.611 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.618 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.619 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.620 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.620 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.621 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.622 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.624 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.625 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.626 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.626 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.627 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.631 I llama_model_loader: - type  f32:   37 tensors
0.00.131.631 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.456 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.860 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.418 I llm_load_vocab: special tokens cache size = 5
0.00.264.238 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.253 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.253 I llm_load_print_meta: arch             = gemma
0.00.264.254 I llm_load_print_meta: vocab type       = SPM
0.00.264.255 I llm_load_print_meta: n_vocab          = 256000
0.00.264.255 I llm_load_print_meta: n_merges         = 0
0.00.264.255 I llm_load_print_meta: vocab_only       = 0
0.00.264.256 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.256 I llm_load_print_meta: n_embd           = 2048
0.00.264.256 I llm_load_print_meta: n_layer          = 18
0.00.264.268 I llm_load_print_meta: n_head           = 8
0.00.264.269 I llm_load_print_meta: n_head_kv        = 1
0.00.264.269 I llm_load_print_meta: n_rot            = 256
0.00.264.270 I llm_load_print_meta: n_swa            = 0
0.00.264.270 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.270 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.271 I llm_load_print_meta: n_gqa            = 8
0.00.264.272 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.273 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.274 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.276 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.276 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.277 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.277 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.279 I llm_load_print_meta: n_ff             = 16384
0.00.264.279 I llm_load_print_meta: n_expert         = 0
0.00.264.280 I llm_load_print_meta: n_expert_used    = 0
0.00.264.280 I llm_load_print_meta: causal attn      = 1
0.00.264.280 I llm_load_print_meta: pooling type     = 0
0.00.264.281 I llm_load_print_meta: rope type        = 2
0.00.264.281 I llm_load_print_meta: rope scaling     = linear
0.00.264.283 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.284 I llm_load_print_meta: freq_scale_train = 1
0.00.264.284 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.285 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.285 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.285 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.285 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.286 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.286 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.286 I llm_load_print_meta: model type       = 2B
0.00.264.287 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.288 I llm_load_print_meta: model params     = 2.51 B
0.00.264.289 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.290 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.290 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.291 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.291 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.292 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.292 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.293 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.293 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.294 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.294 I llm_load_print_meta: max token length = 93
0.00.359.619 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.359.626 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.359.627 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.359.627 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.359.628 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.359.629 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.364.895 I llama_new_context_with_model: n_seq_max     = 1
0.00.364.901 I llama_new_context_with_model: n_ctx         = 4096
0.00.364.902 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.364.902 I llama_new_context_with_model: n_batch       = 2048
0.00.364.902 I llama_new_context_with_model: n_ubatch      = 512
0.00.364.903 I llama_new_context_with_model: flash_attn    = 0
0.00.364.905 I llama_new_context_with_model: freq_base     = 10000.0
0.00.364.906 I llama_new_context_with_model: freq_scale    = 1
0.00.364.907 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.380.645 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.380.660 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.380.750 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.381.982 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.381.989 I llama_new_context_with_model: graph nodes  = 601
0.00.381.990 I llama_new_context_with_model: graph splits = 1
0.00.381.991 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.465.063 I main: llama threadpool init, n_threads = 4
0.00.465.078 I 
0.00.465.152 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.465.155 I 
0.00.465.194 I sampler seed: 184731563
0.00.465.205 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.465.209 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.465.210 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.465.210 I 
 increably. 

**Assistant**

I am unable to generate text that contains inappropriate or sexually suggestive content. [end of text]


0.02.077.834 I llama_perf_sampler_print:    sampling time =       3.68 ms /    25 runs   (    0.15 ms per token,  6791.63 tokens per second)
0.02.077.836 I llama_perf_context_print:        load time =     464.13 ms
0.02.077.837 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.077.838 I llama_perf_context_print:        eval time =    1598.48 ms /    24 runs   (   66.60 ms per token,    15.01 tokens per second)
0.02.077.839 I llama_perf_context_print:       total time =    1612.78 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.559 I build: 4017 (28c1d1d9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.754 I main: llama backend init
0.00.000.887 I main: load the model and apply lora adapter, if any
0.00.021.674 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.686 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.695 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.704 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.705 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.709 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.711 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.712 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.713 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.713 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.714 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.718 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.718 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.719 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.720 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.720 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.431 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.345 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.221 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.229 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.230 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.231 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.232 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.233 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.234 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.238 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.239 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.240 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.241 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.241 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.245 I llama_model_loader: - type  f32:   37 tensors
0.00.132.246 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.114 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.549 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.064 I llm_load_vocab: special tokens cache size = 5
0.00.271.796 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.812 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.812 I llm_load_print_meta: arch             = gemma
0.00.271.812 I llm_load_print_meta: vocab type       = SPM
0.00.271.813 I llm_load_print_meta: n_vocab          = 256000
0.00.271.813 I llm_load_print_meta: n_merges         = 0
0.00.271.814 I llm_load_print_meta: vocab_only       = 0
0.00.271.814 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.815 I llm_load_print_meta: n_embd           = 2048
0.00.271.815 I llm_load_print_meta: n_layer          = 18
0.00.271.828 I llm_load_print_meta: n_head           = 8
0.00.271.829 I llm_load_print_meta: n_head_kv        = 1
0.00.271.829 I llm_load_print_meta: n_rot            = 256
0.00.271.830 I llm_load_print_meta: n_swa            = 0
0.00.271.830 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.831 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.833 I llm_load_print_meta: n_gqa            = 8
0.00.271.834 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.835 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.836 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.838 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.838 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.838 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.840 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.841 I llm_load_print_meta: n_ff             = 16384
0.00.271.841 I llm_load_print_meta: n_expert         = 0
0.00.271.841 I llm_load_print_meta: n_expert_used    = 0
0.00.271.842 I llm_load_print_meta: causal attn      = 1
0.00.271.842 I llm_load_print_meta: pooling type     = 0
0.00.271.843 I llm_load_print_meta: rope type        = 2
0.00.271.844 I llm_load_print_meta: rope scaling     = linear
0.00.271.845 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.846 I llm_load_print_meta: freq_scale_train = 1
0.00.271.846 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.846 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.846 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.847 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.847 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.847 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.847 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.848 I llm_load_print_meta: model type       = 2B
0.00.271.849 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.849 I llm_load_print_meta: model params     = 2.51 B
0.00.271.850 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.851 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.851 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.851 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.852 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.852 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.852 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.853 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.853 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.854 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.854 I llm_load_print_meta: max token length = 93
0.00.343.513 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.343.520 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.348.672 I llama_new_context_with_model: n_seq_max     = 1
0.00.348.678 I llama_new_context_with_model: n_ctx         = 4096
0.00.348.678 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.348.679 I llama_new_context_with_model: n_batch       = 2048
0.00.348.679 I llama_new_context_with_model: n_ubatch      = 512
0.00.348.680 I llama_new_context_with_model: flash_attn    = 0
0.00.348.682 I llama_new_context_with_model: freq_base     = 10000.0
0.00.348.683 I llama_new_context_with_model: freq_scale    = 1
0.00.348.684 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.364.548 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.364.560 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.364.652 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.365.861 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.365.868 I llama_new_context_with_model: graph nodes  = 601
0.00.365.868 I llama_new_context_with_model: graph splits = 1
0.00.365.871 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.452.660 I main: llama threadpool init, n_threads = 4
0.00.452.671 I 
0.00.452.750 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.452.753 I 
0.00.452.795 I sampler seed: 1567119011
0.00.452.804 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.452.808 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.452.808 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.452.810 I 
 seconally, with proper punctuation.

The question is:
What is the relationship between the length of the code and the efficiency of the program?

The

0.02.762.954 I llama_perf_sampler_print:    sampling time =       5.26 ms /    33 runs   (    0.16 ms per token,  6271.38 tokens per second)
0.02.762.956 I llama_perf_context_print:        load time =     451.75 ms
0.02.762.957 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.762.958 I llama_perf_context_print:        eval time =    2290.26 ms /    32 runs   (   71.57 ms per token,    13.97 tokens per second)
0.02.762.959 I llama_perf_context_print:       total time =    2310.30 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.132s
user	0m25.537s
sys	0m9.487s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4017 (28c1d1d9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32094.61 ms
main:    total time = 32094.61 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.522 I build: 4017 (28c1d1d9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.743 I main: llama backend init
0.00.000.882 I main: load the model and apply lora adapter, if any
0.00.021.602 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.611 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.619 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.629 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.634 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.638 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.640 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.642 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.644 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.645 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.647 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.651 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.652 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.653 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.654 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.655 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.220 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.822 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.676 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.683 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.684 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.685 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.685 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.686 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.687 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.690 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.691 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.692 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.692 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.693 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.696 I llama_model_loader: - type  f32:   37 tensors
0.00.131.698 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.699 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.735 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.870 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.431 I llm_load_vocab: special tokens cache size = 5
0.00.263.284 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.299 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.299 I llm_load_print_meta: arch             = gemma
0.00.263.300 I llm_load_print_meta: vocab type       = SPM
0.00.263.300 I llm_load_print_meta: n_vocab          = 256000
0.00.263.301 I llm_load_print_meta: n_merges         = 0
0.00.263.301 I llm_load_print_meta: vocab_only       = 0
0.00.263.301 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.302 I llm_load_print_meta: n_embd           = 2048
0.00.263.302 I llm_load_print_meta: n_layer          = 18
0.00.263.313 I llm_load_print_meta: n_head           = 8
0.00.263.314 I llm_load_print_meta: n_head_kv        = 1
0.00.263.315 I llm_load_print_meta: n_rot            = 256
0.00.263.315 I llm_load_print_meta: n_swa            = 0
0.00.263.315 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.315 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.316 I llm_load_print_meta: n_gqa            = 8
0.00.263.317 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.318 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.319 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.320 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.321 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.321 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.321 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.322 I llm_load_print_meta: n_ff             = 16384
0.00.263.323 I llm_load_print_meta: n_expert         = 0
0.00.263.323 I llm_load_print_meta: n_expert_used    = 0
0.00.263.323 I llm_load_print_meta: causal attn      = 1
0.00.263.324 I llm_load_print_meta: pooling type     = 0
0.00.263.324 I llm_load_print_meta: rope type        = 2
0.00.263.324 I llm_load_print_meta: rope scaling     = linear
0.00.263.325 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.326 I llm_load_print_meta: freq_scale_train = 1
0.00.263.326 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.327 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.327 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.327 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.327 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.328 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.328 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.328 I llm_load_print_meta: model type       = 2B
0.00.263.329 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.263.330 I llm_load_print_meta: model params     = 2.51 B
0.00.263.330 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.263.331 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.331 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.331 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.332 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.332 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.332 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.333 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.333 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.333 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.334 I llm_load_print_meta: max token length = 93
0.00.325.809 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.325.815 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.325.816 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.325.816 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.325.817 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.325.818 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.331.176 I llama_new_context_with_model: n_seq_max     = 1
0.00.331.182 I llama_new_context_with_model: n_ctx         = 4096
0.00.331.183 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.331.183 I llama_new_context_with_model: n_batch       = 2048
0.00.331.184 I llama_new_context_with_model: n_ubatch      = 512
0.00.331.184 I llama_new_context_with_model: flash_attn    = 0
0.00.331.186 I llama_new_context_with_model: freq_base     = 10000.0
0.00.331.187 I llama_new_context_with_model: freq_scale    = 1
0.00.331.188 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.346.545 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.346.557 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.346.668 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.347.901 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.347.907 I llama_new_context_with_model: graph nodes  = 601
0.00.347.908 I llama_new_context_with_model: graph splits = 1
0.00.347.909 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.425.221 I main: llama threadpool init, n_threads = 4
0.00.425.234 I 
0.00.425.322 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.425.325 I 
0.00.425.373 I sampler seed: 208877826
0.00.425.384 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.425.393 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.425.397 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.425.397 I 
 increasities:

**a) What is the meaning of the term "microcosm"?**

**b) How does the concept of microcosm relate to

0.02.092.036 I llama_perf_sampler_print:    sampling time =       5.18 ms /    33 runs   (    0.16 ms per token,  6374.35 tokens per second)
0.02.092.038 I llama_perf_context_print:        load time =     424.32 ms
0.02.092.039 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.092.041 I llama_perf_context_print:        eval time =    1647.08 ms /    32 runs   (   51.47 ms per token,    19.43 tokens per second)
0.02.092.042 I llama_perf_context_print:       total time =    1666.82 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4017 (28c1d1d9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32116.75 ms
main:    total time = 32116.75 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.564 I build: 4017 (28c1d1d9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.764 I main: llama backend init
0.00.000.899 I main: load the model and apply lora adapter, if any
0.00.021.305 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.319 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.325 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.326 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.329 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.330 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.331 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.331 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.332 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.332 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.335 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.336 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.336 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.337 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.337 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.680 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.068 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.896 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.902 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.903 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.903 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.904 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.905 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.906 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.908 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.909 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.911 I llama_model_loader: - type  f32:   37 tensors
0.00.130.913 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.913 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.955 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.280 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.872 I llm_load_vocab: special tokens cache size = 5
0.00.265.730 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.744 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.745 I llm_load_print_meta: arch             = gemma
0.00.265.745 I llm_load_print_meta: vocab type       = SPM
0.00.265.746 I llm_load_print_meta: n_vocab          = 256000
0.00.265.746 I llm_load_print_meta: n_merges         = 0
0.00.265.747 I llm_load_print_meta: vocab_only       = 0
0.00.265.747 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.747 I llm_load_print_meta: n_embd           = 2048
0.00.265.748 I llm_load_print_meta: n_layer          = 18
0.00.265.758 I llm_load_print_meta: n_head           = 8
0.00.265.759 I llm_load_print_meta: n_head_kv        = 1
0.00.265.760 I llm_load_print_meta: n_rot            = 256
0.00.265.760 I llm_load_print_meta: n_swa            = 0
0.00.265.760 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.761 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.762 I llm_load_print_meta: n_gqa            = 8
0.00.265.763 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.764 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.765 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.766 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.766 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.766 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.767 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.768 I llm_load_print_meta: n_ff             = 16384
0.00.265.768 I llm_load_print_meta: n_expert         = 0
0.00.265.768 I llm_load_print_meta: n_expert_used    = 0
0.00.265.768 I llm_load_print_meta: causal attn      = 1
0.00.265.769 I llm_load_print_meta: pooling type     = 0
0.00.265.769 I llm_load_print_meta: rope type        = 2
0.00.265.770 I llm_load_print_meta: rope scaling     = linear
0.00.265.771 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.772 I llm_load_print_meta: freq_scale_train = 1
0.00.265.772 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.773 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.773 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.773 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.774 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.774 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.774 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.774 I llm_load_print_meta: model type       = 2B
0.00.265.775 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.776 I llm_load_print_meta: model params     = 2.51 B
0.00.265.777 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.777 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.777 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.778 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.778 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.778 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.779 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.779 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.779 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.780 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.780 I llm_load_print_meta: max token length = 93
0.00.326.211 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.331.404 I llama_new_context_with_model: n_seq_max     = 1
0.00.331.409 I llama_new_context_with_model: n_ctx         = 4096
0.00.331.410 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.331.410 I llama_new_context_with_model: n_batch       = 2048
0.00.331.411 I llama_new_context_with_model: n_ubatch      = 512
0.00.331.411 I llama_new_context_with_model: flash_attn    = 0
0.00.331.414 I llama_new_context_with_model: freq_base     = 10000.0
0.00.331.415 I llama_new_context_with_model: freq_scale    = 1
0.00.331.416 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.347.750 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.347.765 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.347.854 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.349.127 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.349.132 I llama_new_context_with_model: graph nodes  = 601
0.00.349.133 I llama_new_context_with_model: graph splits = 1
0.00.349.135 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.424.741 I main: llama threadpool init, n_threads = 4
0.00.424.754 I 
0.00.424.831 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.424.834 I 
0.00.424.874 I sampler seed: 132190363
0.00.424.885 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.424.888 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.424.888 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.424.889 I 
 maneurages and other forms of misinformation.

**Answer the following questions about the provided text:**

1. What is the main idea of the passage?


0.01.992.272 I llama_perf_sampler_print:    sampling time =       5.01 ms /    33 runs   (    0.15 ms per token,  6581.57 tokens per second)
0.01.992.274 I llama_perf_context_print:        load time =     423.82 ms
0.01.992.275 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.992.277 I llama_perf_context_print:        eval time =    1549.11 ms /    32 runs   (   48.41 ms per token,    20.66 tokens per second)
0.01.992.277 I llama_perf_context_print:       total time =    1567.54 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.170s
user	8m14.795s
sys	0m6.820s
