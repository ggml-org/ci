+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.659 I build: 4228 (abadba05) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.888 I main: llama backend init
0.00.000.896 I main: load the model and apply lora adapter, if any
0.00.023.040 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.050 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.144 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.156 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.158 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.163 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.166 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.168 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.170 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.172 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.176 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.184 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.187 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.189 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.191 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.194 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.248.017 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.350.176 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.373.665 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.373.677 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.373.678 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.373.679 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.373.681 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.373.682 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.373.683 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.373.688 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.373.689 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.373.691 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.373.692 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.373.693 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.373.702 I llama_model_loader: - type  f32:   37 tensors
0.00.373.704 I llama_model_loader: - type q8_0:  127 tensors
0.00.596.652 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.654.004 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.654.878 I llm_load_vocab: special tokens cache size = 5
0.00.858.428 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.858.500 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.858.503 I llm_load_print_meta: arch             = gemma
0.00.858.504 I llm_load_print_meta: vocab type       = SPM
0.00.858.505 I llm_load_print_meta: n_vocab          = 256000
0.00.858.507 I llm_load_print_meta: n_merges         = 0
0.00.858.508 I llm_load_print_meta: vocab_only       = 0
0.00.858.508 I llm_load_print_meta: n_ctx_train      = 8192
0.00.858.508 I llm_load_print_meta: n_embd           = 2048
0.00.858.509 I llm_load_print_meta: n_layer          = 18
0.00.858.575 I llm_load_print_meta: n_head           = 8
0.00.858.586 I llm_load_print_meta: n_head_kv        = 1
0.00.858.586 I llm_load_print_meta: n_rot            = 256
0.00.858.587 I llm_load_print_meta: n_swa            = 0
0.00.858.595 I llm_load_print_meta: n_embd_head_k    = 256
0.00.858.598 I llm_load_print_meta: n_embd_head_v    = 256
0.00.858.603 I llm_load_print_meta: n_gqa            = 8
0.00.858.608 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.858.613 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.858.617 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.858.618 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.858.619 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.858.619 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.858.620 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.858.625 I llm_load_print_meta: n_ff             = 16384
0.00.858.626 I llm_load_print_meta: n_expert         = 0
0.00.858.636 I llm_load_print_meta: n_expert_used    = 0
0.00.858.637 I llm_load_print_meta: causal attn      = 1
0.00.858.645 I llm_load_print_meta: pooling type     = 0
0.00.858.647 I llm_load_print_meta: rope type        = 2
0.00.858.647 I llm_load_print_meta: rope scaling     = linear
0.00.858.649 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.858.651 I llm_load_print_meta: freq_scale_train = 1
0.00.858.651 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.858.654 I llm_load_print_meta: rope_finetuned   = unknown
0.00.858.655 I llm_load_print_meta: ssm_d_conv       = 0
0.00.858.655 I llm_load_print_meta: ssm_d_inner      = 0
0.00.858.656 I llm_load_print_meta: ssm_d_state      = 0
0.00.858.657 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.858.657 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.858.658 I llm_load_print_meta: model type       = 2B
0.00.858.660 I llm_load_print_meta: model ftype      = Q8_0
0.00.858.661 I llm_load_print_meta: model params     = 2.51 B
0.00.858.675 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.858.676 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.858.679 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.858.680 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.858.681 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.858.681 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.858.682 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.858.683 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.858.690 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.858.692 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.858.693 I llm_load_print_meta: max token length = 93
0.00.962.130 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.962.142 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.962.143 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.962.143 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.962.144 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.962.145 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.968.142 I llama_new_context_with_model: n_seq_max     = 1
0.00.968.149 I llama_new_context_with_model: n_ctx         = 4096
0.00.968.150 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.968.150 I llama_new_context_with_model: n_batch       = 2048
0.00.968.151 I llama_new_context_with_model: n_ubatch      = 512
0.00.968.151 I llama_new_context_with_model: flash_attn    = 0
0.00.968.153 I llama_new_context_with_model: freq_base     = 10000.0
0.00.968.154 I llama_new_context_with_model: freq_scale    = 1
0.00.968.155 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.982.983 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.983.024 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.983.150 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.985.718 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.985.722 I llama_new_context_with_model: graph nodes  = 601
0.00.985.722 I llama_new_context_with_model: graph splits = 1
0.00.985.745 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.594.908 I main: llama threadpool init, n_threads = 4
0.01.594.925 I 
0.01.595.063 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.595.067 I 
0.01.595.327 I sampler seed: 601935355
0.01.595.341 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.595.352 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.595.357 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.595.357 I 
 increasities, and other forms of disrespect.

It is important to address disrespect in all its forms, regardless of the context or the person involved. We must

0.15.092.410 I llama_perf_sampler_print:    sampling time =      48.42 ms /    33 runs   (    1.47 ms per token,   681.56 tokens per second)
0.15.092.414 I llama_perf_context_print:        load time =    1593.91 ms
0.15.092.415 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.092.417 I llama_perf_context_print:        eval time =   13408.86 ms /    32 runs   (  419.03 ms per token,     2.39 tokens per second)
0.15.092.418 I llama_perf_context_print:       total time =   13497.51 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.687 I build: 4228 (abadba05) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.905 I main: llama backend init
0.00.000.914 I main: load the model and apply lora adapter, if any
0.00.023.720 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.828 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.844 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.848 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.855 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.858 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.860 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.863 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.865 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.867 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.880 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.885 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.888 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.890 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.892 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.232.588 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.334.695 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.358.190 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.358.202 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.358.203 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.358.205 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.358.206 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.358.207 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.358.209 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.358.213 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.358.214 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.358.216 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.358.217 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.358.219 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.358.228 I llama_model_loader: - type  f32:   37 tensors
0.00.358.230 I llama_model_loader: - type q8_0:  127 tensors
0.00.571.347 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.629.029 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.629.991 I llm_load_vocab: special tokens cache size = 5
0.00.827.792 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.827.866 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.827.867 I llm_load_print_meta: arch             = gemma
0.00.827.867 I llm_load_print_meta: vocab type       = SPM
0.00.827.868 I llm_load_print_meta: n_vocab          = 256000
0.00.827.871 I llm_load_print_meta: n_merges         = 0
0.00.827.871 I llm_load_print_meta: vocab_only       = 0
0.00.827.872 I llm_load_print_meta: n_ctx_train      = 8192
0.00.827.872 I llm_load_print_meta: n_embd           = 2048
0.00.827.872 I llm_load_print_meta: n_layer          = 18
0.00.827.938 I llm_load_print_meta: n_head           = 8
0.00.827.946 I llm_load_print_meta: n_head_kv        = 1
0.00.827.946 I llm_load_print_meta: n_rot            = 256
0.00.827.947 I llm_load_print_meta: n_swa            = 0
0.00.827.948 I llm_load_print_meta: n_embd_head_k    = 256
0.00.827.949 I llm_load_print_meta: n_embd_head_v    = 256
0.00.827.953 I llm_load_print_meta: n_gqa            = 8
0.00.827.958 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.827.962 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.827.964 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.827.966 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.827.966 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.827.968 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.827.969 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.827.985 I llm_load_print_meta: n_ff             = 16384
0.00.827.987 I llm_load_print_meta: n_expert         = 0
0.00.827.987 I llm_load_print_meta: n_expert_used    = 0
0.00.827.988 I llm_load_print_meta: causal attn      = 1
0.00.827.988 I llm_load_print_meta: pooling type     = 0
0.00.827.989 I llm_load_print_meta: rope type        = 2
0.00.827.989 I llm_load_print_meta: rope scaling     = linear
0.00.827.991 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.827.992 I llm_load_print_meta: freq_scale_train = 1
0.00.827.992 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.827.993 I llm_load_print_meta: rope_finetuned   = unknown
0.00.827.994 I llm_load_print_meta: ssm_d_conv       = 0
0.00.827.995 I llm_load_print_meta: ssm_d_inner      = 0
0.00.827.996 I llm_load_print_meta: ssm_d_state      = 0
0.00.827.996 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.827.997 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.827.998 I llm_load_print_meta: model type       = 2B
0.00.827.999 I llm_load_print_meta: model ftype      = Q8_0
0.00.828.003 I llm_load_print_meta: model params     = 2.51 B
0.00.828.013 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.828.013 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.828.014 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.828.028 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.828.029 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.828.030 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.828.031 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.828.033 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.828.040 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.828.042 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.828.044 I llm_load_print_meta: max token length = 93
0.00.924.383 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.930.694 I llama_new_context_with_model: n_seq_max     = 1
0.00.930.702 I llama_new_context_with_model: n_ctx         = 4096
0.00.930.702 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.930.703 I llama_new_context_with_model: n_batch       = 2048
0.00.930.703 I llama_new_context_with_model: n_ubatch      = 512
0.00.930.704 I llama_new_context_with_model: flash_attn    = 0
0.00.930.707 I llama_new_context_with_model: freq_base     = 10000.0
0.00.930.708 I llama_new_context_with_model: freq_scale    = 1
0.00.930.709 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.946.534 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.946.581 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.946.729 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.949.306 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.949.310 I llama_new_context_with_model: graph nodes  = 601
0.00.949.310 I llama_new_context_with_model: graph splits = 1
0.00.949.333 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.559.067 I main: llama threadpool init, n_threads = 4
0.01.559.082 I 
0.01.559.223 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.559.228 I 
0.01.559.491 I sampler seed: 3155505072
0.01.559.505 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.559.514 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.559.519 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.559.519 I 
 increasities is a phenomenon that has been studied extensively, and there is a wealth of knowledge available on the topic. However, there are still some aspects of this

0.15.086.348 I llama_perf_sampler_print:    sampling time =      48.72 ms /    33 runs   (    1.48 ms per token,   677.41 tokens per second)
0.15.086.351 I llama_perf_context_print:        load time =    1558.03 ms
0.15.086.353 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.086.368 I llama_perf_context_print:        eval time =   13437.65 ms /    32 runs   (  419.93 ms per token,     2.38 tokens per second)
0.15.086.369 I llama_perf_context_print:       total time =   13527.29 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.655 I build: 4228 (abadba05) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.854 I main: llama backend init
0.00.000.861 I main: load the model and apply lora adapter, if any
0.00.024.842 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.853 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.948 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.961 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.963 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.969 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.971 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.973 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.974 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.975 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.977 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.985 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.986 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.988 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.989 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.998 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.230 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.213 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.925 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.936 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.937 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.939 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.940 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.942 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.943 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.947 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.948 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.950 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.951 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.351.953 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.961 I llama_model_loader: - type  f32:   37 tensors
0.00.351.964 I llama_model_loader: - type q8_0:  127 tensors
0.00.571.957 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.630.383 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.631.338 I llm_load_vocab: special tokens cache size = 5
0.00.815.211 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.815.282 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.815.284 I llm_load_print_meta: arch             = gemma
0.00.815.284 I llm_load_print_meta: vocab type       = SPM
0.00.815.285 I llm_load_print_meta: n_vocab          = 256000
0.00.815.287 I llm_load_print_meta: n_merges         = 0
0.00.815.288 I llm_load_print_meta: vocab_only       = 0
0.00.815.288 I llm_load_print_meta: n_ctx_train      = 8192
0.00.815.288 I llm_load_print_meta: n_embd           = 2048
0.00.815.289 I llm_load_print_meta: n_layer          = 18
0.00.815.355 I llm_load_print_meta: n_head           = 8
0.00.815.362 I llm_load_print_meta: n_head_kv        = 1
0.00.815.364 I llm_load_print_meta: n_rot            = 256
0.00.815.364 I llm_load_print_meta: n_swa            = 0
0.00.815.365 I llm_load_print_meta: n_embd_head_k    = 256
0.00.815.365 I llm_load_print_meta: n_embd_head_v    = 256
0.00.815.370 I llm_load_print_meta: n_gqa            = 8
0.00.815.374 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.815.379 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.815.380 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.815.383 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.815.384 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.815.384 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.815.395 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.815.412 I llm_load_print_meta: n_ff             = 16384
0.00.815.413 I llm_load_print_meta: n_expert         = 0
0.00.815.414 I llm_load_print_meta: n_expert_used    = 0
0.00.815.414 I llm_load_print_meta: causal attn      = 1
0.00.815.415 I llm_load_print_meta: pooling type     = 0
0.00.815.415 I llm_load_print_meta: rope type        = 2
0.00.815.416 I llm_load_print_meta: rope scaling     = linear
0.00.815.424 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.815.432 I llm_load_print_meta: freq_scale_train = 1
0.00.815.433 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.815.433 I llm_load_print_meta: rope_finetuned   = unknown
0.00.815.434 I llm_load_print_meta: ssm_d_conv       = 0
0.00.815.434 I llm_load_print_meta: ssm_d_inner      = 0
0.00.815.434 I llm_load_print_meta: ssm_d_state      = 0
0.00.815.435 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.815.439 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.815.440 I llm_load_print_meta: model type       = 2B
0.00.815.441 I llm_load_print_meta: model ftype      = Q8_0
0.00.815.441 I llm_load_print_meta: model params     = 2.51 B
0.00.815.449 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.815.449 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.815.450 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.815.450 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.815.451 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.815.451 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.815.451 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.815.452 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.815.465 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.815.466 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.815.467 I llm_load_print_meta: max token length = 93
0.00.891.417 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.891.429 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.891.430 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.891.430 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.891.431 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.891.432 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.897.636 I llama_new_context_with_model: n_seq_max     = 1
0.00.897.647 I llama_new_context_with_model: n_ctx         = 4096
0.00.897.647 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.897.648 I llama_new_context_with_model: n_batch       = 2048
0.00.897.648 I llama_new_context_with_model: n_ubatch      = 512
0.00.897.649 I llama_new_context_with_model: flash_attn    = 0
0.00.897.652 I llama_new_context_with_model: freq_base     = 10000.0
0.00.897.653 I llama_new_context_with_model: freq_scale    = 1
0.00.897.653 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.913.249 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.913.291 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.913.420 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.915.997 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.916.001 I llama_new_context_with_model: graph nodes  = 601
0.00.916.002 I llama_new_context_with_model: graph splits = 1
0.00.916.026 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.526.834 I main: llama threadpool init, n_threads = 4
0.01.526.852 I 
0.01.526.970 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.526.974 I 
0.01.527.211 I sampler seed: 1097969040
0.01.527.224 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.527.234 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.527.235 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.527.236 I 
 increasities with the help of a translator. [end of text]


0.05.730.884 I llama_perf_sampler_print:    sampling time =      15.16 ms /    11 runs   (    1.38 ms per token,   725.45 tokens per second)
0.05.730.887 I llama_perf_context_print:        load time =    1525.87 ms
0.05.730.889 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.730.890 I llama_perf_context_print:        eval time =    4174.89 ms /    10 runs   (  417.49 ms per token,     2.40 tokens per second)
0.05.730.891 I llama_perf_context_print:       total time =    4204.06 ms /    11 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.650 I build: 4228 (abadba05) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.000.856 I main: load the model and apply lora adapter, if any
0.00.023.307 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.314 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.400 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.412 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.415 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.420 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.424 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.426 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.427 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.428 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.429 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.439 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.440 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.442 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.443 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.445 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.768 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.804 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.464 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.473 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.475 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.476 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.477 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.479 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.480 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.484 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.485 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.487 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.353.489 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.353.491 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.353.500 I llama_model_loader: - type  f32:   37 tensors
0.00.353.503 I llama_model_loader: - type q8_0:  127 tensors
0.00.568.040 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.628.102 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.628.984 I llm_load_vocab: special tokens cache size = 5
0.00.824.618 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.824.693 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.824.695 I llm_load_print_meta: arch             = gemma
0.00.824.695 I llm_load_print_meta: vocab type       = SPM
0.00.824.696 I llm_load_print_meta: n_vocab          = 256000
0.00.824.699 I llm_load_print_meta: n_merges         = 0
0.00.824.699 I llm_load_print_meta: vocab_only       = 0
0.00.824.700 I llm_load_print_meta: n_ctx_train      = 8192
0.00.824.700 I llm_load_print_meta: n_embd           = 2048
0.00.824.700 I llm_load_print_meta: n_layer          = 18
0.00.824.767 I llm_load_print_meta: n_head           = 8
0.00.824.775 I llm_load_print_meta: n_head_kv        = 1
0.00.824.775 I llm_load_print_meta: n_rot            = 256
0.00.824.776 I llm_load_print_meta: n_swa            = 0
0.00.824.776 I llm_load_print_meta: n_embd_head_k    = 256
0.00.824.776 I llm_load_print_meta: n_embd_head_v    = 256
0.00.824.781 I llm_load_print_meta: n_gqa            = 8
0.00.824.785 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.824.790 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.824.791 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.824.793 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.824.793 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.824.794 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.824.794 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.824.799 I llm_load_print_meta: n_ff             = 16384
0.00.824.800 I llm_load_print_meta: n_expert         = 0
0.00.824.800 I llm_load_print_meta: n_expert_used    = 0
0.00.824.800 I llm_load_print_meta: causal attn      = 1
0.00.824.801 I llm_load_print_meta: pooling type     = 0
0.00.824.801 I llm_load_print_meta: rope type        = 2
0.00.824.802 I llm_load_print_meta: rope scaling     = linear
0.00.824.803 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.824.803 I llm_load_print_meta: freq_scale_train = 1
0.00.824.804 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.824.804 I llm_load_print_meta: rope_finetuned   = unknown
0.00.824.804 I llm_load_print_meta: ssm_d_conv       = 0
0.00.824.805 I llm_load_print_meta: ssm_d_inner      = 0
0.00.824.805 I llm_load_print_meta: ssm_d_state      = 0
0.00.824.805 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.824.806 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.824.806 I llm_load_print_meta: model type       = 2B
0.00.824.807 I llm_load_print_meta: model ftype      = Q8_0
0.00.824.808 I llm_load_print_meta: model params     = 2.51 B
0.00.824.842 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.824.843 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.824.843 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.824.844 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.824.844 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.824.845 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.824.845 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.824.846 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.824.859 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.824.861 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.824.862 I llm_load_print_meta: max token length = 93
0.00.897.699 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.897.711 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.903.824 I llama_new_context_with_model: n_seq_max     = 1
0.00.903.833 I llama_new_context_with_model: n_ctx         = 4096
0.00.903.833 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.903.834 I llama_new_context_with_model: n_batch       = 2048
0.00.903.834 I llama_new_context_with_model: n_ubatch      = 512
0.00.903.835 I llama_new_context_with_model: flash_attn    = 0
0.00.903.838 I llama_new_context_with_model: freq_base     = 10000.0
0.00.903.839 I llama_new_context_with_model: freq_scale    = 1
0.00.903.840 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.919.367 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.919.410 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.919.539 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.922.009 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.922.013 I llama_new_context_with_model: graph nodes  = 601
0.00.922.013 I llama_new_context_with_model: graph splits = 1
0.00.922.036 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.531.046 I main: llama threadpool init, n_threads = 4
0.01.531.061 I 
0.01.531.176 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.531.179 I 
0.01.531.414 I sampler seed: 2580469123
0.01.531.428 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.531.438 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.531.441 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.531.441 I 
 seconary to the primary key.

Answer: Foreign key constraint.

A foreign key constraint is a database constraint that enforces referential integrity between two tables

0.15.146.166 I llama_perf_sampler_print:    sampling time =      48.52 ms /    33 runs   (    1.47 ms per token,   680.12 tokens per second)
0.15.146.170 I llama_perf_context_print:        load time =    1530.10 ms
0.15.146.172 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.146.173 I llama_perf_context_print:        eval time =   13526.75 ms /    32 runs   (  422.71 ms per token,     2.37 tokens per second)
0.15.146.174 I llama_perf_context_print:       total time =   13615.13 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m0.586s
user	3m12.948s
sys	0m9.300s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4228 (abadba05)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185528.94 ms
main:    total time = 185528.94 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 4228 (abadba05) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.837 I main: llama backend init
0.00.000.845 I main: load the model and apply lora adapter, if any
0.00.025.942 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.955 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.026.048 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.060 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.062 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.069 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.073 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.074 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.076 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.077 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.079 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.086 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.087 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.089 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.091 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.026.092 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.256 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.473 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.964 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.974 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.976 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.977 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.978 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.980 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.981 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.986 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.987 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.988 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.989 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.352.991 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.353.000 I llama_model_loader: - type  f32:   37 tensors
0.00.353.003 I llama_model_loader: - type q4_K:  108 tensors
0.00.353.004 I llama_model_loader: - type q6_K:   19 tensors
0.00.571.549 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.626.652 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.627.504 I llm_load_vocab: special tokens cache size = 5
0.00.823.516 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.823.594 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.823.595 I llm_load_print_meta: arch             = gemma
0.00.823.596 I llm_load_print_meta: vocab type       = SPM
0.00.823.597 I llm_load_print_meta: n_vocab          = 256000
0.00.823.600 I llm_load_print_meta: n_merges         = 0
0.00.823.600 I llm_load_print_meta: vocab_only       = 0
0.00.823.600 I llm_load_print_meta: n_ctx_train      = 8192
0.00.823.601 I llm_load_print_meta: n_embd           = 2048
0.00.823.601 I llm_load_print_meta: n_layer          = 18
0.00.823.666 I llm_load_print_meta: n_head           = 8
0.00.823.673 I llm_load_print_meta: n_head_kv        = 1
0.00.823.678 I llm_load_print_meta: n_rot            = 256
0.00.823.678 I llm_load_print_meta: n_swa            = 0
0.00.823.679 I llm_load_print_meta: n_embd_head_k    = 256
0.00.823.679 I llm_load_print_meta: n_embd_head_v    = 256
0.00.823.684 I llm_load_print_meta: n_gqa            = 8
0.00.823.689 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.823.696 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.823.700 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.823.701 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.823.702 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.823.702 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.823.703 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.823.708 I llm_load_print_meta: n_ff             = 16384
0.00.823.709 I llm_load_print_meta: n_expert         = 0
0.00.823.709 I llm_load_print_meta: n_expert_used    = 0
0.00.823.710 I llm_load_print_meta: causal attn      = 1
0.00.823.710 I llm_load_print_meta: pooling type     = 0
0.00.823.710 I llm_load_print_meta: rope type        = 2
0.00.823.711 I llm_load_print_meta: rope scaling     = linear
0.00.823.712 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.823.736 I llm_load_print_meta: freq_scale_train = 1
0.00.823.738 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.823.739 I llm_load_print_meta: rope_finetuned   = unknown
0.00.823.740 I llm_load_print_meta: ssm_d_conv       = 0
0.00.823.740 I llm_load_print_meta: ssm_d_inner      = 0
0.00.823.740 I llm_load_print_meta: ssm_d_state      = 0
0.00.823.741 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.823.741 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.823.741 I llm_load_print_meta: model type       = 2B
0.00.823.743 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.823.744 I llm_load_print_meta: model params     = 2.51 B
0.00.823.755 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.823.755 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.823.756 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.823.756 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.823.757 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.823.758 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.823.759 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.823.759 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.823.766 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.823.768 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.823.768 I llm_load_print_meta: max token length = 93
0.00.888.212 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.888.223 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.888.224 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.888.225 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.888.226 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.888.226 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.894.032 I llama_new_context_with_model: n_seq_max     = 1
0.00.894.039 I llama_new_context_with_model: n_ctx         = 4096
0.00.894.039 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.894.040 I llama_new_context_with_model: n_batch       = 2048
0.00.894.040 I llama_new_context_with_model: n_ubatch      = 512
0.00.894.040 I llama_new_context_with_model: flash_attn    = 0
0.00.894.043 I llama_new_context_with_model: freq_base     = 10000.0
0.00.894.044 I llama_new_context_with_model: freq_scale    = 1
0.00.894.045 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.908.640 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.908.680 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.908.816 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.911.355 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.911.359 I llama_new_context_with_model: graph nodes  = 601
0.00.911.360 I llama_new_context_with_model: graph splits = 1
0.00.911.382 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.494.668 I main: llama threadpool init, n_threads = 4
0.01.494.685 I 
0.01.494.806 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.494.810 I 
0.01.495.043 I sampler seed: 770875754
0.01.495.056 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.495.065 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.495.069 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.495.069 I 
 increamically. The following sentence is from the text: "I will not tolerate your ignorance and disrespect."

**Answer the questions below, using the provided sentence

0.12.639.445 I llama_perf_sampler_print:    sampling time =      48.62 ms /    33 runs   (    1.47 ms per token,   678.75 tokens per second)
0.12.639.462 I llama_perf_context_print:        load time =    1493.73 ms
0.12.639.463 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.639.465 I llama_perf_context_print:        eval time =   11056.97 ms /    32 runs   (  345.53 ms per token,     2.89 tokens per second)
0.12.639.466 I llama_perf_context_print:       total time =   11144.79 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4228 (abadba05)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185541.42 ms
main:    total time = 185541.42 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.631 I build: 4228 (abadba05) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.830 I main: llama backend init
0.00.000.838 I main: load the model and apply lora adapter, if any
0.00.023.352 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.447 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.462 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.466 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.472 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.474 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.475 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.477 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.478 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.479 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.485 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.489 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.491 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.498 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.499 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.317 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.085 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.512 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.520 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.522 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.523 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.525 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.526 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.527 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.531 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.533 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.541 I llama_model_loader: - type  f32:   37 tensors
0.00.349.543 I llama_model_loader: - type q4_K:  108 tensors
0.00.349.544 I llama_model_loader: - type q6_K:   19 tensors
0.00.565.632 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.626.315 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.627.207 I llm_load_vocab: special tokens cache size = 5
0.00.811.703 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.811.777 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.811.778 I llm_load_print_meta: arch             = gemma
0.00.811.778 I llm_load_print_meta: vocab type       = SPM
0.00.811.779 I llm_load_print_meta: n_vocab          = 256000
0.00.811.782 I llm_load_print_meta: n_merges         = 0
0.00.811.783 I llm_load_print_meta: vocab_only       = 0
0.00.811.783 I llm_load_print_meta: n_ctx_train      = 8192
0.00.811.784 I llm_load_print_meta: n_embd           = 2048
0.00.811.784 I llm_load_print_meta: n_layer          = 18
0.00.811.852 I llm_load_print_meta: n_head           = 8
0.00.811.859 I llm_load_print_meta: n_head_kv        = 1
0.00.811.859 I llm_load_print_meta: n_rot            = 256
0.00.811.860 I llm_load_print_meta: n_swa            = 0
0.00.811.861 I llm_load_print_meta: n_embd_head_k    = 256
0.00.811.862 I llm_load_print_meta: n_embd_head_v    = 256
0.00.811.866 I llm_load_print_meta: n_gqa            = 8
0.00.811.871 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.811.877 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.811.878 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.811.892 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.811.893 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.811.893 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.811.894 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.811.901 I llm_load_print_meta: n_ff             = 16384
0.00.811.905 I llm_load_print_meta: n_expert         = 0
0.00.811.906 I llm_load_print_meta: n_expert_used    = 0
0.00.811.906 I llm_load_print_meta: causal attn      = 1
0.00.811.906 I llm_load_print_meta: pooling type     = 0
0.00.811.907 I llm_load_print_meta: rope type        = 2
0.00.811.907 I llm_load_print_meta: rope scaling     = linear
0.00.811.908 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.811.909 I llm_load_print_meta: freq_scale_train = 1
0.00.811.910 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.811.910 I llm_load_print_meta: rope_finetuned   = unknown
0.00.811.911 I llm_load_print_meta: ssm_d_conv       = 0
0.00.811.911 I llm_load_print_meta: ssm_d_inner      = 0
0.00.811.912 I llm_load_print_meta: ssm_d_state      = 0
0.00.811.912 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.811.912 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.811.913 I llm_load_print_meta: model type       = 2B
0.00.811.915 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.811.916 I llm_load_print_meta: model params     = 2.51 B
0.00.811.926 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.811.927 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.811.928 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.811.929 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.811.929 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.811.930 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.811.930 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.811.931 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.811.937 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.811.938 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.811.939 I llm_load_print_meta: max token length = 93
0.00.868.762 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.874.536 I llama_new_context_with_model: n_seq_max     = 1
0.00.874.544 I llama_new_context_with_model: n_ctx         = 4096
0.00.874.544 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.874.544 I llama_new_context_with_model: n_batch       = 2048
0.00.874.545 I llama_new_context_with_model: n_ubatch      = 512
0.00.874.545 I llama_new_context_with_model: flash_attn    = 0
0.00.874.547 I llama_new_context_with_model: freq_base     = 10000.0
0.00.874.548 I llama_new_context_with_model: freq_scale    = 1
0.00.874.549 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.889.156 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.889.198 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.889.322 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.891.834 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.891.838 I llama_new_context_with_model: graph nodes  = 601
0.00.891.839 I llama_new_context_with_model: graph splits = 1
0.00.891.861 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.475.873 I main: llama threadpool init, n_threads = 4
0.01.475.889 I 
0.01.476.008 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.476.012 I 
0.01.476.257 I sampler seed: 3225380347
0.01.476.270 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.476.279 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.476.282 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.476.283 I 
 encompates a range of topics, including:

**Personal Growth:**

* Setting and achieving goals
* Developing self-awareness
* Building confidence and resilience

0.12.617.275 I llama_perf_sampler_print:    sampling time =      48.46 ms /    33 runs   (    1.47 ms per token,   680.96 tokens per second)
0.12.617.278 I llama_perf_context_print:        load time =    1474.95 ms
0.12.617.279 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.617.292 I llama_perf_context_print:        eval time =   11053.39 ms /    32 runs   (  345.42 ms per token,     2.90 tokens per second)
0.12.617.294 I llama_perf_context_print:       total time =   11141.41 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m39.232s
user	46m43.039s
sys	0m6.380s
