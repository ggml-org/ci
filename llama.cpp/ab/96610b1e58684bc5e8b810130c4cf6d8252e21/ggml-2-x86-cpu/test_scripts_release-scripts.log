+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.570 I build: 4182 (ab96610b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.763 I main: llama backend init
0.00.000.770 I main: load the model and apply lora adapter, if any
0.00.021.905 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.918 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.927 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.933 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.934 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.938 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.939 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.939 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.940 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.940 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.941 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.946 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.946 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.947 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.948 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.948 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.900 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.028 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.945 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.952 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.953 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.954 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.954 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.956 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.957 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.961 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.962 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.963 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.964 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.965 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.969 I llama_model_loader: - type  f32:   37 tensors
0.00.132.971 I llama_model_loader: - type q8_0:  127 tensors
0.00.212.763 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.266.210 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.266.918 I llm_load_vocab: special tokens cache size = 5
0.00.288.131 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.288.149 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.288.149 I llm_load_print_meta: arch             = gemma
0.00.288.150 I llm_load_print_meta: vocab type       = SPM
0.00.288.151 I llm_load_print_meta: n_vocab          = 256000
0.00.288.151 I llm_load_print_meta: n_merges         = 0
0.00.288.152 I llm_load_print_meta: vocab_only       = 0
0.00.288.152 I llm_load_print_meta: n_ctx_train      = 8192
0.00.288.152 I llm_load_print_meta: n_embd           = 2048
0.00.288.153 I llm_load_print_meta: n_layer          = 18
0.00.288.163 I llm_load_print_meta: n_head           = 8
0.00.288.164 I llm_load_print_meta: n_head_kv        = 1
0.00.288.165 I llm_load_print_meta: n_rot            = 256
0.00.288.165 I llm_load_print_meta: n_swa            = 0
0.00.288.165 I llm_load_print_meta: n_embd_head_k    = 256
0.00.288.166 I llm_load_print_meta: n_embd_head_v    = 256
0.00.288.166 I llm_load_print_meta: n_gqa            = 8
0.00.288.167 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.288.168 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.288.169 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.288.171 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.288.171 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.288.171 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.288.172 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.288.173 I llm_load_print_meta: n_ff             = 16384
0.00.288.173 I llm_load_print_meta: n_expert         = 0
0.00.288.173 I llm_load_print_meta: n_expert_used    = 0
0.00.288.173 I llm_load_print_meta: causal attn      = 1
0.00.288.174 I llm_load_print_meta: pooling type     = 0
0.00.288.174 I llm_load_print_meta: rope type        = 2
0.00.288.174 I llm_load_print_meta: rope scaling     = linear
0.00.288.176 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.288.176 I llm_load_print_meta: freq_scale_train = 1
0.00.288.177 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.288.177 I llm_load_print_meta: rope_finetuned   = unknown
0.00.288.177 I llm_load_print_meta: ssm_d_conv       = 0
0.00.288.178 I llm_load_print_meta: ssm_d_inner      = 0
0.00.288.178 I llm_load_print_meta: ssm_d_state      = 0
0.00.288.178 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.288.178 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.288.179 I llm_load_print_meta: model type       = 2B
0.00.288.179 I llm_load_print_meta: model ftype      = Q8_0
0.00.288.180 I llm_load_print_meta: model params     = 2.51 B
0.00.288.181 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.288.181 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.288.182 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.288.182 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.288.182 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.288.183 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.288.183 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.288.183 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.288.184 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.288.184 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.288.185 I llm_load_print_meta: max token length = 93
0.00.386.470 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.386.478 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.386.479 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.386.480 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.386.480 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.386.481 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.391.946 I llama_new_context_with_model: n_seq_max     = 1
0.00.391.954 I llama_new_context_with_model: n_ctx         = 4096
0.00.391.954 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.391.954 I llama_new_context_with_model: n_batch       = 2048
0.00.391.955 I llama_new_context_with_model: n_ubatch      = 512
0.00.391.955 I llama_new_context_with_model: flash_attn    = 0
0.00.391.959 I llama_new_context_with_model: freq_base     = 10000.0
0.00.391.960 I llama_new_context_with_model: freq_scale    = 1
0.00.391.961 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.407.859 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.407.875 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.407.968 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.409.331 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.409.337 I llama_new_context_with_model: graph nodes  = 601
0.00.409.337 I llama_new_context_with_model: graph splits = 1
0.00.409.340 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.498.652 I main: llama threadpool init, n_threads = 4
0.00.498.666 I 
0.00.498.739 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.498.742 I 
0.00.498.784 I sampler seed: 4168867263
0.00.498.795 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.498.807 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.498.810 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.498.811 I 
 increasities can be caused by a variety of factors, including:

- **Viral infection:** Viral infections can affect the nervous system and lead to inflammation and damage

0.02.792.315 I llama_perf_sampler_print:    sampling time =       4.86 ms /    33 runs   (    0.15 ms per token,  6790.12 tokens per second)
0.02.792.319 I llama_perf_context_print:        load time =     497.86 ms
0.02.792.320 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.792.323 I llama_perf_context_print:        eval time =    2273.53 ms /    32 runs   (   71.05 ms per token,    14.08 tokens per second)
0.02.792.324 I llama_perf_context_print:       total time =    2293.67 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.598 I build: 4182 (ab96610b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.795 I main: llama backend init
0.00.000.802 I main: load the model and apply lora adapter, if any
0.00.021.662 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.676 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.687 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.691 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.694 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.695 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.696 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.696 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.697 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.697 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.702 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.702 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.703 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.703 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.703 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.791 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.275 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.170 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.176 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.177 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.177 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.178 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.179 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.179 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.182 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.183 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.185 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.185 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.186 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.191 I llama_model_loader: - type  f32:   37 tensors
0.00.133.193 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.820 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.703 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.243 I llm_load_vocab: special tokens cache size = 5
0.00.273.509 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.525 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.526 I llm_load_print_meta: arch             = gemma
0.00.273.526 I llm_load_print_meta: vocab type       = SPM
0.00.273.527 I llm_load_print_meta: n_vocab          = 256000
0.00.273.527 I llm_load_print_meta: n_merges         = 0
0.00.273.527 I llm_load_print_meta: vocab_only       = 0
0.00.273.528 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.528 I llm_load_print_meta: n_embd           = 2048
0.00.273.528 I llm_load_print_meta: n_layer          = 18
0.00.273.538 I llm_load_print_meta: n_head           = 8
0.00.273.539 I llm_load_print_meta: n_head_kv        = 1
0.00.273.540 I llm_load_print_meta: n_rot            = 256
0.00.273.540 I llm_load_print_meta: n_swa            = 0
0.00.273.540 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.541 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.542 I llm_load_print_meta: n_gqa            = 8
0.00.273.543 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.544 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.545 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.546 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.547 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.547 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.548 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.549 I llm_load_print_meta: n_ff             = 16384
0.00.273.549 I llm_load_print_meta: n_expert         = 0
0.00.273.549 I llm_load_print_meta: n_expert_used    = 0
0.00.273.549 I llm_load_print_meta: causal attn      = 1
0.00.273.550 I llm_load_print_meta: pooling type     = 0
0.00.273.550 I llm_load_print_meta: rope type        = 2
0.00.273.550 I llm_load_print_meta: rope scaling     = linear
0.00.273.551 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.552 I llm_load_print_meta: freq_scale_train = 1
0.00.273.552 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.553 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.553 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.553 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.553 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.554 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.554 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.554 I llm_load_print_meta: model type       = 2B
0.00.273.555 I llm_load_print_meta: model ftype      = Q8_0
0.00.273.556 I llm_load_print_meta: model params     = 2.51 B
0.00.273.556 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.273.557 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.557 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.558 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.558 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.558 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.559 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.559 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.559 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.560 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.560 I llm_load_print_meta: max token length = 93
0.00.367.892 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.373.213 I llama_new_context_with_model: n_seq_max     = 1
0.00.373.220 I llama_new_context_with_model: n_ctx         = 4096
0.00.373.221 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.373.221 I llama_new_context_with_model: n_batch       = 2048
0.00.373.222 I llama_new_context_with_model: n_ubatch      = 512
0.00.373.223 I llama_new_context_with_model: flash_attn    = 0
0.00.373.225 I llama_new_context_with_model: freq_base     = 10000.0
0.00.373.226 I llama_new_context_with_model: freq_scale    = 1
0.00.373.227 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.388.120 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.388.135 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.388.229 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.389.508 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.389.514 I llama_new_context_with_model: graph nodes  = 601
0.00.389.514 I llama_new_context_with_model: graph splits = 1
0.00.389.516 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.475.628 I main: llama threadpool init, n_threads = 4
0.00.475.645 I 
0.00.475.723 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.475.726 I 
0.00.475.771 I sampler seed: 3296623003
0.00.475.782 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.475.786 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.475.787 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.475.787 I 
 increasities?

I cannot find that information in the provided context. [end of text]


0.01.505.092 I llama_perf_sampler_print:    sampling time =       2.29 ms /    16 runs   (    0.14 ms per token,  6974.72 tokens per second)
0.01.505.095 I llama_perf_context_print:        load time =     474.81 ms
0.01.505.096 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.505.097 I llama_perf_context_print:        eval time =    1020.08 ms /    15 runs   (   68.01 ms per token,    14.70 tokens per second)
0.01.505.098 I llama_perf_context_print:       total time =    1029.47 ms /    16 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.611 I build: 4182 (ab96610b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.842 I main: llama backend init
0.00.000.849 I main: load the model and apply lora adapter, if any
0.00.021.095 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.106 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.114 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.119 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.120 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.123 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.124 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.125 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.125 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.125 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.126 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.130 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.131 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.132 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.132 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.133 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.949 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.934 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.824 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.831 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.832 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.832 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.833 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.834 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.834 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.837 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.837 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.839 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.840 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.841 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.845 I llama_model_loader: - type  f32:   37 tensors
0.00.133.846 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.227 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.264.396 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.265.090 I llm_load_vocab: special tokens cache size = 5
0.00.286.501 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.286.517 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.286.518 I llm_load_print_meta: arch             = gemma
0.00.286.518 I llm_load_print_meta: vocab type       = SPM
0.00.286.519 I llm_load_print_meta: n_vocab          = 256000
0.00.286.519 I llm_load_print_meta: n_merges         = 0
0.00.286.520 I llm_load_print_meta: vocab_only       = 0
0.00.286.520 I llm_load_print_meta: n_ctx_train      = 8192
0.00.286.520 I llm_load_print_meta: n_embd           = 2048
0.00.286.521 I llm_load_print_meta: n_layer          = 18
0.00.286.533 I llm_load_print_meta: n_head           = 8
0.00.286.534 I llm_load_print_meta: n_head_kv        = 1
0.00.286.535 I llm_load_print_meta: n_rot            = 256
0.00.286.536 I llm_load_print_meta: n_swa            = 0
0.00.286.536 I llm_load_print_meta: n_embd_head_k    = 256
0.00.286.536 I llm_load_print_meta: n_embd_head_v    = 256
0.00.286.537 I llm_load_print_meta: n_gqa            = 8
0.00.286.538 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.286.539 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.286.540 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.286.542 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.286.542 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.286.543 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.286.544 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.286.545 I llm_load_print_meta: n_ff             = 16384
0.00.286.545 I llm_load_print_meta: n_expert         = 0
0.00.286.545 I llm_load_print_meta: n_expert_used    = 0
0.00.286.546 I llm_load_print_meta: causal attn      = 1
0.00.286.546 I llm_load_print_meta: pooling type     = 0
0.00.286.547 I llm_load_print_meta: rope type        = 2
0.00.286.547 I llm_load_print_meta: rope scaling     = linear
0.00.286.549 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.286.549 I llm_load_print_meta: freq_scale_train = 1
0.00.286.552 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.286.552 I llm_load_print_meta: rope_finetuned   = unknown
0.00.286.553 I llm_load_print_meta: ssm_d_conv       = 0
0.00.286.553 I llm_load_print_meta: ssm_d_inner      = 0
0.00.286.553 I llm_load_print_meta: ssm_d_state      = 0
0.00.286.553 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.286.553 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.286.554 I llm_load_print_meta: model type       = 2B
0.00.286.554 I llm_load_print_meta: model ftype      = Q8_0
0.00.286.555 I llm_load_print_meta: model params     = 2.51 B
0.00.286.556 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.286.556 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.286.557 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.286.557 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.286.558 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.286.558 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.286.559 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.286.559 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.286.560 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.286.560 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.286.560 I llm_load_print_meta: max token length = 93
0.00.361.448 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.361.455 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.361.456 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.361.457 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.361.458 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.361.458 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.366.642 I llama_new_context_with_model: n_seq_max     = 1
0.00.366.649 I llama_new_context_with_model: n_ctx         = 4096
0.00.366.649 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.366.649 I llama_new_context_with_model: n_batch       = 2048
0.00.366.650 I llama_new_context_with_model: n_ubatch      = 512
0.00.366.650 I llama_new_context_with_model: flash_attn    = 0
0.00.366.653 I llama_new_context_with_model: freq_base     = 10000.0
0.00.366.654 I llama_new_context_with_model: freq_scale    = 1
0.00.366.655 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.382.151 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.382.165 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.382.270 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.383.505 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.383.511 I llama_new_context_with_model: graph nodes  = 601
0.00.383.511 I llama_new_context_with_model: graph splits = 1
0.00.383.513 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.468.506 I main: llama threadpool init, n_threads = 4
0.00.468.522 I 
0.00.468.595 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.468.598 I 
0.00.468.646 I sampler seed: 2273818571
0.00.468.657 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.468.659 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.468.662 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.468.662 I 
 increadibly. [end of text]


0.00.760.511 I llama_perf_sampler_print:    sampling time =       0.61 ms /     5 runs   (    0.12 ms per token,  8250.83 tokens per second)
0.00.760.513 I llama_perf_context_print:        load time =     467.64 ms
0.00.760.515 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.760.517 I llama_perf_context_print:        eval time =     288.77 ms /     4 runs   (   72.19 ms per token,    13.85 tokens per second)
0.00.760.518 I llama_perf_context_print:       total time =     292.01 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.583 I build: 4182 (ab96610b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.769 I main: llama backend init
0.00.000.776 I main: load the model and apply lora adapter, if any
0.00.021.294 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.303 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.310 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.315 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.317 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.320 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.321 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.321 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.322 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.322 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.323 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.327 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.327 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.328 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.328 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.329 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.991 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.705 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.702 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.709 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.710 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.710 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.711 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.712 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.712 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.715 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.716 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.716 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.717 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.719 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.723 I llama_model_loader: - type  f32:   37 tensors
0.00.132.724 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.301 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.853 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.469 I llm_load_vocab: special tokens cache size = 5
0.00.282.666 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.687 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.687 I llm_load_print_meta: arch             = gemma
0.00.282.688 I llm_load_print_meta: vocab type       = SPM
0.00.282.688 I llm_load_print_meta: n_vocab          = 256000
0.00.282.689 I llm_load_print_meta: n_merges         = 0
0.00.282.689 I llm_load_print_meta: vocab_only       = 0
0.00.282.690 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.690 I llm_load_print_meta: n_embd           = 2048
0.00.282.709 I llm_load_print_meta: n_layer          = 18
0.00.282.722 I llm_load_print_meta: n_head           = 8
0.00.282.723 I llm_load_print_meta: n_head_kv        = 1
0.00.282.723 I llm_load_print_meta: n_rot            = 256
0.00.282.723 I llm_load_print_meta: n_swa            = 0
0.00.282.724 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.724 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.725 I llm_load_print_meta: n_gqa            = 8
0.00.282.726 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.727 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.728 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.730 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.730 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.730 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.731 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.732 I llm_load_print_meta: n_ff             = 16384
0.00.282.732 I llm_load_print_meta: n_expert         = 0
0.00.282.732 I llm_load_print_meta: n_expert_used    = 0
0.00.282.733 I llm_load_print_meta: causal attn      = 1
0.00.282.734 I llm_load_print_meta: pooling type     = 0
0.00.282.734 I llm_load_print_meta: rope type        = 2
0.00.282.734 I llm_load_print_meta: rope scaling     = linear
0.00.282.736 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.737 I llm_load_print_meta: freq_scale_train = 1
0.00.282.737 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.737 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.738 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.738 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.739 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.739 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.739 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.740 I llm_load_print_meta: model type       = 2B
0.00.282.740 I llm_load_print_meta: model ftype      = Q8_0
0.00.282.741 I llm_load_print_meta: model params     = 2.51 B
0.00.282.742 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.282.742 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.743 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.744 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.744 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.744 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.745 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.745 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.745 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.746 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.747 I llm_load_print_meta: max token length = 93
0.00.354.034 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.354.042 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.359.436 I llama_new_context_with_model: n_seq_max     = 1
0.00.359.442 I llama_new_context_with_model: n_ctx         = 4096
0.00.359.442 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.359.442 I llama_new_context_with_model: n_batch       = 2048
0.00.359.443 I llama_new_context_with_model: n_ubatch      = 512
0.00.359.444 I llama_new_context_with_model: flash_attn    = 0
0.00.359.448 I llama_new_context_with_model: freq_base     = 10000.0
0.00.359.449 I llama_new_context_with_model: freq_scale    = 1
0.00.359.450 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.374.352 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.374.367 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.374.468 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.375.806 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.375.811 I llama_new_context_with_model: graph nodes  = 601
0.00.375.811 I llama_new_context_with_model: graph splits = 1
0.00.375.813 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.466.027 I main: llama threadpool init, n_threads = 4
0.00.466.042 I 
0.00.466.116 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.466.120 I 
0.00.466.164 I sampler seed: 4261769873
0.00.466.175 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.466.184 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.466.184 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.466.184 I 
 increably. 

I am unable to generate a response that includes sexually suggestive or inappropriate content. [end of text]


0.02.078.579 I llama_perf_sampler_print:    sampling time =       3.43 ms /    22 runs   (    0.16 ms per token,  6423.36 tokens per second)
0.02.078.581 I llama_perf_context_print:        load time =     465.23 ms
0.02.078.582 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.078.584 I llama_perf_context_print:        eval time =    1599.05 ms /    21 runs   (   76.15 ms per token,    13.13 tokens per second)
0.02.078.585 I llama_perf_context_print:       total time =    1612.56 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.420s
user	0m23.977s
sys	0m9.394s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4182 (ab96610b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40241.61 ms
main:    total time = 40241.62 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.531 I build: 4182 (ab96610b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.722 I main: llama backend init
0.00.000.731 I main: load the model and apply lora adapter, if any
0.00.021.617 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.628 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.636 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.642 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.643 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.646 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.647 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.648 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.648 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.649 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.649 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.653 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.654 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.655 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.655 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.655 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.192 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.301 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.147 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.153 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.154 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.154 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.155 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.156 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.157 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.159 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.160 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.160 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.162 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.163 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.167 I llama_model_loader: - type  f32:   37 tensors
0.00.132.168 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.169 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.653 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.162 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.871 I llm_load_vocab: special tokens cache size = 5
0.00.274.169 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.189 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.190 I llm_load_print_meta: arch             = gemma
0.00.274.190 I llm_load_print_meta: vocab type       = SPM
0.00.274.191 I llm_load_print_meta: n_vocab          = 256000
0.00.274.191 I llm_load_print_meta: n_merges         = 0
0.00.274.192 I llm_load_print_meta: vocab_only       = 0
0.00.274.192 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.192 I llm_load_print_meta: n_embd           = 2048
0.00.274.193 I llm_load_print_meta: n_layer          = 18
0.00.274.204 I llm_load_print_meta: n_head           = 8
0.00.274.205 I llm_load_print_meta: n_head_kv        = 1
0.00.274.206 I llm_load_print_meta: n_rot            = 256
0.00.274.206 I llm_load_print_meta: n_swa            = 0
0.00.274.206 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.206 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.207 I llm_load_print_meta: n_gqa            = 8
0.00.274.208 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.209 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.210 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.211 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.212 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.212 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.212 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.213 I llm_load_print_meta: n_ff             = 16384
0.00.274.214 I llm_load_print_meta: n_expert         = 0
0.00.274.214 I llm_load_print_meta: n_expert_used    = 0
0.00.274.214 I llm_load_print_meta: causal attn      = 1
0.00.274.214 I llm_load_print_meta: pooling type     = 0
0.00.274.215 I llm_load_print_meta: rope type        = 2
0.00.274.216 I llm_load_print_meta: rope scaling     = linear
0.00.274.217 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.218 I llm_load_print_meta: freq_scale_train = 1
0.00.274.218 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.219 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.219 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.219 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.219 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.219 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.220 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.220 I llm_load_print_meta: model type       = 2B
0.00.274.221 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.274.221 I llm_load_print_meta: model params     = 2.51 B
0.00.274.222 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.274.222 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.223 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.223 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.224 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.224 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.224 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.225 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.225 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.226 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.226 I llm_load_print_meta: max token length = 93
0.00.333.367 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.333.375 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.333.376 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.333.377 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.333.377 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.333.378 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.338.476 I llama_new_context_with_model: n_seq_max     = 1
0.00.338.482 I llama_new_context_with_model: n_ctx         = 4096
0.00.338.483 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.338.483 I llama_new_context_with_model: n_batch       = 2048
0.00.338.484 I llama_new_context_with_model: n_ubatch      = 512
0.00.338.484 I llama_new_context_with_model: flash_attn    = 0
0.00.338.486 I llama_new_context_with_model: freq_base     = 10000.0
0.00.338.487 I llama_new_context_with_model: freq_scale    = 1
0.00.338.488 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.353.034 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.353.049 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.353.140 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.354.438 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.354.446 I llama_new_context_with_model: graph nodes  = 601
0.00.354.446 I llama_new_context_with_model: graph splits = 1
0.00.354.448 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.429.881 I main: llama threadpool init, n_threads = 4
0.00.429.896 I 
0.00.429.971 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.429.974 I 
0.00.430.022 I sampler seed: 4213572193
0.00.430.033 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.430.046 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.430.050 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.430.050 I 
 maneutruing in the context of social media.

**Social media maneutruing** is the practice of manipulating and distorting digital content to influence public opinion

0.02.033.389 I llama_perf_sampler_print:    sampling time =       5.22 ms /    33 runs   (    0.16 ms per token,  6326.69 tokens per second)
0.02.033.392 I llama_perf_context_print:        load time =     429.13 ms
0.02.033.394 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.033.396 I llama_perf_context_print:        eval time =    1583.35 ms /    32 runs   (   49.48 ms per token,    20.21 tokens per second)
0.02.033.397 I llama_perf_context_print:       total time =    1603.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4182 (ab96610b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40186.01 ms
main:    total time = 40186.01 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.179 I build: 4182 (ab96610b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.384 I main: llama backend init
0.00.000.390 I main: load the model and apply lora adapter, if any
0.00.020.841 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.859 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.866 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.867 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.871 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.872 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.873 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.873 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.874 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.874 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.878 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.879 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.879 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.880 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.880 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.932 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.570 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.472 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.478 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.479 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.480 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.480 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.481 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.482 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.485 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.485 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.489 I llama_model_loader: - type  f32:   37 tensors
0.00.132.490 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.491 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.235 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.302 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.870 I llm_load_vocab: special tokens cache size = 5
0.00.269.045 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.062 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.062 I llm_load_print_meta: arch             = gemma
0.00.269.063 I llm_load_print_meta: vocab type       = SPM
0.00.269.063 I llm_load_print_meta: n_vocab          = 256000
0.00.269.064 I llm_load_print_meta: n_merges         = 0
0.00.269.064 I llm_load_print_meta: vocab_only       = 0
0.00.269.065 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.065 I llm_load_print_meta: n_embd           = 2048
0.00.269.065 I llm_load_print_meta: n_layer          = 18
0.00.269.077 I llm_load_print_meta: n_head           = 8
0.00.269.078 I llm_load_print_meta: n_head_kv        = 1
0.00.269.079 I llm_load_print_meta: n_rot            = 256
0.00.269.079 I llm_load_print_meta: n_swa            = 0
0.00.269.079 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.079 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.080 I llm_load_print_meta: n_gqa            = 8
0.00.269.081 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.082 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.083 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.084 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.085 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.085 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.085 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.086 I llm_load_print_meta: n_ff             = 16384
0.00.269.086 I llm_load_print_meta: n_expert         = 0
0.00.269.087 I llm_load_print_meta: n_expert_used    = 0
0.00.269.087 I llm_load_print_meta: causal attn      = 1
0.00.269.087 I llm_load_print_meta: pooling type     = 0
0.00.269.087 I llm_load_print_meta: rope type        = 2
0.00.269.088 I llm_load_print_meta: rope scaling     = linear
0.00.269.090 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.090 I llm_load_print_meta: freq_scale_train = 1
0.00.269.091 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.091 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.091 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.092 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.092 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.092 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.092 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.093 I llm_load_print_meta: model type       = 2B
0.00.269.093 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.269.094 I llm_load_print_meta: model params     = 2.51 B
0.00.269.095 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.269.095 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.095 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.096 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.096 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.096 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.097 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.097 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.097 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.098 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.098 I llm_load_print_meta: max token length = 93
0.00.324.270 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.329.476 I llama_new_context_with_model: n_seq_max     = 1
0.00.329.483 I llama_new_context_with_model: n_ctx         = 4096
0.00.329.483 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.329.483 I llama_new_context_with_model: n_batch       = 2048
0.00.329.484 I llama_new_context_with_model: n_ubatch      = 512
0.00.329.485 I llama_new_context_with_model: flash_attn    = 0
0.00.329.488 I llama_new_context_with_model: freq_base     = 10000.0
0.00.329.489 I llama_new_context_with_model: freq_scale    = 1
0.00.329.490 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.345.314 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.345.329 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.345.426 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.346.688 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.346.695 I llama_new_context_with_model: graph nodes  = 601
0.00.346.695 I llama_new_context_with_model: graph splits = 1
0.00.346.697 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.422.046 I main: llama threadpool init, n_threads = 4
0.00.422.063 I 
0.00.422.135 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.422.139 I 
0.00.422.183 I sampler seed: 3908563941
0.00.422.196 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.422.204 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.422.206 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.422.206 I 
 strick and the enigmatic Eldritch entity.

**Summary:**

Eldritch, a terrifying entity from another dimension, possesses Strickland and his daughter, Isolde,

0.02.013.559 I llama_perf_sampler_print:    sampling time =       5.45 ms /    33 runs   (    0.17 ms per token,  6055.05 tokens per second)
0.02.013.561 I llama_perf_context_print:        load time =     421.64 ms
0.02.013.562 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.013.563 I llama_perf_context_print:        eval time =    1571.79 ms /    32 runs   (   49.12 ms per token,    20.36 tokens per second)
0.02.013.564 I llama_perf_context_print:       total time =    1591.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.288s
user	10m24.378s
sys	0m7.111s
