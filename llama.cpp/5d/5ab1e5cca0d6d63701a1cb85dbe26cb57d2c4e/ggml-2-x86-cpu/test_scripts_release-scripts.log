+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.550 I build: 3874 (5d5ab1e5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.742 I main: llama backend init
0.00.001.822 I main: load the model and apply lora adapter, if any
0.00.022.190 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.237 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.247 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.257 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.261 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.265 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.266 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.267 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.267 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.268 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.268 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.273 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.274 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.274 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.275 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.275 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.975 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.759 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.604 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.610 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.611 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.612 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.612 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.613 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.614 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.617 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.618 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.618 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.619 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.620 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.624 I llama_model_loader: - type  f32:   37 tensors
0.00.133.627 I llama_model_loader: - type q8_0:  127 tensors
0.00.196.128 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.213.124 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.213.917 I llm_load_vocab: special tokens cache size = 5
0.00.234.991 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.235.006 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.235.006 I llm_load_print_meta: arch             = gemma
0.00.235.006 I llm_load_print_meta: vocab type       = SPM
0.00.235.007 I llm_load_print_meta: n_vocab          = 256000
0.00.235.008 I llm_load_print_meta: n_merges         = 0
0.00.235.008 I llm_load_print_meta: vocab_only       = 0
0.00.235.008 I llm_load_print_meta: n_ctx_train      = 8192
0.00.235.009 I llm_load_print_meta: n_embd           = 2048
0.00.235.009 I llm_load_print_meta: n_layer          = 18
0.00.235.022 I llm_load_print_meta: n_head           = 8
0.00.235.023 I llm_load_print_meta: n_head_kv        = 1
0.00.235.023 I llm_load_print_meta: n_rot            = 256
0.00.235.024 I llm_load_print_meta: n_swa            = 0
0.00.235.024 I llm_load_print_meta: n_embd_head_k    = 256
0.00.235.024 I llm_load_print_meta: n_embd_head_v    = 256
0.00.235.025 I llm_load_print_meta: n_gqa            = 8
0.00.235.026 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.235.027 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.235.028 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.235.029 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.235.029 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.235.030 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.235.030 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.235.031 I llm_load_print_meta: n_ff             = 16384
0.00.235.032 I llm_load_print_meta: n_expert         = 0
0.00.235.032 I llm_load_print_meta: n_expert_used    = 0
0.00.235.032 I llm_load_print_meta: causal attn      = 1
0.00.235.033 I llm_load_print_meta: pooling type     = 0
0.00.235.033 I llm_load_print_meta: rope type        = 2
0.00.235.033 I llm_load_print_meta: rope scaling     = linear
0.00.235.034 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.235.035 I llm_load_print_meta: freq_scale_train = 1
0.00.235.035 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.235.036 I llm_load_print_meta: rope_finetuned   = unknown
0.00.235.036 I llm_load_print_meta: ssm_d_conv       = 0
0.00.235.036 I llm_load_print_meta: ssm_d_inner      = 0
0.00.235.036 I llm_load_print_meta: ssm_d_state      = 0
0.00.235.037 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.235.037 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.235.038 I llm_load_print_meta: model type       = 2B
0.00.235.038 I llm_load_print_meta: model ftype      = Q8_0
0.00.235.040 I llm_load_print_meta: model params     = 2.51 B
0.00.235.040 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.235.041 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.235.041 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.235.041 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.235.041 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.235.042 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.235.042 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.235.043 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.235.043 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.235.044 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.235.044 I llm_load_print_meta: max token length = 93
0.00.235.070 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.332.131 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.332.138 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.332.139 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.332.140 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.332.140 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.332.141 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.337.269 I llama_new_context_with_model: n_ctx      = 8192
0.00.337.276 I llama_new_context_with_model: n_batch    = 2048
0.00.337.277 I llama_new_context_with_model: n_ubatch   = 512
0.00.337.278 I llama_new_context_with_model: flash_attn = 0
0.00.337.281 I llama_new_context_with_model: freq_base  = 10000.0
0.00.337.282 I llama_new_context_with_model: freq_scale = 1
0.00.367.792 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.367.807 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.367.900 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.368.791 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.368.800 I llama_new_context_with_model: graph nodes  = 601
0.00.368.801 I llama_new_context_with_model: graph splits = 1
0.00.368.803 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.463.258 I main: llama threadpool init, n_threads = 4
0.00.463.270 I 
0.00.463.346 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.463.350 I 
0.00.463.388 I sampler seed: 2796814102
0.00.463.398 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.463.401 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.463.401 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.463.402 I 
 increasities, a vibrant community of enthusiasts who share their passion for science, technology, engineering, and mathematics.

**Here are some of the key points about

0.02.786.333 I llama_perf_sampler_print:    sampling time =       5.46 ms /    33 runs   (    0.17 ms per token,  6042.85 tokens per second)
0.02.786.335 I llama_perf_context_print:        load time =     461.37 ms
0.02.786.337 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.786.338 I llama_perf_context_print:        eval time =    2303.24 ms /    32 runs   (   71.98 ms per token,    13.89 tokens per second)
0.02.786.339 I llama_perf_context_print:       total time =    2323.08 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.613 I build: 3874 (5d5ab1e5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.813 I main: llama backend init
0.00.001.899 I main: load the model and apply lora adapter, if any
0.00.022.193 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.209 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.216 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.217 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.221 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.222 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.222 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.223 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.223 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.224 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.229 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.229 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.230 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.230 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.231 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.623 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.103 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.948 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.955 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.956 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.957 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.957 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.958 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.959 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.962 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.962 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.963 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.964 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.965 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.969 I llama_model_loader: - type  f32:   37 tensors
0.00.132.972 I llama_model_loader: - type q8_0:  127 tensors
0.00.197.283 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.217.356 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.218.138 I llm_load_vocab: special tokens cache size = 5
0.00.239.367 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.239.382 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.239.383 I llm_load_print_meta: arch             = gemma
0.00.239.383 I llm_load_print_meta: vocab type       = SPM
0.00.239.384 I llm_load_print_meta: n_vocab          = 256000
0.00.239.385 I llm_load_print_meta: n_merges         = 0
0.00.239.385 I llm_load_print_meta: vocab_only       = 0
0.00.239.385 I llm_load_print_meta: n_ctx_train      = 8192
0.00.239.385 I llm_load_print_meta: n_embd           = 2048
0.00.239.386 I llm_load_print_meta: n_layer          = 18
0.00.239.398 I llm_load_print_meta: n_head           = 8
0.00.239.399 I llm_load_print_meta: n_head_kv        = 1
0.00.239.399 I llm_load_print_meta: n_rot            = 256
0.00.239.400 I llm_load_print_meta: n_swa            = 0
0.00.239.400 I llm_load_print_meta: n_embd_head_k    = 256
0.00.239.400 I llm_load_print_meta: n_embd_head_v    = 256
0.00.239.401 I llm_load_print_meta: n_gqa            = 8
0.00.239.402 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.239.403 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.239.404 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.239.405 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.239.405 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.239.406 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.239.406 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.239.407 I llm_load_print_meta: n_ff             = 16384
0.00.239.408 I llm_load_print_meta: n_expert         = 0
0.00.239.408 I llm_load_print_meta: n_expert_used    = 0
0.00.239.408 I llm_load_print_meta: causal attn      = 1
0.00.239.409 I llm_load_print_meta: pooling type     = 0
0.00.239.409 I llm_load_print_meta: rope type        = 2
0.00.239.409 I llm_load_print_meta: rope scaling     = linear
0.00.239.411 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.239.411 I llm_load_print_meta: freq_scale_train = 1
0.00.239.411 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.239.412 I llm_load_print_meta: rope_finetuned   = unknown
0.00.239.412 I llm_load_print_meta: ssm_d_conv       = 0
0.00.239.412 I llm_load_print_meta: ssm_d_inner      = 0
0.00.239.413 I llm_load_print_meta: ssm_d_state      = 0
0.00.239.413 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.239.413 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.239.414 I llm_load_print_meta: model type       = 2B
0.00.239.414 I llm_load_print_meta: model ftype      = Q8_0
0.00.239.415 I llm_load_print_meta: model params     = 2.51 B
0.00.239.416 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.239.416 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.239.417 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.239.417 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.239.417 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.239.418 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.239.418 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.239.418 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.239.419 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.239.419 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.239.420 I llm_load_print_meta: max token length = 93
0.00.239.448 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.332.762 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.337.847 I llama_new_context_with_model: n_ctx      = 8192
0.00.337.853 I llama_new_context_with_model: n_batch    = 2048
0.00.337.853 I llama_new_context_with_model: n_ubatch   = 512
0.00.337.854 I llama_new_context_with_model: flash_attn = 0
0.00.337.856 I llama_new_context_with_model: freq_base  = 10000.0
0.00.337.857 I llama_new_context_with_model: freq_scale = 1
0.00.368.578 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.368.593 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.368.684 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.369.554 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.369.561 I llama_new_context_with_model: graph nodes  = 601
0.00.369.561 I llama_new_context_with_model: graph splits = 1
0.00.369.563 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.460.817 I main: llama threadpool init, n_threads = 4
0.00.460.830 I 
0.00.460.910 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.460.913 I 
0.00.460.951 I sampler seed: 4160638486
0.00.460.961 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.460.964 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.460.965 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.460.965 I 
 increasels, the kind that live in the upper atmosphere.

The increasels are tiny, about the size of a pea. They are made of a thin

0.02.689.357 I llama_perf_sampler_print:    sampling time =       5.59 ms /    33 runs   (    0.17 ms per token,  5906.57 tokens per second)
0.02.689.360 I llama_perf_context_print:        load time =     458.85 ms
0.02.689.361 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.689.362 I llama_perf_context_print:        eval time =    2209.55 ms /    32 runs   (   69.05 ms per token,    14.48 tokens per second)
0.02.689.363 I llama_perf_context_print:       total time =    2228.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.569 I build: 3874 (5d5ab1e5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.800 I main: llama backend init
0.00.001.932 I main: load the model and apply lora adapter, if any
0.00.022.364 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.416 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.425 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.434 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.435 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.440 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.445 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.446 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.446 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.447 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.448 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.454 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.455 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.456 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.457 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.458 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.378 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.131.843 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.138.712 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.138.720 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.138.720 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.138.721 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.138.722 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.138.723 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.138.724 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.138.727 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.138.727 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.138.728 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.138.728 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.138.729 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.138.733 I llama_model_loader: - type  f32:   37 tensors
0.00.138.735 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.538 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.218.641 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.219.422 I llm_load_vocab: special tokens cache size = 5
0.00.243.360 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.243.378 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.243.378 I llm_load_print_meta: arch             = gemma
0.00.243.379 I llm_load_print_meta: vocab type       = SPM
0.00.243.380 I llm_load_print_meta: n_vocab          = 256000
0.00.243.380 I llm_load_print_meta: n_merges         = 0
0.00.243.381 I llm_load_print_meta: vocab_only       = 0
0.00.243.381 I llm_load_print_meta: n_ctx_train      = 8192
0.00.243.381 I llm_load_print_meta: n_embd           = 2048
0.00.243.382 I llm_load_print_meta: n_layer          = 18
0.00.243.396 I llm_load_print_meta: n_head           = 8
0.00.243.397 I llm_load_print_meta: n_head_kv        = 1
0.00.243.398 I llm_load_print_meta: n_rot            = 256
0.00.243.398 I llm_load_print_meta: n_swa            = 0
0.00.243.398 I llm_load_print_meta: n_embd_head_k    = 256
0.00.243.399 I llm_load_print_meta: n_embd_head_v    = 256
0.00.243.400 I llm_load_print_meta: n_gqa            = 8
0.00.243.401 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.243.404 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.243.405 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.243.406 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.243.407 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.243.407 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.243.408 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.243.409 I llm_load_print_meta: n_ff             = 16384
0.00.243.410 I llm_load_print_meta: n_expert         = 0
0.00.243.410 I llm_load_print_meta: n_expert_used    = 0
0.00.243.410 I llm_load_print_meta: causal attn      = 1
0.00.243.410 I llm_load_print_meta: pooling type     = 0
0.00.243.411 I llm_load_print_meta: rope type        = 2
0.00.243.411 I llm_load_print_meta: rope scaling     = linear
0.00.243.412 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.243.413 I llm_load_print_meta: freq_scale_train = 1
0.00.243.413 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.243.414 I llm_load_print_meta: rope_finetuned   = unknown
0.00.243.414 I llm_load_print_meta: ssm_d_conv       = 0
0.00.243.414 I llm_load_print_meta: ssm_d_inner      = 0
0.00.243.414 I llm_load_print_meta: ssm_d_state      = 0
0.00.243.415 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.243.415 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.243.416 I llm_load_print_meta: model type       = 2B
0.00.243.417 I llm_load_print_meta: model ftype      = Q8_0
0.00.243.418 I llm_load_print_meta: model params     = 2.51 B
0.00.243.418 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.243.419 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.243.419 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.243.419 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.243.420 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.243.420 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.243.421 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.243.421 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.243.421 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.243.422 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.243.422 I llm_load_print_meta: max token length = 93
0.00.243.444 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.320.657 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.320.665 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.320.666 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.320.667 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.320.667 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.320.668 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.326.960 I llama_new_context_with_model: n_ctx      = 8192
0.00.326.969 I llama_new_context_with_model: n_batch    = 2048
0.00.326.969 I llama_new_context_with_model: n_ubatch   = 512
0.00.326.970 I llama_new_context_with_model: flash_attn = 0
0.00.326.973 I llama_new_context_with_model: freq_base  = 10000.0
0.00.326.974 I llama_new_context_with_model: freq_scale = 1
0.00.357.015 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.357.030 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.357.125 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.012 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.358.021 I llama_new_context_with_model: graph nodes  = 601
0.00.358.021 I llama_new_context_with_model: graph splits = 1
0.00.358.023 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.451.563 I main: llama threadpool init, n_threads = 4
0.00.451.576 I 
0.00.451.659 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.451.663 I 
0.00.451.705 I sampler seed: 331465159
0.00.451.716 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.451.720 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.451.720 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.451.721 I 
 increasities, and the rise of the internet.

**Discuss the impact of the internet on the elderly.**

**Discuss the implications of the internet for elderly

0.02.784.444 I llama_perf_sampler_print:    sampling time =       5.44 ms /    33 runs   (    0.16 ms per token,  6065.06 tokens per second)
0.02.784.446 I llama_perf_context_print:        load time =     449.55 ms
0.02.784.448 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.784.450 I llama_perf_context_print:        eval time =    2313.74 ms /    32 runs   (   72.30 ms per token,    13.83 tokens per second)
0.02.784.451 I llama_perf_context_print:       total time =    2332.89 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.573 I build: 3874 (5d5ab1e5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.788 I main: llama backend init
0.00.001.960 I main: load the model and apply lora adapter, if any
0.00.022.544 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.595 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.604 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.612 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.614 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.619 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.623 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.624 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.625 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.626 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.627 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.634 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.635 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.636 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.636 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.637 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.710 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.625 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.522 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.529 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.530 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.530 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.531 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.532 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.533 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.535 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.536 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.537 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.537 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.538 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.541 I llama_model_loader: - type  f32:   37 tensors
0.00.133.544 I llama_model_loader: - type q8_0:  127 tensors
0.00.194.591 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.214.561 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.215.435 I llm_load_vocab: special tokens cache size = 5
0.00.236.613 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.236.627 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.236.628 I llm_load_print_meta: arch             = gemma
0.00.236.628 I llm_load_print_meta: vocab type       = SPM
0.00.236.629 I llm_load_print_meta: n_vocab          = 256000
0.00.236.629 I llm_load_print_meta: n_merges         = 0
0.00.236.630 I llm_load_print_meta: vocab_only       = 0
0.00.236.631 I llm_load_print_meta: n_ctx_train      = 8192
0.00.236.631 I llm_load_print_meta: n_embd           = 2048
0.00.236.631 I llm_load_print_meta: n_layer          = 18
0.00.236.643 I llm_load_print_meta: n_head           = 8
0.00.236.644 I llm_load_print_meta: n_head_kv        = 1
0.00.236.644 I llm_load_print_meta: n_rot            = 256
0.00.236.644 I llm_load_print_meta: n_swa            = 0
0.00.236.645 I llm_load_print_meta: n_embd_head_k    = 256
0.00.236.645 I llm_load_print_meta: n_embd_head_v    = 256
0.00.236.646 I llm_load_print_meta: n_gqa            = 8
0.00.236.647 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.236.648 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.236.649 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.236.650 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.236.650 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.236.651 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.236.651 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.236.652 I llm_load_print_meta: n_ff             = 16384
0.00.236.653 I llm_load_print_meta: n_expert         = 0
0.00.236.653 I llm_load_print_meta: n_expert_used    = 0
0.00.236.653 I llm_load_print_meta: causal attn      = 1
0.00.236.654 I llm_load_print_meta: pooling type     = 0
0.00.236.654 I llm_load_print_meta: rope type        = 2
0.00.236.654 I llm_load_print_meta: rope scaling     = linear
0.00.236.655 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.236.656 I llm_load_print_meta: freq_scale_train = 1
0.00.236.656 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.236.657 I llm_load_print_meta: rope_finetuned   = unknown
0.00.236.657 I llm_load_print_meta: ssm_d_conv       = 0
0.00.236.657 I llm_load_print_meta: ssm_d_inner      = 0
0.00.236.658 I llm_load_print_meta: ssm_d_state      = 0
0.00.236.658 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.236.659 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.236.659 I llm_load_print_meta: model type       = 2B
0.00.236.660 I llm_load_print_meta: model ftype      = Q8_0
0.00.236.661 I llm_load_print_meta: model params     = 2.51 B
0.00.236.662 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.236.662 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.236.663 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.236.663 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.236.663 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.236.664 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.236.664 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.236.665 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.236.665 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.236.666 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.236.666 I llm_load_print_meta: max token length = 93
0.00.236.694 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.308.013 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.308.023 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.313.164 I llama_new_context_with_model: n_ctx      = 8192
0.00.313.184 I llama_new_context_with_model: n_batch    = 2048
0.00.313.184 I llama_new_context_with_model: n_ubatch   = 512
0.00.313.185 I llama_new_context_with_model: flash_attn = 0
0.00.313.189 I llama_new_context_with_model: freq_base  = 10000.0
0.00.313.190 I llama_new_context_with_model: freq_scale = 1
0.00.343.652 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.343.670 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.343.762 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.665 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.344.673 I llama_new_context_with_model: graph nodes  = 601
0.00.344.673 I llama_new_context_with_model: graph splits = 1
0.00.344.675 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.441.302 I main: llama threadpool init, n_threads = 4
0.00.441.314 I 
0.00.441.393 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.441.398 I 
0.00.441.441 I sampler seed: 3869741805
0.00.441.450 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.441.452 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.441.453 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.441.454 I 
 maneuvled

Answer: Unraveling

Unraveling is a complex process that requires patience and careful attention to detail. It involves carefully examining something to

0.02.917.913 I llama_perf_sampler_print:    sampling time =       5.95 ms /    33 runs   (    0.18 ms per token,  5549.02 tokens per second)
0.02.917.916 I llama_perf_context_print:        load time =     439.26 ms
0.02.917.917 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.917.920 I llama_perf_context_print:        eval time =    2456.44 ms /    32 runs   (   76.76 ms per token,    13.03 tokens per second)
0.02.917.931 I llama_perf_context_print:       total time =    2476.62 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.926s
user	0m40.332s
sys	0m9.543s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3874 (5d5ab1e5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32036.98 ms
main:    total time = 32036.98 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.577 I build: 3874 (5d5ab1e5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.785 I main: llama backend init
0.00.001.900 I main: load the model and apply lora adapter, if any
0.00.021.822 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.873 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.883 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.889 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.890 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.894 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.895 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.895 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.896 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.906 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.907 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.913 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.913 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.914 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.915 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.916 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.230 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.593 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.407 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.414 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.415 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.415 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.416 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.417 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.418 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.421 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.421 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.422 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.423 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.424 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.428 I llama_model_loader: - type  f32:   37 tensors
0.00.132.431 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.431 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.437 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.221.974 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.222.780 I llm_load_vocab: special tokens cache size = 5
0.00.244.188 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.244.207 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.244.207 I llm_load_print_meta: arch             = gemma
0.00.244.208 I llm_load_print_meta: vocab type       = SPM
0.00.244.208 I llm_load_print_meta: n_vocab          = 256000
0.00.244.209 I llm_load_print_meta: n_merges         = 0
0.00.244.209 I llm_load_print_meta: vocab_only       = 0
0.00.244.210 I llm_load_print_meta: n_ctx_train      = 8192
0.00.244.210 I llm_load_print_meta: n_embd           = 2048
0.00.244.210 I llm_load_print_meta: n_layer          = 18
0.00.244.225 I llm_load_print_meta: n_head           = 8
0.00.244.226 I llm_load_print_meta: n_head_kv        = 1
0.00.244.226 I llm_load_print_meta: n_rot            = 256
0.00.244.226 I llm_load_print_meta: n_swa            = 0
0.00.244.226 I llm_load_print_meta: n_embd_head_k    = 256
0.00.244.227 I llm_load_print_meta: n_embd_head_v    = 256
0.00.244.228 I llm_load_print_meta: n_gqa            = 8
0.00.244.229 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.244.230 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.244.230 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.244.232 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.244.232 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.244.232 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.244.233 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.244.234 I llm_load_print_meta: n_ff             = 16384
0.00.244.234 I llm_load_print_meta: n_expert         = 0
0.00.244.234 I llm_load_print_meta: n_expert_used    = 0
0.00.244.235 I llm_load_print_meta: causal attn      = 1
0.00.244.235 I llm_load_print_meta: pooling type     = 0
0.00.244.235 I llm_load_print_meta: rope type        = 2
0.00.244.235 I llm_load_print_meta: rope scaling     = linear
0.00.244.237 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.244.237 I llm_load_print_meta: freq_scale_train = 1
0.00.244.237 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.244.238 I llm_load_print_meta: rope_finetuned   = unknown
0.00.244.238 I llm_load_print_meta: ssm_d_conv       = 0
0.00.244.239 I llm_load_print_meta: ssm_d_inner      = 0
0.00.244.239 I llm_load_print_meta: ssm_d_state      = 0
0.00.244.239 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.244.239 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.244.240 I llm_load_print_meta: model type       = 2B
0.00.244.240 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.244.241 I llm_load_print_meta: model params     = 2.51 B
0.00.244.242 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.244.242 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.244.242 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.244.243 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.244.243 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.244.243 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.244.244 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.244.244 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.244.245 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.244.245 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.244.246 I llm_load_print_meta: max token length = 93
0.00.244.268 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.301.003 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.301.011 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.301.012 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.301.013 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.301.013 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.301.014 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.306.066 I llama_new_context_with_model: n_ctx      = 8192
0.00.306.074 I llama_new_context_with_model: n_batch    = 2048
0.00.306.074 I llama_new_context_with_model: n_ubatch   = 512
0.00.306.075 I llama_new_context_with_model: flash_attn = 0
0.00.306.078 I llama_new_context_with_model: freq_base  = 10000.0
0.00.306.079 I llama_new_context_with_model: freq_scale = 1
0.00.336.105 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.336.121 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.336.222 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.337.143 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.337.152 I llama_new_context_with_model: graph nodes  = 601
0.00.337.153 I llama_new_context_with_model: graph splits = 1
0.00.337.155 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.420.787 I main: llama threadpool init, n_threads = 4
0.00.420.800 I 
0.00.420.880 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.420.883 I 
0.00.420.920 I sampler seed: 2003428295
0.00.420.929 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.420.932 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.420.933 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.420.933 I 
 maneutruing that the narrator is an observer and not a participant in the events described. This is a common stylistic feature in literary analysis that allows readers to engage

0.02.115.417 I llama_perf_sampler_print:    sampling time =       5.74 ms /    33 runs   (    0.17 ms per token,  5749.13 tokens per second)
0.02.115.419 I llama_perf_context_print:        load time =     418.81 ms
0.02.115.421 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.115.422 I llama_perf_context_print:        eval time =    1674.65 ms /    32 runs   (   52.33 ms per token,    19.11 tokens per second)
0.02.115.423 I llama_perf_context_print:       total time =    1694.64 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3874 (5d5ab1e5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32139.35 ms
main:    total time = 32139.35 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.581 I build: 3874 (5d5ab1e5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.776 I main: llama backend init
0.00.001.862 I main: load the model and apply lora adapter, if any
0.00.022.182 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.195 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.203 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.204 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.209 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.209 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.210 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.211 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.211 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.212 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.217 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.218 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.219 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.220 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.220 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.695 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.138 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.973 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.981 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.981 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.982 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.983 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.984 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.985 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.989 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.990 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.994 I llama_model_loader: - type  f32:   37 tensors
0.00.132.997 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.998 I llama_model_loader: - type q6_K:   19 tensors
0.00.208.869 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.229.284 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.230.112 I llm_load_vocab: special tokens cache size = 5
0.00.251.448 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.251.464 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.251.464 I llm_load_print_meta: arch             = gemma
0.00.251.465 I llm_load_print_meta: vocab type       = SPM
0.00.251.465 I llm_load_print_meta: n_vocab          = 256000
0.00.251.466 I llm_load_print_meta: n_merges         = 0
0.00.251.466 I llm_load_print_meta: vocab_only       = 0
0.00.251.467 I llm_load_print_meta: n_ctx_train      = 8192
0.00.251.467 I llm_load_print_meta: n_embd           = 2048
0.00.251.467 I llm_load_print_meta: n_layer          = 18
0.00.251.482 I llm_load_print_meta: n_head           = 8
0.00.251.482 I llm_load_print_meta: n_head_kv        = 1
0.00.251.483 I llm_load_print_meta: n_rot            = 256
0.00.251.483 I llm_load_print_meta: n_swa            = 0
0.00.251.483 I llm_load_print_meta: n_embd_head_k    = 256
0.00.251.484 I llm_load_print_meta: n_embd_head_v    = 256
0.00.251.485 I llm_load_print_meta: n_gqa            = 8
0.00.251.486 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.251.486 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.251.487 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.251.488 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.251.489 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.251.489 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.251.490 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.251.490 I llm_load_print_meta: n_ff             = 16384
0.00.251.491 I llm_load_print_meta: n_expert         = 0
0.00.251.491 I llm_load_print_meta: n_expert_used    = 0
0.00.251.492 I llm_load_print_meta: causal attn      = 1
0.00.251.492 I llm_load_print_meta: pooling type     = 0
0.00.251.492 I llm_load_print_meta: rope type        = 2
0.00.251.492 I llm_load_print_meta: rope scaling     = linear
0.00.251.494 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.251.494 I llm_load_print_meta: freq_scale_train = 1
0.00.251.495 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.251.495 I llm_load_print_meta: rope_finetuned   = unknown
0.00.251.495 I llm_load_print_meta: ssm_d_conv       = 0
0.00.251.495 I llm_load_print_meta: ssm_d_inner      = 0
0.00.251.496 I llm_load_print_meta: ssm_d_state      = 0
0.00.251.496 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.251.496 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.251.497 I llm_load_print_meta: model type       = 2B
0.00.251.497 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.251.498 I llm_load_print_meta: model params     = 2.51 B
0.00.251.499 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.251.499 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.251.500 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.251.500 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.251.500 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.251.501 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.251.501 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.251.501 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.251.502 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.251.502 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.251.503 I llm_load_print_meta: max token length = 93
0.00.251.525 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.308.936 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.313.963 I llama_new_context_with_model: n_ctx      = 8192
0.00.313.971 I llama_new_context_with_model: n_batch    = 2048
0.00.313.971 I llama_new_context_with_model: n_ubatch   = 512
0.00.313.972 I llama_new_context_with_model: flash_attn = 0
0.00.313.975 I llama_new_context_with_model: freq_base  = 10000.0
0.00.313.976 I llama_new_context_with_model: freq_scale = 1
0.00.344.780 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.344.799 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.344.890 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.345.737 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.345.744 I llama_new_context_with_model: graph nodes  = 601
0.00.345.745 I llama_new_context_with_model: graph splits = 1
0.00.345.747 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.429.318 I main: llama threadpool init, n_threads = 4
0.00.429.332 I 
0.00.429.414 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.429.417 I 
0.00.429.455 I sampler seed: 226855901
0.00.429.464 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.429.467 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.429.468 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.429.468 I 
 increamically. [end of text]


0.00.645.993 I llama_perf_sampler_print:    sampling time =       0.77 ms /     5 runs   (    0.15 ms per token,  6459.95 tokens per second)
0.00.645.996 I llama_perf_context_print:        load time =     427.39 ms
0.00.645.997 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.645.998 I llama_perf_context_print:        eval time =     213.42 ms /     4 runs   (   53.35 ms per token,    18.74 tokens per second)
0.00.645.999 I llama_perf_context_print:       total time =     216.68 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.013s
user	8m9.878s
sys	0m7.133s
