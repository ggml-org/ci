+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.667 I build: 3874 (5d5ab1e5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.865 I main: llama backend init
0.00.002.811 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.002 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.219 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.311 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.322 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.324 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.328 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.332 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.333 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.335 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.336 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.337 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.344 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.345 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.346 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.347 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.348 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.143 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.463 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.416 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.425 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.426 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.427 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.428 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.429 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.430 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.435 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.436 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.437 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.437 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.438 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.447 I llama_model_loader: - type  f32:   37 tensors
0.00.268.451 I llama_model_loader: - type q8_0:  127 tensors
0.00.442.228 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.471.637 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.472.706 I llm_load_vocab: special tokens cache size = 5
0.00.567.251 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.567.313 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.567.321 I llm_load_print_meta: arch             = gemma
0.00.567.323 I llm_load_print_meta: vocab type       = SPM
0.00.567.324 I llm_load_print_meta: n_vocab          = 256000
0.00.567.326 I llm_load_print_meta: n_merges         = 0
0.00.567.327 I llm_load_print_meta: vocab_only       = 0
0.00.567.327 I llm_load_print_meta: n_ctx_train      = 8192
0.00.567.327 I llm_load_print_meta: n_embd           = 2048
0.00.567.328 I llm_load_print_meta: n_layer          = 18
0.00.567.394 I llm_load_print_meta: n_head           = 8
0.00.567.417 I llm_load_print_meta: n_head_kv        = 1
0.00.567.421 I llm_load_print_meta: n_rot            = 256
0.00.567.421 I llm_load_print_meta: n_swa            = 0
0.00.567.421 I llm_load_print_meta: n_embd_head_k    = 256
0.00.567.422 I llm_load_print_meta: n_embd_head_v    = 256
0.00.567.428 I llm_load_print_meta: n_gqa            = 8
0.00.567.446 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.567.454 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.567.456 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.567.457 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.567.458 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.567.458 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.567.459 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.567.464 I llm_load_print_meta: n_ff             = 16384
0.00.567.464 I llm_load_print_meta: n_expert         = 0
0.00.567.474 I llm_load_print_meta: n_expert_used    = 0
0.00.567.474 I llm_load_print_meta: causal attn      = 1
0.00.567.475 I llm_load_print_meta: pooling type     = 0
0.00.567.475 I llm_load_print_meta: rope type        = 2
0.00.567.476 I llm_load_print_meta: rope scaling     = linear
0.00.567.478 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.567.478 I llm_load_print_meta: freq_scale_train = 1
0.00.567.485 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.567.486 I llm_load_print_meta: rope_finetuned   = unknown
0.00.567.486 I llm_load_print_meta: ssm_d_conv       = 0
0.00.567.487 I llm_load_print_meta: ssm_d_inner      = 0
0.00.567.487 I llm_load_print_meta: ssm_d_state      = 0
0.00.567.488 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.567.489 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.567.490 I llm_load_print_meta: model type       = 2B
0.00.567.502 I llm_load_print_meta: model ftype      = Q8_0
0.00.567.503 I llm_load_print_meta: model params     = 2.51 B
0.00.567.504 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.567.505 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.567.512 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.567.515 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.567.515 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.567.516 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.567.516 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.567.517 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.567.522 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.567.524 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.567.524 I llm_load_print_meta: max token length = 93
0.00.567.711 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.668.129 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.668.136 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.668.137 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.668.137 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.668.138 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.668.139 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.673.854 I llama_new_context_with_model: n_ctx      = 8192
0.00.673.863 I llama_new_context_with_model: n_batch    = 2048
0.00.673.863 I llama_new_context_with_model: n_ubatch   = 512
0.00.673.864 I llama_new_context_with_model: flash_attn = 0
0.00.673.867 I llama_new_context_with_model: freq_base  = 10000.0
0.00.673.868 I llama_new_context_with_model: freq_scale = 1
0.00.704.427 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.704.475 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.704.591 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.706.079 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.706.085 I llama_new_context_with_model: graph nodes  = 601
0.00.706.085 I llama_new_context_with_model: graph splits = 1
0.00.706.101 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.318.232 I main: llama threadpool init, n_threads = 4
0.01.318.243 I 
0.01.318.353 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.318.360 I 
0.01.318.524 I sampler seed: 1186735887
0.01.318.534 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.318.540 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.318.543 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.318.544 I 
 increably. 

**Assistant**

I am unable to provide responses that are sexually suggestive in nature. [end of text]


0.11.069.287 I llama_perf_sampler_print:    sampling time =      35.21 ms /    24 runs   (    1.47 ms per token,   681.55 tokens per second)
0.11.069.290 I llama_perf_context_print:        load time =    1315.23 ms
0.11.069.292 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.069.293 I llama_perf_context_print:        eval time =    9691.77 ms /    23 runs   (  421.38 ms per token,     2.37 tokens per second)
0.11.069.294 I llama_perf_context_print:       total time =    9751.07 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.711 I build: 3874 (5d5ab1e5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.949 I main: llama backend init
0.00.002.903 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.479 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.595 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.613 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.619 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.627 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.629 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.631 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.633 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.635 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.637 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.647 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.652 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.653 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.655 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.657 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.045 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.637 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.634 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.647 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.648 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.649 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.650 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.651 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.653 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.656 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.657 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.659 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.660 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.269.661 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.671 I llama_model_loader: - type  f32:   37 tensors
0.00.269.676 I llama_model_loader: - type q8_0:  127 tensors
0.00.451.034 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.479.738 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.480.798 I llm_load_vocab: special tokens cache size = 5
0.00.586.310 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.586.377 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.586.378 I llm_load_print_meta: arch             = gemma
0.00.586.379 I llm_load_print_meta: vocab type       = SPM
0.00.586.380 I llm_load_print_meta: n_vocab          = 256000
0.00.586.383 I llm_load_print_meta: n_merges         = 0
0.00.586.384 I llm_load_print_meta: vocab_only       = 0
0.00.586.384 I llm_load_print_meta: n_ctx_train      = 8192
0.00.586.384 I llm_load_print_meta: n_embd           = 2048
0.00.586.385 I llm_load_print_meta: n_layer          = 18
0.00.586.451 I llm_load_print_meta: n_head           = 8
0.00.586.457 I llm_load_print_meta: n_head_kv        = 1
0.00.586.458 I llm_load_print_meta: n_rot            = 256
0.00.586.458 I llm_load_print_meta: n_swa            = 0
0.00.586.458 I llm_load_print_meta: n_embd_head_k    = 256
0.00.586.459 I llm_load_print_meta: n_embd_head_v    = 256
0.00.586.463 I llm_load_print_meta: n_gqa            = 8
0.00.586.468 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.586.472 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.586.473 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.586.475 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.586.475 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.586.476 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.586.476 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.586.481 I llm_load_print_meta: n_ff             = 16384
0.00.586.481 I llm_load_print_meta: n_expert         = 0
0.00.586.482 I llm_load_print_meta: n_expert_used    = 0
0.00.586.482 I llm_load_print_meta: causal attn      = 1
0.00.586.483 I llm_load_print_meta: pooling type     = 0
0.00.586.483 I llm_load_print_meta: rope type        = 2
0.00.586.483 I llm_load_print_meta: rope scaling     = linear
0.00.586.485 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.586.485 I llm_load_print_meta: freq_scale_train = 1
0.00.586.485 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.586.486 I llm_load_print_meta: rope_finetuned   = unknown
0.00.586.486 I llm_load_print_meta: ssm_d_conv       = 0
0.00.586.486 I llm_load_print_meta: ssm_d_inner      = 0
0.00.586.487 I llm_load_print_meta: ssm_d_state      = 0
0.00.586.487 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.586.487 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.586.488 I llm_load_print_meta: model type       = 2B
0.00.586.497 I llm_load_print_meta: model ftype      = Q8_0
0.00.586.498 I llm_load_print_meta: model params     = 2.51 B
0.00.586.498 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.586.499 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.586.499 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.586.500 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.586.500 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.586.500 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.586.501 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.586.502 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.586.507 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.586.509 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.586.509 I llm_load_print_meta: max token length = 93
0.00.586.698 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.679.390 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.685.339 I llama_new_context_with_model: n_ctx      = 8192
0.00.685.348 I llama_new_context_with_model: n_batch    = 2048
0.00.685.349 I llama_new_context_with_model: n_ubatch   = 512
0.00.685.349 I llama_new_context_with_model: flash_attn = 0
0.00.685.353 I llama_new_context_with_model: freq_base  = 10000.0
0.00.685.353 I llama_new_context_with_model: freq_scale = 1
0.00.716.421 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.716.468 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.716.582 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.718.010 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.718.018 I llama_new_context_with_model: graph nodes  = 601
0.00.718.018 I llama_new_context_with_model: graph splits = 1
0.00.718.037 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.332.581 I main: llama threadpool init, n_threads = 4
0.01.332.593 I 
0.01.332.702 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.332.702 I 
0.01.332.877 I sampler seed: 3973508861
0.01.332.889 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.332.897 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.332.898 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.332.898 I 
 increably. [end of text]


0.03.008.384 I llama_perf_sampler_print:    sampling time =       6.26 ms /     5 runs   (    1.25 ms per token,   798.59 tokens per second)
0.03.008.387 I llama_perf_context_print:        load time =    1329.45 ms
0.03.008.399 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.008.401 I llama_perf_context_print:        eval time =    1662.57 ms /     4 runs   (  415.64 ms per token,     2.41 tokens per second)
0.03.008.402 I llama_perf_context_print:       total time =    1675.81 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.700 I build: 3874 (5d5ab1e5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.910 I main: llama backend init
0.00.002.872 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.255 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.474 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.576 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.589 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.590 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.596 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.597 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.599 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.600 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.601 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.602 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.610 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.611 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.620 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.622 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.623 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.179 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.727 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.659 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.671 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.672 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.673 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.674 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.676 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.677 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.681 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.682 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.683 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.684 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.270.685 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.694 I llama_model_loader: - type  f32:   37 tensors
0.00.270.698 I llama_model_loader: - type q8_0:  127 tensors
0.00.465.419 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.495.726 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.496.906 I llm_load_vocab: special tokens cache size = 5
0.00.592.390 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.592.449 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.592.450 I llm_load_print_meta: arch             = gemma
0.00.592.451 I llm_load_print_meta: vocab type       = SPM
0.00.592.452 I llm_load_print_meta: n_vocab          = 256000
0.00.592.454 I llm_load_print_meta: n_merges         = 0
0.00.592.455 I llm_load_print_meta: vocab_only       = 0
0.00.592.455 I llm_load_print_meta: n_ctx_train      = 8192
0.00.592.456 I llm_load_print_meta: n_embd           = 2048
0.00.592.456 I llm_load_print_meta: n_layer          = 18
0.00.592.521 I llm_load_print_meta: n_head           = 8
0.00.592.528 I llm_load_print_meta: n_head_kv        = 1
0.00.592.528 I llm_load_print_meta: n_rot            = 256
0.00.592.529 I llm_load_print_meta: n_swa            = 0
0.00.592.529 I llm_load_print_meta: n_embd_head_k    = 256
0.00.592.529 I llm_load_print_meta: n_embd_head_v    = 256
0.00.592.534 I llm_load_print_meta: n_gqa            = 8
0.00.592.538 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.592.543 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.592.544 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.592.546 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.592.546 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.592.547 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.592.547 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.592.552 I llm_load_print_meta: n_ff             = 16384
0.00.592.552 I llm_load_print_meta: n_expert         = 0
0.00.592.553 I llm_load_print_meta: n_expert_used    = 0
0.00.592.553 I llm_load_print_meta: causal attn      = 1
0.00.592.553 I llm_load_print_meta: pooling type     = 0
0.00.592.554 I llm_load_print_meta: rope type        = 2
0.00.592.554 I llm_load_print_meta: rope scaling     = linear
0.00.592.555 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.592.556 I llm_load_print_meta: freq_scale_train = 1
0.00.592.556 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.592.557 I llm_load_print_meta: rope_finetuned   = unknown
0.00.592.557 I llm_load_print_meta: ssm_d_conv       = 0
0.00.592.557 I llm_load_print_meta: ssm_d_inner      = 0
0.00.592.558 I llm_load_print_meta: ssm_d_state      = 0
0.00.592.558 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.592.558 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.592.559 I llm_load_print_meta: model type       = 2B
0.00.592.569 I llm_load_print_meta: model ftype      = Q8_0
0.00.592.570 I llm_load_print_meta: model params     = 2.51 B
0.00.592.570 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.592.571 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.592.571 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.592.572 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.592.572 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.592.573 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.592.573 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.592.574 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.592.579 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.592.580 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.592.581 I llm_load_print_meta: max token length = 93
0.00.592.746 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.670.397 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.670.406 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.670.407 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.670.407 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.670.408 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.670.409 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.676.605 I llama_new_context_with_model: n_ctx      = 8192
0.00.676.612 I llama_new_context_with_model: n_batch    = 2048
0.00.676.613 I llama_new_context_with_model: n_ubatch   = 512
0.00.676.614 I llama_new_context_with_model: flash_attn = 0
0.00.676.618 I llama_new_context_with_model: freq_base  = 10000.0
0.00.676.619 I llama_new_context_with_model: freq_scale = 1
0.00.707.652 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.707.696 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.707.819 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.709.248 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.709.256 I llama_new_context_with_model: graph nodes  = 601
0.00.709.256 I llama_new_context_with_model: graph splits = 1
0.00.709.274 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.367.978 I main: llama threadpool init, n_threads = 4
0.01.367.989 I 
0.01.368.100 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.368.104 I 
0.01.368.263 I sampler seed: 3170042439
0.01.368.274 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.368.280 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.368.281 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.368.281 I 
 increasities and anxieties. [end of text]


0.03.981.228 I llama_perf_sampler_print:    sampling time =       9.52 ms /     7 runs   (    1.36 ms per token,   735.60 tokens per second)
0.03.981.232 I llama_perf_context_print:        load time =    1364.90 ms
0.03.981.233 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.981.235 I llama_perf_context_print:        eval time =    2595.52 ms /     6 runs   (  432.59 ms per token,     2.31 tokens per second)
0.03.981.236 I llama_perf_context_print:       total time =    2613.26 ms /     7 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.658 I build: 3874 (5d5ab1e5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.887 I main: llama backend init
0.00.002.853 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.709 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.021 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.123 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.136 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.138 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.145 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.150 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.152 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.153 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.155 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.157 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.165 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.166 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.168 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.169 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.171 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.004 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.414 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.455 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.466 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.467 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.468 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.469 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.471 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.472 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.475 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.476 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.477 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.478 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.268.479 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.489 I llama_model_loader: - type  f32:   37 tensors
0.00.268.493 I llama_model_loader: - type q8_0:  127 tensors
0.00.450.682 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.481.183 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.482.286 I llm_load_vocab: special tokens cache size = 5
0.00.579.353 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.579.416 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.579.417 I llm_load_print_meta: arch             = gemma
0.00.579.418 I llm_load_print_meta: vocab type       = SPM
0.00.579.419 I llm_load_print_meta: n_vocab          = 256000
0.00.579.421 I llm_load_print_meta: n_merges         = 0
0.00.579.421 I llm_load_print_meta: vocab_only       = 0
0.00.579.422 I llm_load_print_meta: n_ctx_train      = 8192
0.00.579.422 I llm_load_print_meta: n_embd           = 2048
0.00.579.423 I llm_load_print_meta: n_layer          = 18
0.00.579.487 I llm_load_print_meta: n_head           = 8
0.00.579.495 I llm_load_print_meta: n_head_kv        = 1
0.00.579.495 I llm_load_print_meta: n_rot            = 256
0.00.579.496 I llm_load_print_meta: n_swa            = 0
0.00.579.496 I llm_load_print_meta: n_embd_head_k    = 256
0.00.579.523 I llm_load_print_meta: n_embd_head_v    = 256
0.00.579.532 I llm_load_print_meta: n_gqa            = 8
0.00.579.539 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.579.546 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.579.548 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.579.549 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.579.550 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.579.551 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.579.552 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.579.558 I llm_load_print_meta: n_ff             = 16384
0.00.579.559 I llm_load_print_meta: n_expert         = 0
0.00.579.560 I llm_load_print_meta: n_expert_used    = 0
0.00.579.565 I llm_load_print_meta: causal attn      = 1
0.00.579.566 I llm_load_print_meta: pooling type     = 0
0.00.579.566 I llm_load_print_meta: rope type        = 2
0.00.579.567 I llm_load_print_meta: rope scaling     = linear
0.00.579.569 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.579.570 I llm_load_print_meta: freq_scale_train = 1
0.00.579.571 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.579.572 I llm_load_print_meta: rope_finetuned   = unknown
0.00.579.573 I llm_load_print_meta: ssm_d_conv       = 0
0.00.579.573 I llm_load_print_meta: ssm_d_inner      = 0
0.00.579.574 I llm_load_print_meta: ssm_d_state      = 0
0.00.579.575 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.579.578 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.579.579 I llm_load_print_meta: model type       = 2B
0.00.579.591 I llm_load_print_meta: model ftype      = Q8_0
0.00.579.592 I llm_load_print_meta: model params     = 2.51 B
0.00.579.593 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.579.594 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.579.595 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.579.596 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.579.596 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.579.597 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.579.598 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.579.599 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.579.605 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.579.608 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.579.609 I llm_load_print_meta: max token length = 93
0.00.579.788 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.651.805 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.651.817 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.657.577 I llama_new_context_with_model: n_ctx      = 8192
0.00.657.586 I llama_new_context_with_model: n_batch    = 2048
0.00.657.586 I llama_new_context_with_model: n_ubatch   = 512
0.00.657.587 I llama_new_context_with_model: flash_attn = 0
0.00.657.590 I llama_new_context_with_model: freq_base  = 10000.0
0.00.657.591 I llama_new_context_with_model: freq_scale = 1
0.00.687.652 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.687.699 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.687.811 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.689.277 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.689.284 I llama_new_context_with_model: graph nodes  = 601
0.00.689.285 I llama_new_context_with_model: graph splits = 1
0.00.689.302 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.303.845 I main: llama threadpool init, n_threads = 4
0.01.303.859 I 
0.01.303.977 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.303.981 I 
0.01.304.155 I sampler seed: 2520081000
0.01.304.166 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.304.173 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.304.174 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.304.174 I 
 increasities are a type of sexual harassment that involves unwanted sexual advances, requests, or behavior directed towards someone who is in a position of power or authority.



0.14.882.098 I llama_perf_sampler_print:    sampling time =      49.16 ms /    33 runs   (    1.49 ms per token,   671.30 tokens per second)
0.14.882.101 I llama_perf_context_print:        load time =    1300.79 ms
0.14.882.102 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.882.120 I llama_perf_context_print:        eval time =   13496.63 ms /    32 runs   (  421.77 ms per token,     2.37 tokens per second)
0.14.882.121 I llama_perf_context_print:       total time =   13578.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m42.871s
user	2m3.243s
sys	0m9.670s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3874 (5d5ab1e5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199653.10 ms
main:    total time = 199653.10 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.640 I build: 3874 (5d5ab1e5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.837 I main: llama backend init
0.00.002.794 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.661 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.866 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.959 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.972 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.974 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.978 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.979 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.981 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.983 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.984 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.985 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.992 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.994 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.995 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.995 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.004 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.789 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.330 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.467 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.479 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.480 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.481 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.482 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.484 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.487 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.492 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.493 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.494 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.495 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.496 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.505 I llama_model_loader: - type  f32:   37 tensors
0.00.267.509 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.510 I llama_model_loader: - type q6_K:   19 tensors
0.00.450.691 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.478.653 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.479.758 I llm_load_vocab: special tokens cache size = 5
0.00.587.172 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.587.232 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.587.233 I llm_load_print_meta: arch             = gemma
0.00.587.234 I llm_load_print_meta: vocab type       = SPM
0.00.587.235 I llm_load_print_meta: n_vocab          = 256000
0.00.587.237 I llm_load_print_meta: n_merges         = 0
0.00.587.237 I llm_load_print_meta: vocab_only       = 0
0.00.587.238 I llm_load_print_meta: n_ctx_train      = 8192
0.00.587.238 I llm_load_print_meta: n_embd           = 2048
0.00.587.239 I llm_load_print_meta: n_layer          = 18
0.00.587.304 I llm_load_print_meta: n_head           = 8
0.00.587.311 I llm_load_print_meta: n_head_kv        = 1
0.00.587.311 I llm_load_print_meta: n_rot            = 256
0.00.587.312 I llm_load_print_meta: n_swa            = 0
0.00.587.312 I llm_load_print_meta: n_embd_head_k    = 256
0.00.587.312 I llm_load_print_meta: n_embd_head_v    = 256
0.00.587.317 I llm_load_print_meta: n_gqa            = 8
0.00.587.321 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.587.326 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.587.327 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.587.330 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.587.330 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.587.330 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.587.331 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.587.336 I llm_load_print_meta: n_ff             = 16384
0.00.587.337 I llm_load_print_meta: n_expert         = 0
0.00.587.338 I llm_load_print_meta: n_expert_used    = 0
0.00.587.339 I llm_load_print_meta: causal attn      = 1
0.00.587.339 I llm_load_print_meta: pooling type     = 0
0.00.587.362 I llm_load_print_meta: rope type        = 2
0.00.587.363 I llm_load_print_meta: rope scaling     = linear
0.00.587.365 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.587.366 I llm_load_print_meta: freq_scale_train = 1
0.00.587.375 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.587.375 I llm_load_print_meta: rope_finetuned   = unknown
0.00.587.376 I llm_load_print_meta: ssm_d_conv       = 0
0.00.587.377 I llm_load_print_meta: ssm_d_inner      = 0
0.00.587.377 I llm_load_print_meta: ssm_d_state      = 0
0.00.587.378 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.587.378 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.587.379 I llm_load_print_meta: model type       = 2B
0.00.587.390 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.587.391 I llm_load_print_meta: model params     = 2.51 B
0.00.587.392 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.587.400 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.587.401 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.587.401 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.587.402 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.587.402 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.587.407 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.587.407 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.587.415 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.587.416 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.587.417 I llm_load_print_meta: max token length = 93
0.00.587.588 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.645.708 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.645.720 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.645.721 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.645.722 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.645.723 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.645.724 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.651.368 I llama_new_context_with_model: n_ctx      = 8192
0.00.651.374 I llama_new_context_with_model: n_batch    = 2048
0.00.651.375 I llama_new_context_with_model: n_ubatch   = 512
0.00.651.376 I llama_new_context_with_model: flash_attn = 0
0.00.651.380 I llama_new_context_with_model: freq_base  = 10000.0
0.00.651.381 I llama_new_context_with_model: freq_scale = 1
0.00.682.168 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.682.212 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.682.330 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.683.798 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.683.805 I llama_new_context_with_model: graph nodes  = 601
0.00.683.806 I llama_new_context_with_model: graph splits = 1
0.00.683.824 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.265.077 I main: llama threadpool init, n_threads = 4
0.01.265.088 I 
0.01.265.194 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.265.198 I 
0.01.265.356 I sampler seed: 3123151650
0.01.265.368 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.265.376 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.265.377 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.265.378 I 
 maneuvorous plants that primarily feed on insects.

Answer the following questions:
a) Name the type of plant and explain its feeding mechanism.
b)

0.12.307.646 I llama_perf_sampler_print:    sampling time =      49.04 ms /    33 runs   (    1.49 ms per token,   672.93 tokens per second)
0.12.307.651 I llama_perf_context_print:        load time =    1262.11 ms
0.12.307.652 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.307.654 I llama_perf_context_print:        eval time =   10960.52 ms /    32 runs   (  342.52 ms per token,     2.92 tokens per second)
0.12.307.655 I llama_perf_context_print:       total time =   11042.58 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3874 (5d5ab1e5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199393.83 ms
main:    total time = 199393.83 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.704 I build: 3874 (5d5ab1e5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.908 I main: llama backend init
0.00.002.875 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.035 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.171 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.189 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.192 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.198 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.203 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.204 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.205 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.206 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.207 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.215 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.217 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.219 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.220 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.221 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.963 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.072 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.085 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.095 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.096 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.097 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.098 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.100 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.101 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.105 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.106 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.115 I llama_model_loader: - type  f32:   37 tensors
0.00.268.119 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.120 I llama_model_loader: - type q6_K:   19 tensors
0.00.441.939 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.470.318 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.471.461 I llm_load_vocab: special tokens cache size = 5
0.00.567.296 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.567.356 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.567.357 I llm_load_print_meta: arch             = gemma
0.00.567.358 I llm_load_print_meta: vocab type       = SPM
0.00.567.359 I llm_load_print_meta: n_vocab          = 256000
0.00.567.361 I llm_load_print_meta: n_merges         = 0
0.00.567.362 I llm_load_print_meta: vocab_only       = 0
0.00.567.362 I llm_load_print_meta: n_ctx_train      = 8192
0.00.567.363 I llm_load_print_meta: n_embd           = 2048
0.00.567.363 I llm_load_print_meta: n_layer          = 18
0.00.567.430 I llm_load_print_meta: n_head           = 8
0.00.567.452 I llm_load_print_meta: n_head_kv        = 1
0.00.567.453 I llm_load_print_meta: n_rot            = 256
0.00.567.454 I llm_load_print_meta: n_swa            = 0
0.00.567.454 I llm_load_print_meta: n_embd_head_k    = 256
0.00.567.454 I llm_load_print_meta: n_embd_head_v    = 256
0.00.567.459 I llm_load_print_meta: n_gqa            = 8
0.00.567.463 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.567.484 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.567.494 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.567.496 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.567.497 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.567.498 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.567.498 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.567.503 I llm_load_print_meta: n_ff             = 16384
0.00.567.504 I llm_load_print_meta: n_expert         = 0
0.00.567.504 I llm_load_print_meta: n_expert_used    = 0
0.00.567.505 I llm_load_print_meta: causal attn      = 1
0.00.567.510 I llm_load_print_meta: pooling type     = 0
0.00.567.510 I llm_load_print_meta: rope type        = 2
0.00.567.511 I llm_load_print_meta: rope scaling     = linear
0.00.567.520 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.567.521 I llm_load_print_meta: freq_scale_train = 1
0.00.567.521 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.567.522 I llm_load_print_meta: rope_finetuned   = unknown
0.00.567.529 I llm_load_print_meta: ssm_d_conv       = 0
0.00.567.530 I llm_load_print_meta: ssm_d_inner      = 0
0.00.567.533 I llm_load_print_meta: ssm_d_state      = 0
0.00.567.534 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.567.534 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.567.535 I llm_load_print_meta: model type       = 2B
0.00.567.546 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.567.547 I llm_load_print_meta: model params     = 2.51 B
0.00.567.548 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.567.556 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.567.557 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.567.558 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.567.558 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.567.560 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.567.560 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.567.568 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.567.575 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.567.577 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.567.577 I llm_load_print_meta: max token length = 93
0.00.567.748 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.626.554 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.632.129 I llama_new_context_with_model: n_ctx      = 8192
0.00.632.138 I llama_new_context_with_model: n_batch    = 2048
0.00.632.138 I llama_new_context_with_model: n_ubatch   = 512
0.00.632.139 I llama_new_context_with_model: flash_attn = 0
0.00.632.141 I llama_new_context_with_model: freq_base  = 10000.0
0.00.632.142 I llama_new_context_with_model: freq_scale = 1
0.00.663.402 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.663.445 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.663.558 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.664.951 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.664.957 I llama_new_context_with_model: graph nodes  = 601
0.00.664.957 I llama_new_context_with_model: graph splits = 1
0.00.664.973 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.245.426 I main: llama threadpool init, n_threads = 4
0.01.245.439 I 
0.01.245.541 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.245.545 I 
0.01.245.711 I sampler seed: 2161306581
0.01.245.721 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.245.729 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.245.730 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.245.731 I 
 seconally, with a mischievous grin. "Did you know that the universe is a giant sandbox?"

The wise owl perched on the oak tree chuckled softly,

0.12.229.685 I llama_perf_sampler_print:    sampling time =      49.34 ms /    33 runs   (    1.50 ms per token,   668.76 tokens per second)
0.12.229.689 I llama_perf_context_print:        load time =    1242.33 ms
0.12.229.690 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.229.692 I llama_perf_context_print:        eval time =   10902.33 ms /    32 runs   (  340.70 ms per token,     2.94 tokens per second)
0.12.229.693 I llama_perf_context_print:       total time =   10984.27 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m6.572s
user	50m13.745s
sys	0m6.574s
