+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.641 I build: 4370 (5de36876) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.839 I main: llama backend init
0.00.000.847 I main: load the model and apply lora adapter, if any
0.00.025.495 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.507 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.594 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.606 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.608 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.613 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.618 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.619 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.620 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.621 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.622 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.628 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.630 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.631 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.632 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.634 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.228.302 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.330.096 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.837 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.844 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.846 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.847 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.848 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.850 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.851 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.854 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.856 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.857 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.353.858 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.353.860 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.353.869 I llama_model_loader: - type  f32:   37 tensors
0.00.353.871 I llama_model_loader: - type q8_0:  127 tensors
0.00.566.326 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.627.596 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.628.552 I llm_load_vocab: special tokens cache size = 5
0.00.815.206 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.815.280 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.815.284 I llm_load_print_meta: arch             = gemma
0.00.815.285 I llm_load_print_meta: vocab type       = SPM
0.00.815.286 I llm_load_print_meta: n_vocab          = 256000
0.00.815.288 I llm_load_print_meta: n_merges         = 0
0.00.815.289 I llm_load_print_meta: vocab_only       = 0
0.00.815.289 I llm_load_print_meta: n_ctx_train      = 8192
0.00.815.290 I llm_load_print_meta: n_embd           = 2048
0.00.815.290 I llm_load_print_meta: n_layer          = 18
0.00.815.353 I llm_load_print_meta: n_head           = 8
0.00.815.360 I llm_load_print_meta: n_head_kv        = 1
0.00.815.361 I llm_load_print_meta: n_rot            = 256
0.00.815.362 I llm_load_print_meta: n_swa            = 0
0.00.815.363 I llm_load_print_meta: n_embd_head_k    = 256
0.00.815.364 I llm_load_print_meta: n_embd_head_v    = 256
0.00.815.369 I llm_load_print_meta: n_gqa            = 8
0.00.815.378 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.815.383 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.815.384 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.815.386 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.815.386 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.815.387 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.815.388 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.815.392 I llm_load_print_meta: n_ff             = 16384
0.00.815.393 I llm_load_print_meta: n_expert         = 0
0.00.815.396 I llm_load_print_meta: n_expert_used    = 0
0.00.815.397 I llm_load_print_meta: causal attn      = 1
0.00.815.397 I llm_load_print_meta: pooling type     = 0
0.00.815.397 I llm_load_print_meta: rope type        = 2
0.00.815.398 I llm_load_print_meta: rope scaling     = linear
0.00.815.399 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.815.400 I llm_load_print_meta: freq_scale_train = 1
0.00.815.400 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.815.400 I llm_load_print_meta: rope_finetuned   = unknown
0.00.815.401 I llm_load_print_meta: ssm_d_conv       = 0
0.00.815.401 I llm_load_print_meta: ssm_d_inner      = 0
0.00.815.401 I llm_load_print_meta: ssm_d_state      = 0
0.00.815.402 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.815.402 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.815.402 I llm_load_print_meta: model type       = 2B
0.00.815.404 I llm_load_print_meta: model ftype      = Q8_0
0.00.815.405 I llm_load_print_meta: model params     = 2.51 B
0.00.815.407 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.815.408 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.815.408 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.815.409 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.815.412 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.815.412 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.815.412 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.815.413 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.815.419 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.815.420 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.815.421 I llm_load_print_meta: max token length = 93
0.00.917.627 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.917.637 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.917.638 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.917.639 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.917.640 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.917.640 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.923.618 I llama_new_context_with_model: n_seq_max     = 1
0.00.923.625 I llama_new_context_with_model: n_ctx         = 4096
0.00.923.626 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.923.626 I llama_new_context_with_model: n_batch       = 2048
0.00.923.627 I llama_new_context_with_model: n_ubatch      = 512
0.00.923.627 I llama_new_context_with_model: flash_attn    = 0
0.00.923.630 I llama_new_context_with_model: freq_base     = 10000.0
0.00.923.630 I llama_new_context_with_model: freq_scale    = 1
0.00.923.631 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.923.720 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.938.910 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.938.950 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.939.071 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.941.688 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.941.692 I llama_new_context_with_model: graph nodes  = 601
0.00.941.692 I llama_new_context_with_model: graph splits = 1
0.00.941.716 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.941.719 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.551.498 I main: llama threadpool init, n_threads = 4
0.01.551.514 I 
0.01.551.631 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.551.635 I 
0.01.551.869 I sampler seed: 3350469759
0.01.551.886 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.551.897 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.551.898 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.551.898 I 
 increasively.

I am a large language model, trained by Google. I am able to generate human-quality text in response to a wide range of prompts

0.15.072.357 I llama_perf_sampler_print:    sampling time =      49.77 ms /    33 runs   (    1.51 ms per token,   663.09 tokens per second)
0.15.072.382 I llama_perf_context_print:        load time =    1550.55 ms
0.15.072.384 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.072.386 I llama_perf_context_print:        eval time =   13430.48 ms /    32 runs   (  419.70 ms per token,     2.38 tokens per second)
0.15.072.387 I llama_perf_context_print:       total time =   13520.87 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.636 I build: 4370 (5de36876) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.843 I main: llama backend init
0.00.000.851 I main: load the model and apply lora adapter, if any
0.00.023.127 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.226 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.240 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.243 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.249 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.253 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.255 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.256 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.257 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.259 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.265 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.266 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.268 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.269 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.271 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.243 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.335.305 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.359.001 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.359.009 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.359.011 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.359.012 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.359.013 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.359.015 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.359.016 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.359.021 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.359.022 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.359.024 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.359.025 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.359.027 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.359.036 I llama_model_loader: - type  f32:   37 tensors
0.00.359.038 I llama_model_loader: - type q8_0:  127 tensors
0.00.585.651 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.655.050 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.655.938 I llm_load_vocab: special tokens cache size = 5
0.00.856.662 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.856.737 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.856.741 I llm_load_print_meta: arch             = gemma
0.00.856.742 I llm_load_print_meta: vocab type       = SPM
0.00.856.743 I llm_load_print_meta: n_vocab          = 256000
0.00.856.745 I llm_load_print_meta: n_merges         = 0
0.00.856.746 I llm_load_print_meta: vocab_only       = 0
0.00.856.746 I llm_load_print_meta: n_ctx_train      = 8192
0.00.856.747 I llm_load_print_meta: n_embd           = 2048
0.00.856.747 I llm_load_print_meta: n_layer          = 18
0.00.856.810 I llm_load_print_meta: n_head           = 8
0.00.856.817 I llm_load_print_meta: n_head_kv        = 1
0.00.856.818 I llm_load_print_meta: n_rot            = 256
0.00.856.818 I llm_load_print_meta: n_swa            = 0
0.00.856.819 I llm_load_print_meta: n_embd_head_k    = 256
0.00.856.819 I llm_load_print_meta: n_embd_head_v    = 256
0.00.856.824 I llm_load_print_meta: n_gqa            = 8
0.00.856.828 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.856.833 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.856.834 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.856.836 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.856.837 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.856.837 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.856.839 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.856.844 I llm_load_print_meta: n_ff             = 16384
0.00.856.844 I llm_load_print_meta: n_expert         = 0
0.00.856.846 I llm_load_print_meta: n_expert_used    = 0
0.00.856.846 I llm_load_print_meta: causal attn      = 1
0.00.856.847 I llm_load_print_meta: pooling type     = 0
0.00.856.864 I llm_load_print_meta: rope type        = 2
0.00.856.865 I llm_load_print_meta: rope scaling     = linear
0.00.856.867 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.856.869 I llm_load_print_meta: freq_scale_train = 1
0.00.856.869 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.856.870 I llm_load_print_meta: rope_finetuned   = unknown
0.00.856.870 I llm_load_print_meta: ssm_d_conv       = 0
0.00.856.874 I llm_load_print_meta: ssm_d_inner      = 0
0.00.856.875 I llm_load_print_meta: ssm_d_state      = 0
0.00.856.875 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.856.876 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.856.876 I llm_load_print_meta: model type       = 2B
0.00.856.881 I llm_load_print_meta: model ftype      = Q8_0
0.00.856.882 I llm_load_print_meta: model params     = 2.51 B
0.00.856.883 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.856.883 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.856.884 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.856.884 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.856.885 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.856.885 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.856.886 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.856.886 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.856.892 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.856.894 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.856.895 I llm_load_print_meta: max token length = 93
0.00.954.304 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.960.120 I llama_new_context_with_model: n_seq_max     = 1
0.00.960.128 I llama_new_context_with_model: n_ctx         = 4096
0.00.960.128 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.960.128 I llama_new_context_with_model: n_batch       = 2048
0.00.960.129 I llama_new_context_with_model: n_ubatch      = 512
0.00.960.129 I llama_new_context_with_model: flash_attn    = 0
0.00.960.131 I llama_new_context_with_model: freq_base     = 10000.0
0.00.960.132 I llama_new_context_with_model: freq_scale    = 1
0.00.960.133 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.960.217 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.975.077 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.975.117 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.975.244 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.977.855 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.977.859 I llama_new_context_with_model: graph nodes  = 601
0.00.977.860 I llama_new_context_with_model: graph splits = 1
0.00.977.884 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.977.887 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.587.698 I main: llama threadpool init, n_threads = 4
0.01.587.717 I 
0.01.587.838 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.587.842 I 
0.01.588.071 I sampler seed: 3784883047
0.01.588.085 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.588.097 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.588.098 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.588.098 I 
 increasities.

This is a misspelling of "incredibilities."

The correct spelling is "incredibilities." [end of text]


0.12.635.946 I llama_perf_sampler_print:    sampling time =      40.76 ms /    27 runs   (    1.51 ms per token,   662.48 tokens per second)
0.12.635.963 I llama_perf_context_print:        load time =    1586.75 ms
0.12.635.965 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.635.967 I llama_perf_context_print:        eval time =   10973.51 ms /    26 runs   (  422.06 ms per token,     2.37 tokens per second)
0.12.635.967 I llama_perf_context_print:       total time =   11048.26 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.656 I build: 4370 (5de36876) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.000.871 I main: load the model and apply lora adapter, if any
0.00.023.479 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.490 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.582 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.594 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.596 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.602 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.606 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.607 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.608 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.609 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.611 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.617 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.618 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.619 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.621 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.622 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.819 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.689 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.473 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.480 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.482 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.483 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.484 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.485 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.487 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.491 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.492 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.494 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.495 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.352.497 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.506 I llama_model_loader: - type  f32:   37 tensors
0.00.352.508 I llama_model_loader: - type q8_0:  127 tensors
0.00.570.028 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.627.588 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.628.446 I llm_load_vocab: special tokens cache size = 5
0.00.815.287 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.815.358 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.815.362 I llm_load_print_meta: arch             = gemma
0.00.815.363 I llm_load_print_meta: vocab type       = SPM
0.00.815.364 I llm_load_print_meta: n_vocab          = 256000
0.00.815.367 I llm_load_print_meta: n_merges         = 0
0.00.815.367 I llm_load_print_meta: vocab_only       = 0
0.00.815.368 I llm_load_print_meta: n_ctx_train      = 8192
0.00.815.368 I llm_load_print_meta: n_embd           = 2048
0.00.815.369 I llm_load_print_meta: n_layer          = 18
0.00.815.432 I llm_load_print_meta: n_head           = 8
0.00.815.438 I llm_load_print_meta: n_head_kv        = 1
0.00.815.440 I llm_load_print_meta: n_rot            = 256
0.00.815.440 I llm_load_print_meta: n_swa            = 0
0.00.815.441 I llm_load_print_meta: n_embd_head_k    = 256
0.00.815.441 I llm_load_print_meta: n_embd_head_v    = 256
0.00.815.446 I llm_load_print_meta: n_gqa            = 8
0.00.815.450 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.815.455 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.815.459 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.815.460 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.815.461 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.815.461 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.815.461 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.815.466 I llm_load_print_meta: n_ff             = 16384
0.00.815.467 I llm_load_print_meta: n_expert         = 0
0.00.815.468 I llm_load_print_meta: n_expert_used    = 0
0.00.815.469 I llm_load_print_meta: causal attn      = 1
0.00.815.477 I llm_load_print_meta: pooling type     = 0
0.00.815.478 I llm_load_print_meta: rope type        = 2
0.00.815.478 I llm_load_print_meta: rope scaling     = linear
0.00.815.480 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.815.481 I llm_load_print_meta: freq_scale_train = 1
0.00.815.482 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.815.483 I llm_load_print_meta: rope_finetuned   = unknown
0.00.815.483 I llm_load_print_meta: ssm_d_conv       = 0
0.00.815.484 I llm_load_print_meta: ssm_d_inner      = 0
0.00.815.485 I llm_load_print_meta: ssm_d_state      = 0
0.00.815.486 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.815.486 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.815.487 I llm_load_print_meta: model type       = 2B
0.00.815.501 I llm_load_print_meta: model ftype      = Q8_0
0.00.815.504 I llm_load_print_meta: model params     = 2.51 B
0.00.815.505 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.815.505 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.815.506 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.815.506 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.815.507 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.815.507 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.815.507 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.815.508 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.815.514 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.815.515 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.815.516 I llm_load_print_meta: max token length = 93
0.00.895.475 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.895.483 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.895.484 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.895.484 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.895.485 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.895.485 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.901.579 I llama_new_context_with_model: n_seq_max     = 1
0.00.901.595 I llama_new_context_with_model: n_ctx         = 4096
0.00.901.596 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.901.596 I llama_new_context_with_model: n_batch       = 2048
0.00.901.597 I llama_new_context_with_model: n_ubatch      = 512
0.00.901.597 I llama_new_context_with_model: flash_attn    = 0
0.00.901.601 I llama_new_context_with_model: freq_base     = 10000.0
0.00.901.602 I llama_new_context_with_model: freq_scale    = 1
0.00.901.603 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.901.696 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.917.019 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.917.064 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.917.186 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.919.906 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.919.910 I llama_new_context_with_model: graph nodes  = 601
0.00.919.910 I llama_new_context_with_model: graph splits = 1
0.00.919.934 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.919.937 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.530.994 I main: llama threadpool init, n_threads = 4
0.01.531.010 I 
0.01.531.132 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.531.137 I 
0.01.531.368 I sampler seed: 506839928
0.01.531.382 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.531.391 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.531.394 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.531.394 I 
 increably. I'm a fan of your work.

I'm so excited for your new book! 🤩

I can't wait to dive

0.14.983.960 I llama_perf_sampler_print:    sampling time =      49.67 ms /    33 runs   (    1.51 ms per token,   664.33 tokens per second)
0.14.983.963 I llama_perf_context_print:        load time =    1530.01 ms
0.14.983.964 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.983.965 I llama_perf_context_print:        eval time =   13363.67 ms /    32 runs   (  417.61 ms per token,     2.39 tokens per second)
0.14.983.981 I llama_perf_context_print:       total time =   13452.98 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.732 I build: 4370 (5de36876) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.939 I main: llama backend init
0.00.000.948 I main: load the model and apply lora adapter, if any
0.00.023.782 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.795 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.907 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.923 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.927 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.937 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.943 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.945 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.947 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.950 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.952 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.962 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.968 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.970 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.973 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.984 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.232.659 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.334.525 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.358.271 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.358.280 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.358.281 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.358.283 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.358.284 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.358.285 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.358.287 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.358.291 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.358.292 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.358.293 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.358.294 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.358.296 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.358.304 I llama_model_loader: - type  f32:   37 tensors
0.00.358.307 I llama_model_loader: - type q8_0:  127 tensors
0.00.571.318 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.628.148 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.629.025 I llm_load_vocab: special tokens cache size = 5
0.00.817.426 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.817.499 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.817.503 I llm_load_print_meta: arch             = gemma
0.00.817.504 I llm_load_print_meta: vocab type       = SPM
0.00.817.505 I llm_load_print_meta: n_vocab          = 256000
0.00.817.507 I llm_load_print_meta: n_merges         = 0
0.00.817.508 I llm_load_print_meta: vocab_only       = 0
0.00.817.508 I llm_load_print_meta: n_ctx_train      = 8192
0.00.817.508 I llm_load_print_meta: n_embd           = 2048
0.00.817.509 I llm_load_print_meta: n_layer          = 18
0.00.817.574 I llm_load_print_meta: n_head           = 8
0.00.817.582 I llm_load_print_meta: n_head_kv        = 1
0.00.817.583 I llm_load_print_meta: n_rot            = 256
0.00.817.584 I llm_load_print_meta: n_swa            = 0
0.00.817.585 I llm_load_print_meta: n_embd_head_k    = 256
0.00.817.585 I llm_load_print_meta: n_embd_head_v    = 256
0.00.817.593 I llm_load_print_meta: n_gqa            = 8
0.00.817.599 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.817.610 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.817.612 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.817.614 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.817.614 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.817.615 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.817.616 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.817.623 I llm_load_print_meta: n_ff             = 16384
0.00.817.624 I llm_load_print_meta: n_expert         = 0
0.00.817.624 I llm_load_print_meta: n_expert_used    = 0
0.00.817.626 I llm_load_print_meta: causal attn      = 1
0.00.817.626 I llm_load_print_meta: pooling type     = 0
0.00.817.627 I llm_load_print_meta: rope type        = 2
0.00.817.628 I llm_load_print_meta: rope scaling     = linear
0.00.817.632 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.817.633 I llm_load_print_meta: freq_scale_train = 1
0.00.817.634 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.817.634 I llm_load_print_meta: rope_finetuned   = unknown
0.00.817.635 I llm_load_print_meta: ssm_d_conv       = 0
0.00.817.636 I llm_load_print_meta: ssm_d_inner      = 0
0.00.817.636 I llm_load_print_meta: ssm_d_state      = 0
0.00.817.645 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.817.653 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.817.653 I llm_load_print_meta: model type       = 2B
0.00.817.656 I llm_load_print_meta: model ftype      = Q8_0
0.00.817.657 I llm_load_print_meta: model params     = 2.51 B
0.00.817.659 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.817.660 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.817.661 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.817.663 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.817.664 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.817.664 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.817.665 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.817.666 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.817.674 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.817.684 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.817.685 I llm_load_print_meta: max token length = 93
0.00.890.704 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.890.711 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.896.972 I llama_new_context_with_model: n_seq_max     = 1
0.00.896.980 I llama_new_context_with_model: n_ctx         = 4096
0.00.896.981 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.896.981 I llama_new_context_with_model: n_batch       = 2048
0.00.896.981 I llama_new_context_with_model: n_ubatch      = 512
0.00.896.982 I llama_new_context_with_model: flash_attn    = 0
0.00.896.985 I llama_new_context_with_model: freq_base     = 10000.0
0.00.896.985 I llama_new_context_with_model: freq_scale    = 1
0.00.896.986 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.897.084 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.912.370 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.912.410 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.912.534 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.915.154 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.915.159 I llama_new_context_with_model: graph nodes  = 601
0.00.915.159 I llama_new_context_with_model: graph splits = 1
0.00.915.183 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.915.187 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.524.585 I main: llama threadpool init, n_threads = 4
0.01.524.600 I 
0.01.524.736 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.524.741 I 
0.01.524.975 I sampler seed: 3872332030
0.01.524.990 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.525.000 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.525.004 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.525.004 I 
 increably, a smile spreading across his face like the sun breaking through the clouds.

This is how Marius felt when he saw Amelia, his heart soaring with

0.15.020.825 I llama_perf_sampler_print:    sampling time =      49.73 ms /    33 runs   (    1.51 ms per token,   663.54 tokens per second)
0.15.020.840 I llama_perf_context_print:        load time =    1523.51 ms
0.15.020.842 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.020.844 I llama_perf_context_print:        eval time =   13405.49 ms /    32 runs   (  418.92 ms per token,     2.39 tokens per second)
0.15.020.845 I llama_perf_context_print:       total time =   13496.25 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m7.876s
user	3m39.636s
sys	0m9.378s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4370 (5de36876)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186569.00 ms
main:    total time = 186569.00 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.645 I build: 4370 (5de36876) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.849 I main: llama backend init
0.00.000.856 I main: load the model and apply lora adapter, if any
0.00.023.142 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.151 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.240 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.251 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.253 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.258 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.263 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.264 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.266 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.267 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.269 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.274 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.284 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.285 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.287 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.288 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.231.864 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.336.517 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.360.266 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.360.274 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.360.276 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.360.277 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.360.278 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.360.280 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.360.281 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.360.285 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.360.287 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.360.289 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.360.290 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.360.292 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.360.300 I llama_model_loader: - type  f32:   37 tensors
0.00.360.302 I llama_model_loader: - type q4_K:  108 tensors
0.00.360.303 I llama_model_loader: - type q6_K:   19 tensors
0.00.582.807 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.641.207 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.642.154 I llm_load_vocab: special tokens cache size = 5
0.00.841.716 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.841.788 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.841.793 I llm_load_print_meta: arch             = gemma
0.00.841.794 I llm_load_print_meta: vocab type       = SPM
0.00.841.795 I llm_load_print_meta: n_vocab          = 256000
0.00.841.797 I llm_load_print_meta: n_merges         = 0
0.00.841.797 I llm_load_print_meta: vocab_only       = 0
0.00.841.798 I llm_load_print_meta: n_ctx_train      = 8192
0.00.841.798 I llm_load_print_meta: n_embd           = 2048
0.00.841.798 I llm_load_print_meta: n_layer          = 18
0.00.841.865 I llm_load_print_meta: n_head           = 8
0.00.841.872 I llm_load_print_meta: n_head_kv        = 1
0.00.841.873 I llm_load_print_meta: n_rot            = 256
0.00.841.874 I llm_load_print_meta: n_swa            = 0
0.00.841.874 I llm_load_print_meta: n_embd_head_k    = 256
0.00.841.874 I llm_load_print_meta: n_embd_head_v    = 256
0.00.841.879 I llm_load_print_meta: n_gqa            = 8
0.00.841.884 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.841.889 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.841.891 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.841.893 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.841.893 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.841.895 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.841.895 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.841.913 I llm_load_print_meta: n_ff             = 16384
0.00.841.915 I llm_load_print_meta: n_expert         = 0
0.00.841.915 I llm_load_print_meta: n_expert_used    = 0
0.00.841.916 I llm_load_print_meta: causal attn      = 1
0.00.841.916 I llm_load_print_meta: pooling type     = 0
0.00.841.916 I llm_load_print_meta: rope type        = 2
0.00.841.917 I llm_load_print_meta: rope scaling     = linear
0.00.841.918 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.841.919 I llm_load_print_meta: freq_scale_train = 1
0.00.841.919 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.841.920 I llm_load_print_meta: rope_finetuned   = unknown
0.00.841.921 I llm_load_print_meta: ssm_d_conv       = 0
0.00.841.921 I llm_load_print_meta: ssm_d_inner      = 0
0.00.841.922 I llm_load_print_meta: ssm_d_state      = 0
0.00.841.923 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.841.924 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.841.925 I llm_load_print_meta: model type       = 2B
0.00.841.928 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.841.929 I llm_load_print_meta: model params     = 2.51 B
0.00.841.931 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.841.931 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.841.932 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.841.939 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.841.940 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.841.941 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.841.941 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.841.954 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.841.964 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.841.965 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.841.968 I llm_load_print_meta: max token length = 93
0.00.903.869 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.903.879 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.903.880 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.903.881 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.903.882 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.903.883 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.909.732 I llama_new_context_with_model: n_seq_max     = 1
0.00.909.739 I llama_new_context_with_model: n_ctx         = 4096
0.00.909.740 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.909.740 I llama_new_context_with_model: n_batch       = 2048
0.00.909.741 I llama_new_context_with_model: n_ubatch      = 512
0.00.909.742 I llama_new_context_with_model: flash_attn    = 0
0.00.909.744 I llama_new_context_with_model: freq_base     = 10000.0
0.00.909.745 I llama_new_context_with_model: freq_scale    = 1
0.00.909.746 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.909.833 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.924.064 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.924.102 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.924.216 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.926.813 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.926.816 I llama_new_context_with_model: graph nodes  = 601
0.00.926.816 I llama_new_context_with_model: graph splits = 1
0.00.926.839 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.926.842 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.506.351 I main: llama threadpool init, n_threads = 4
0.01.506.368 I 
0.01.506.489 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.506.494 I 
0.01.506.739 I sampler seed: 2361835214
0.01.506.752 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.506.762 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.506.765 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.506.765 I 
 seconded into the new game.

The context for the sentence is:

A new game has been released that includes elements from various games in the franchise.

0.12.632.038 I llama_perf_sampler_print:    sampling time =      49.77 ms /    33 runs   (    1.51 ms per token,   663.02 tokens per second)
0.12.632.041 I llama_perf_context_print:        load time =    1505.40 ms
0.12.632.053 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.632.056 I llama_perf_context_print:        eval time =   11035.18 ms /    32 runs   (  344.85 ms per token,     2.90 tokens per second)
0.12.632.057 I llama_perf_context_print:       total time =   11125.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4370 (5de36876)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186464.61 ms
main:    total time = 186464.61 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.659 I build: 4370 (5de36876) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.856 I main: llama backend init
0.00.000.864 I main: load the model and apply lora adapter, if any
0.00.023.358 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.461 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.474 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.479 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.486 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.487 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.489 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.490 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.492 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.493 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.499 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.503 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.505 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.506 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.507 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.494 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.331.609 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.355.362 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.355.371 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.355.372 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.355.374 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.355.375 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.355.377 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.355.378 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.355.381 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.355.383 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.355.391 I llama_model_loader: - type  f32:   37 tensors
0.00.355.393 I llama_model_loader: - type q4_K:  108 tensors
0.00.355.394 I llama_model_loader: - type q6_K:   19 tensors
0.00.571.889 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.629.513 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.630.419 I llm_load_vocab: special tokens cache size = 5
0.00.818.535 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.818.607 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.818.611 I llm_load_print_meta: arch             = gemma
0.00.818.612 I llm_load_print_meta: vocab type       = SPM
0.00.818.613 I llm_load_print_meta: n_vocab          = 256000
0.00.818.616 I llm_load_print_meta: n_merges         = 0
0.00.818.617 I llm_load_print_meta: vocab_only       = 0
0.00.818.617 I llm_load_print_meta: n_ctx_train      = 8192
0.00.818.618 I llm_load_print_meta: n_embd           = 2048
0.00.818.618 I llm_load_print_meta: n_layer          = 18
0.00.818.684 I llm_load_print_meta: n_head           = 8
0.00.818.691 I llm_load_print_meta: n_head_kv        = 1
0.00.818.691 I llm_load_print_meta: n_rot            = 256
0.00.818.692 I llm_load_print_meta: n_swa            = 0
0.00.818.693 I llm_load_print_meta: n_embd_head_k    = 256
0.00.818.694 I llm_load_print_meta: n_embd_head_v    = 256
0.00.818.699 I llm_load_print_meta: n_gqa            = 8
0.00.818.704 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.818.709 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.818.710 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.818.711 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.818.712 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.818.712 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.818.714 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.818.719 I llm_load_print_meta: n_ff             = 16384
0.00.818.723 I llm_load_print_meta: n_expert         = 0
0.00.818.723 I llm_load_print_meta: n_expert_used    = 0
0.00.818.724 I llm_load_print_meta: causal attn      = 1
0.00.818.724 I llm_load_print_meta: pooling type     = 0
0.00.818.725 I llm_load_print_meta: rope type        = 2
0.00.818.726 I llm_load_print_meta: rope scaling     = linear
0.00.818.727 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.818.728 I llm_load_print_meta: freq_scale_train = 1
0.00.818.729 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.818.729 I llm_load_print_meta: rope_finetuned   = unknown
0.00.818.730 I llm_load_print_meta: ssm_d_conv       = 0
0.00.818.730 I llm_load_print_meta: ssm_d_inner      = 0
0.00.818.731 I llm_load_print_meta: ssm_d_state      = 0
0.00.818.731 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.818.732 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.818.732 I llm_load_print_meta: model type       = 2B
0.00.818.735 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.818.739 I llm_load_print_meta: model params     = 2.51 B
0.00.818.740 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.818.740 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.818.741 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.818.741 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.818.741 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.818.742 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.818.742 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.818.743 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.818.748 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.818.750 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.818.751 I llm_load_print_meta: max token length = 93
0.00.878.738 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.884.533 I llama_new_context_with_model: n_seq_max     = 1
0.00.884.540 I llama_new_context_with_model: n_ctx         = 4096
0.00.884.541 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.884.541 I llama_new_context_with_model: n_batch       = 2048
0.00.884.541 I llama_new_context_with_model: n_ubatch      = 512
0.00.884.542 I llama_new_context_with_model: flash_attn    = 0
0.00.884.544 I llama_new_context_with_model: freq_base     = 10000.0
0.00.884.545 I llama_new_context_with_model: freq_scale    = 1
0.00.884.546 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.884.632 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.899.670 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.899.710 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.899.834 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.902.534 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.902.538 I llama_new_context_with_model: graph nodes  = 601
0.00.902.538 I llama_new_context_with_model: graph splits = 1
0.00.902.563 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.902.567 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.480.182 I main: llama threadpool init, n_threads = 4
0.01.480.199 I 
0.01.480.315 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.480.316 I 
0.01.480.545 I sampler seed: 1097481586
0.01.480.560 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.480.572 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.480.573 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.480.573 I 
 increasities in the world's oceans are a pressing environmental issue that requires immediate attention.

**Causes of Ocean Plastic Pollution:**

* Land-based activities

0.12.577.880 I llama_perf_sampler_print:    sampling time =      49.63 ms /    33 runs   (    1.50 ms per token,   664.96 tokens per second)
0.12.577.884 I llama_perf_context_print:        load time =    1479.21 ms
0.12.577.897 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.577.899 I llama_perf_context_print:        eval time =   11007.73 ms /    32 runs   (  343.99 ms per token,     2.91 tokens per second)
0.12.577.900 I llama_perf_context_print:       total time =   11097.71 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m41.175s
user	46m46.061s
sys	0m6.411s
