+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.545 I build: 4370 (5de36876) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.738 I main: llama backend init
0.00.000.745 I main: load the model and apply lora adapter, if any
0.00.021.463 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.473 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.481 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.485 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.486 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.490 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.491 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.492 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.492 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.493 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.493 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.501 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.502 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.502 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.503 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.504 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.998 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.491 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.280 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.286 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.286 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.287 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.288 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.289 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.290 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.292 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.292 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.293 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.294 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.295 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.298 I llama_model_loader: - type  f32:   37 tensors
0.00.130.299 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.135 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.359 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.932 I llm_load_vocab: special tokens cache size = 5
0.00.267.660 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.676 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.678 I llm_load_print_meta: arch             = gemma
0.00.267.678 I llm_load_print_meta: vocab type       = SPM
0.00.267.679 I llm_load_print_meta: n_vocab          = 256000
0.00.267.679 I llm_load_print_meta: n_merges         = 0
0.00.267.680 I llm_load_print_meta: vocab_only       = 0
0.00.267.680 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.680 I llm_load_print_meta: n_embd           = 2048
0.00.267.681 I llm_load_print_meta: n_layer          = 18
0.00.267.692 I llm_load_print_meta: n_head           = 8
0.00.267.693 I llm_load_print_meta: n_head_kv        = 1
0.00.267.693 I llm_load_print_meta: n_rot            = 256
0.00.267.693 I llm_load_print_meta: n_swa            = 0
0.00.267.694 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.694 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.695 I llm_load_print_meta: n_gqa            = 8
0.00.267.696 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.697 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.697 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.698 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.699 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.699 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.700 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.700 I llm_load_print_meta: n_ff             = 16384
0.00.267.701 I llm_load_print_meta: n_expert         = 0
0.00.267.701 I llm_load_print_meta: n_expert_used    = 0
0.00.267.701 I llm_load_print_meta: causal attn      = 1
0.00.267.702 I llm_load_print_meta: pooling type     = 0
0.00.267.702 I llm_load_print_meta: rope type        = 2
0.00.267.702 I llm_load_print_meta: rope scaling     = linear
0.00.267.704 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.704 I llm_load_print_meta: freq_scale_train = 1
0.00.267.705 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.705 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.705 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.705 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.706 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.706 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.706 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.707 I llm_load_print_meta: model type       = 2B
0.00.267.708 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.709 I llm_load_print_meta: model params     = 2.51 B
0.00.267.710 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.711 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.711 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.711 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.712 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.712 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.712 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.712 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.713 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.713 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.714 I llm_load_print_meta: max token length = 93
0.00.368.814 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.368.821 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.368.821 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.368.822 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.368.823 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.368.823 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.374.134 I llama_new_context_with_model: n_seq_max     = 1
0.00.374.139 I llama_new_context_with_model: n_ctx         = 4096
0.00.374.139 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.374.140 I llama_new_context_with_model: n_batch       = 2048
0.00.374.140 I llama_new_context_with_model: n_ubatch      = 512
0.00.374.141 I llama_new_context_with_model: flash_attn    = 0
0.00.374.143 I llama_new_context_with_model: freq_base     = 10000.0
0.00.374.144 I llama_new_context_with_model: freq_scale    = 1
0.00.374.145 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.374.163 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.389.316 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.389.329 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.389.420 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.390.685 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.390.690 I llama_new_context_with_model: graph nodes  = 601
0.00.390.690 I llama_new_context_with_model: graph splits = 1
0.00.390.693 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.390.693 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.475.605 I main: llama threadpool init, n_threads = 4
0.00.475.620 I 
0.00.475.696 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.475.700 I 
0.00.475.732 I sampler seed: 3702557704
0.00.475.744 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.475.747 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.475.749 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.475.757 I 
 increably, a vibrant tapestry woven with the threads of history, culture, and personal experience. [end of text]


0.01.886.717 I llama_perf_sampler_print:    sampling time =       3.49 ms /    21 runs   (    0.17 ms per token,  6024.10 tokens per second)
0.01.886.720 I llama_perf_context_print:        load time =     474.85 ms
0.01.886.721 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.886.722 I llama_perf_context_print:        eval time =    1397.86 ms /    20 runs   (   69.89 ms per token,    14.31 tokens per second)
0.01.886.723 I llama_perf_context_print:       total time =    1411.12 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.574 I build: 4370 (5de36876) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.762 I main: llama backend init
0.00.000.770 I main: load the model and apply lora adapter, if any
0.00.021.187 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.207 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.216 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.217 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.221 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.224 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.224 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.225 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.225 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.226 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.231 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.231 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.232 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.232 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.233 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.732 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.997 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.923 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.929 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.930 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.930 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.931 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.932 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.932 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.935 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.935 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.936 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.936 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.937 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.940 I llama_model_loader: - type  f32:   37 tensors
0.00.130.941 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.131 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.656 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.257 I llm_load_vocab: special tokens cache size = 5
0.00.269.803 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.818 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.820 I llm_load_print_meta: arch             = gemma
0.00.269.820 I llm_load_print_meta: vocab type       = SPM
0.00.269.821 I llm_load_print_meta: n_vocab          = 256000
0.00.269.822 I llm_load_print_meta: n_merges         = 0
0.00.269.822 I llm_load_print_meta: vocab_only       = 0
0.00.269.822 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.823 I llm_load_print_meta: n_embd           = 2048
0.00.269.823 I llm_load_print_meta: n_layer          = 18
0.00.269.836 I llm_load_print_meta: n_head           = 8
0.00.269.836 I llm_load_print_meta: n_head_kv        = 1
0.00.269.837 I llm_load_print_meta: n_rot            = 256
0.00.269.837 I llm_load_print_meta: n_swa            = 0
0.00.269.838 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.838 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.839 I llm_load_print_meta: n_gqa            = 8
0.00.269.840 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.841 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.841 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.843 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.843 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.843 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.844 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.845 I llm_load_print_meta: n_ff             = 16384
0.00.269.845 I llm_load_print_meta: n_expert         = 0
0.00.269.845 I llm_load_print_meta: n_expert_used    = 0
0.00.269.846 I llm_load_print_meta: causal attn      = 1
0.00.269.846 I llm_load_print_meta: pooling type     = 0
0.00.269.846 I llm_load_print_meta: rope type        = 2
0.00.269.847 I llm_load_print_meta: rope scaling     = linear
0.00.269.848 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.849 I llm_load_print_meta: freq_scale_train = 1
0.00.269.849 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.849 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.850 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.850 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.850 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.850 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.851 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.851 I llm_load_print_meta: model type       = 2B
0.00.269.853 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.853 I llm_load_print_meta: model params     = 2.51 B
0.00.269.854 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.854 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.855 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.855 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.856 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.856 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.856 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.856 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.857 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.857 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.857 I llm_load_print_meta: max token length = 93
0.00.366.085 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.371.264 I llama_new_context_with_model: n_seq_max     = 1
0.00.371.269 I llama_new_context_with_model: n_ctx         = 4096
0.00.371.270 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.371.270 I llama_new_context_with_model: n_batch       = 2048
0.00.371.271 I llama_new_context_with_model: n_ubatch      = 512
0.00.371.271 I llama_new_context_with_model: flash_attn    = 0
0.00.371.273 I llama_new_context_with_model: freq_base     = 10000.0
0.00.371.274 I llama_new_context_with_model: freq_scale    = 1
0.00.371.275 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.371.295 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.385.762 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.385.775 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.385.866 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.387.151 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.387.158 I llama_new_context_with_model: graph nodes  = 601
0.00.387.158 I llama_new_context_with_model: graph splits = 1
0.00.387.161 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.387.161 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.468.178 I main: llama threadpool init, n_threads = 4
0.00.468.194 I 
0.00.468.268 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.468.271 I 
0.00.468.305 I sampler seed: 4218128592
0.00.468.315 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.468.327 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.468.330 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.468.331 I 
 increasities can be observed in various contexts. For instance, in education, teachers may exhibit increasities with students, while in healthcare, nurses may display unprofessional conduct

0.02.655.695 I llama_perf_sampler_print:    sampling time =       5.49 ms /    33 runs   (    0.17 ms per token,  6013.12 tokens per second)
0.02.655.698 I llama_perf_context_print:        load time =     467.39 ms
0.02.655.699 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.655.703 I llama_perf_context_print:        eval time =    2168.06 ms /    32 runs   (   67.75 ms per token,    14.76 tokens per second)
0.02.655.704 I llama_perf_context_print:       total time =    2187.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.577 I build: 4370 (5de36876) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.772 I main: llama backend init
0.00.000.779 I main: load the model and apply lora adapter, if any
0.00.021.350 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.363 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.375 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.380 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.381 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.385 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.386 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.386 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.387 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.388 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.389 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.394 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.394 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.395 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.395 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.396 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.209 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.881 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.774 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.781 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.782 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.783 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.784 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.785 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.786 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.789 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.790 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.791 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.792 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.793 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.797 I llama_model_loader: - type  f32:   37 tensors
0.00.131.798 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.628 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.263 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.776 I llm_load_vocab: special tokens cache size = 5
0.00.267.304 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.320 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.322 I llm_load_print_meta: arch             = gemma
0.00.267.322 I llm_load_print_meta: vocab type       = SPM
0.00.267.323 I llm_load_print_meta: n_vocab          = 256000
0.00.267.324 I llm_load_print_meta: n_merges         = 0
0.00.267.324 I llm_load_print_meta: vocab_only       = 0
0.00.267.324 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.325 I llm_load_print_meta: n_embd           = 2048
0.00.267.325 I llm_load_print_meta: n_layer          = 18
0.00.267.336 I llm_load_print_meta: n_head           = 8
0.00.267.337 I llm_load_print_meta: n_head_kv        = 1
0.00.267.337 I llm_load_print_meta: n_rot            = 256
0.00.267.337 I llm_load_print_meta: n_swa            = 0
0.00.267.338 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.338 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.339 I llm_load_print_meta: n_gqa            = 8
0.00.267.340 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.341 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.342 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.343 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.343 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.344 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.344 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.345 I llm_load_print_meta: n_ff             = 16384
0.00.267.345 I llm_load_print_meta: n_expert         = 0
0.00.267.346 I llm_load_print_meta: n_expert_used    = 0
0.00.267.346 I llm_load_print_meta: causal attn      = 1
0.00.267.347 I llm_load_print_meta: pooling type     = 0
0.00.267.347 I llm_load_print_meta: rope type        = 2
0.00.267.347 I llm_load_print_meta: rope scaling     = linear
0.00.267.349 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.349 I llm_load_print_meta: freq_scale_train = 1
0.00.267.349 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.350 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.350 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.350 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.351 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.351 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.351 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.352 I llm_load_print_meta: model type       = 2B
0.00.267.353 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.354 I llm_load_print_meta: model params     = 2.51 B
0.00.267.355 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.355 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.356 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.356 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.357 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.357 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.357 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.358 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.358 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.358 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.359 I llm_load_print_meta: max token length = 93
0.00.344.907 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.344.914 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.344.915 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.344.915 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.344.916 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.344.917 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.350.128 I llama_new_context_with_model: n_seq_max     = 1
0.00.350.134 I llama_new_context_with_model: n_ctx         = 4096
0.00.350.135 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.350.135 I llama_new_context_with_model: n_batch       = 2048
0.00.350.135 I llama_new_context_with_model: n_ubatch      = 512
0.00.350.136 I llama_new_context_with_model: flash_attn    = 0
0.00.350.138 I llama_new_context_with_model: freq_base     = 10000.0
0.00.350.139 I llama_new_context_with_model: freq_scale    = 1
0.00.350.140 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.350.160 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.364.336 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.364.352 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.364.439 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.365.714 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.365.720 I llama_new_context_with_model: graph nodes  = 601
0.00.365.720 I llama_new_context_with_model: graph splits = 1
0.00.365.723 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.365.723 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.451.536 I main: llama threadpool init, n_threads = 4
0.00.451.552 I 
0.00.451.628 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.451.631 I 
0.00.451.664 I sampler seed: 4227514590
0.00.451.675 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.451.678 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.451.678 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.451.679 I 
 increasities, but also genuine love and support. [end of text]


0.01.233.073 I llama_perf_sampler_print:    sampling time =       1.91 ms /    12 runs   (    0.16 ms per token,  6295.91 tokens per second)
0.01.233.075 I llama_perf_context_print:        load time =     450.74 ms
0.01.233.076 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.233.077 I llama_perf_context_print:        eval time =     774.36 ms /    11 runs   (   70.40 ms per token,    14.21 tokens per second)
0.01.233.078 I llama_perf_context_print:       total time =     781.55 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.605 I build: 4370 (5de36876) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.802 I main: llama backend init
0.00.000.809 I main: load the model and apply lora adapter, if any
0.00.021.225 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.235 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.242 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.247 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.247 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.251 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.252 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.252 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.253 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.253 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.254 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.257 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.258 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.259 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.259 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.260 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.803 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.063 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.919 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.926 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.926 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.927 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.927 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.928 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.929 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.931 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.932 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.932 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.933 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.130.934 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.937 I llama_model_loader: - type  f32:   37 tensors
0.00.130.938 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.546 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.500 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.992 I llm_load_vocab: special tokens cache size = 5
0.00.264.898 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.913 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.914 I llm_load_print_meta: arch             = gemma
0.00.264.915 I llm_load_print_meta: vocab type       = SPM
0.00.264.915 I llm_load_print_meta: n_vocab          = 256000
0.00.264.916 I llm_load_print_meta: n_merges         = 0
0.00.264.916 I llm_load_print_meta: vocab_only       = 0
0.00.264.916 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.917 I llm_load_print_meta: n_embd           = 2048
0.00.264.917 I llm_load_print_meta: n_layer          = 18
0.00.264.928 I llm_load_print_meta: n_head           = 8
0.00.264.929 I llm_load_print_meta: n_head_kv        = 1
0.00.264.929 I llm_load_print_meta: n_rot            = 256
0.00.264.929 I llm_load_print_meta: n_swa            = 0
0.00.264.930 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.930 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.931 I llm_load_print_meta: n_gqa            = 8
0.00.264.932 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.932 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.933 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.935 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.935 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.936 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.936 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.937 I llm_load_print_meta: n_ff             = 16384
0.00.264.937 I llm_load_print_meta: n_expert         = 0
0.00.264.938 I llm_load_print_meta: n_expert_used    = 0
0.00.264.938 I llm_load_print_meta: causal attn      = 1
0.00.264.938 I llm_load_print_meta: pooling type     = 0
0.00.264.938 I llm_load_print_meta: rope type        = 2
0.00.264.939 I llm_load_print_meta: rope scaling     = linear
0.00.264.941 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.941 I llm_load_print_meta: freq_scale_train = 1
0.00.264.942 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.942 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.942 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.943 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.943 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.943 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.944 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.944 I llm_load_print_meta: model type       = 2B
0.00.264.946 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.946 I llm_load_print_meta: model params     = 2.51 B
0.00.264.947 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.947 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.948 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.948 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.948 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.949 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.949 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.949 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.949 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.950 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.950 I llm_load_print_meta: max token length = 93
0.00.336.352 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.336.358 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.341.419 I llama_new_context_with_model: n_seq_max     = 1
0.00.341.426 I llama_new_context_with_model: n_ctx         = 4096
0.00.341.426 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.341.427 I llama_new_context_with_model: n_batch       = 2048
0.00.341.427 I llama_new_context_with_model: n_ubatch      = 512
0.00.341.427 I llama_new_context_with_model: flash_attn    = 0
0.00.341.429 I llama_new_context_with_model: freq_base     = 10000.0
0.00.341.430 I llama_new_context_with_model: freq_scale    = 1
0.00.341.431 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.341.450 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.355.573 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.355.586 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.355.672 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.356.929 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.356.936 I llama_new_context_with_model: graph nodes  = 601
0.00.356.937 I llama_new_context_with_model: graph splits = 1
0.00.356.939 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.356.939 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.443.050 I main: llama threadpool init, n_threads = 4
0.00.443.066 I 
0.00.443.142 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.443.145 I 
0.00.443.179 I sampler seed: 3159557597
0.00.443.190 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.443.194 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.443.195 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.443.196 I 
 seconary in the context of the provided text is:

a) an alternative
b) an additional
c) a substitute
d) a synonym



0.02.866.673 I llama_perf_sampler_print:    sampling time =       5.79 ms /    33 runs   (    0.18 ms per token,  5700.47 tokens per second)
0.02.866.676 I llama_perf_context_print:        load time =     442.22 ms
0.02.866.677 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.866.680 I llama_perf_context_print:        eval time =    2403.27 ms /    32 runs   (   75.10 ms per token,    13.32 tokens per second)
0.02.866.681 I llama_perf_context_print:       total time =    2423.63 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.059s
user	0m30.091s
sys	0m9.273s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4370 (5de36876)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40413.37 ms
main:    total time = 40413.37 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.540 I build: 4370 (5de36876) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.734 I main: llama backend init
0.00.000.741 I main: load the model and apply lora adapter, if any
0.00.021.554 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.564 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.572 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.577 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.578 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.582 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.582 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.583 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.584 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.585 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.585 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.588 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.589 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.589 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.590 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.590 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.360 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.958 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.833 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.840 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.841 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.841 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.842 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.843 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.843 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.846 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.846 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.857 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.858 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.859 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.863 I llama_model_loader: - type  f32:   37 tensors
0.00.131.864 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.865 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.371 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.693 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.246 I llm_load_vocab: special tokens cache size = 5
0.00.267.951 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.967 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.968 I llm_load_print_meta: arch             = gemma
0.00.267.969 I llm_load_print_meta: vocab type       = SPM
0.00.267.969 I llm_load_print_meta: n_vocab          = 256000
0.00.267.970 I llm_load_print_meta: n_merges         = 0
0.00.267.970 I llm_load_print_meta: vocab_only       = 0
0.00.267.971 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.971 I llm_load_print_meta: n_embd           = 2048
0.00.267.971 I llm_load_print_meta: n_layer          = 18
0.00.267.983 I llm_load_print_meta: n_head           = 8
0.00.267.984 I llm_load_print_meta: n_head_kv        = 1
0.00.267.984 I llm_load_print_meta: n_rot            = 256
0.00.267.984 I llm_load_print_meta: n_swa            = 0
0.00.267.985 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.985 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.986 I llm_load_print_meta: n_gqa            = 8
0.00.267.987 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.988 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.988 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.990 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.990 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.991 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.991 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.992 I llm_load_print_meta: n_ff             = 16384
0.00.267.992 I llm_load_print_meta: n_expert         = 0
0.00.267.993 I llm_load_print_meta: n_expert_used    = 0
0.00.267.993 I llm_load_print_meta: causal attn      = 1
0.00.267.993 I llm_load_print_meta: pooling type     = 0
0.00.267.993 I llm_load_print_meta: rope type        = 2
0.00.267.994 I llm_load_print_meta: rope scaling     = linear
0.00.267.995 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.995 I llm_load_print_meta: freq_scale_train = 1
0.00.267.995 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.996 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.996 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.996 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.997 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.997 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.997 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.998 I llm_load_print_meta: model type       = 2B
0.00.268.000 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.268.000 I llm_load_print_meta: model params     = 2.51 B
0.00.268.001 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.268.001 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.002 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.002 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.003 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.003 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.003 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.003 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.004 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.004 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.004 I llm_load_print_meta: max token length = 93
0.00.328.478 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.328.484 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.328.484 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.328.485 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.328.485 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.328.486 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.334.038 I llama_new_context_with_model: n_seq_max     = 1
0.00.334.044 I llama_new_context_with_model: n_ctx         = 4096
0.00.334.045 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.334.045 I llama_new_context_with_model: n_batch       = 2048
0.00.334.046 I llama_new_context_with_model: n_ubatch      = 512
0.00.334.046 I llama_new_context_with_model: flash_attn    = 0
0.00.334.049 I llama_new_context_with_model: freq_base     = 10000.0
0.00.334.049 I llama_new_context_with_model: freq_scale    = 1
0.00.334.050 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.334.070 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.348.387 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.348.400 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.348.489 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.349.700 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.349.706 I llama_new_context_with_model: graph nodes  = 601
0.00.349.706 I llama_new_context_with_model: graph splits = 1
0.00.349.709 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.349.709 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.424.906 I main: llama threadpool init, n_threads = 4
0.00.424.923 I 
0.00.424.997 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.425.000 I 
0.00.425.033 I sampler seed: 2312017817
0.00.425.044 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.425.055 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.425.059 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.425.059 I 
 increamically. The prompt is asking for help with a task, not to provide a response. [end of text]


0.01.422.776 I llama_perf_sampler_print:    sampling time =       3.61 ms /    21 runs   (    0.17 ms per token,  5823.63 tokens per second)
0.01.422.779 I llama_perf_context_print:        load time =     424.14 ms
0.01.422.781 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.422.783 I llama_perf_context_print:        eval time =     984.60 ms /    20 runs   (   49.23 ms per token,    20.31 tokens per second)
0.01.422.785 I llama_perf_context_print:       total time =     997.88 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4370 (5de36876)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40206.97 ms
main:    total time = 40206.97 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.541 I build: 4370 (5de36876) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.748 I main: llama backend init
0.00.000.755 I main: load the model and apply lora adapter, if any
0.00.021.472 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.491 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.498 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.498 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.502 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.503 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.503 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.504 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.505 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.505 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.509 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.509 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.510 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.510 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.511 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.983 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.753 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.633 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.643 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.644 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.645 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.646 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.647 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.648 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.651 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.651 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.655 I llama_model_loader: - type  f32:   37 tensors
0.00.131.657 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.658 I llama_model_loader: - type q6_K:   19 tensors
0.00.218.460 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.261.315 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.892 I llm_load_vocab: special tokens cache size = 5
0.00.282.458 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.475 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.477 I llm_load_print_meta: arch             = gemma
0.00.282.477 I llm_load_print_meta: vocab type       = SPM
0.00.282.478 I llm_load_print_meta: n_vocab          = 256000
0.00.282.479 I llm_load_print_meta: n_merges         = 0
0.00.282.479 I llm_load_print_meta: vocab_only       = 0
0.00.282.479 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.479 I llm_load_print_meta: n_embd           = 2048
0.00.282.480 I llm_load_print_meta: n_layer          = 18
0.00.282.491 I llm_load_print_meta: n_head           = 8
0.00.282.492 I llm_load_print_meta: n_head_kv        = 1
0.00.282.492 I llm_load_print_meta: n_rot            = 256
0.00.282.493 I llm_load_print_meta: n_swa            = 0
0.00.282.493 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.494 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.495 I llm_load_print_meta: n_gqa            = 8
0.00.282.496 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.497 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.498 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.499 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.499 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.499 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.500 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.501 I llm_load_print_meta: n_ff             = 16384
0.00.282.501 I llm_load_print_meta: n_expert         = 0
0.00.282.501 I llm_load_print_meta: n_expert_used    = 0
0.00.282.502 I llm_load_print_meta: causal attn      = 1
0.00.282.502 I llm_load_print_meta: pooling type     = 0
0.00.282.502 I llm_load_print_meta: rope type        = 2
0.00.282.503 I llm_load_print_meta: rope scaling     = linear
0.00.282.504 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.505 I llm_load_print_meta: freq_scale_train = 1
0.00.282.505 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.505 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.506 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.506 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.506 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.506 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.507 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.507 I llm_load_print_meta: model type       = 2B
0.00.282.509 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.282.510 I llm_load_print_meta: model params     = 2.51 B
0.00.282.511 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.282.511 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.512 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.512 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.512 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.512 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.513 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.513 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.513 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.514 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.514 I llm_load_print_meta: max token length = 93
0.00.342.613 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.347.854 I llama_new_context_with_model: n_seq_max     = 1
0.00.347.860 I llama_new_context_with_model: n_ctx         = 4096
0.00.347.860 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.347.861 I llama_new_context_with_model: n_batch       = 2048
0.00.347.861 I llama_new_context_with_model: n_ubatch      = 512
0.00.347.862 I llama_new_context_with_model: flash_attn    = 0
0.00.347.864 I llama_new_context_with_model: freq_base     = 10000.0
0.00.347.865 I llama_new_context_with_model: freq_scale    = 1
0.00.347.866 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.347.885 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.362.434 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.362.448 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.362.547 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.827 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.363.833 I llama_new_context_with_model: graph nodes  = 601
0.00.363.833 I llama_new_context_with_model: graph splits = 1
0.00.363.836 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.363.836 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.438.455 I main: llama threadpool init, n_threads = 4
0.00.438.470 I 
0.00.438.548 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.438.551 I 
0.00.438.584 I sampler seed: 2719048505
0.00.438.596 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.438.598 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.438.599 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.438.599 I 
 seconally to the question and give your answer.

Question: What is the significance of the phrase "time is money"?

Answer:

The phrase "

0.01.988.640 I llama_perf_sampler_print:    sampling time =       5.49 ms /    33 runs   (    0.17 ms per token,  6014.22 tokens per second)
0.01.988.643 I llama_perf_context_print:        load time =     437.68 ms
0.01.988.644 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.988.645 I llama_perf_context_print:        eval time =    1531.42 ms /    32 runs   (   47.86 ms per token,    20.90 tokens per second)
0.01.988.646 I llama_perf_context_print:       total time =    1550.19 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.854s
user	10m21.462s
sys	0m6.918s
