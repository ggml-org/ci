+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.642 I build: 4073 (5d4cbc08) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.841 I main: llama backend init
0.00.001.107 I main: load the model and apply lora adapter, if any
0.00.023.948 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.958 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.048 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.059 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.061 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.065 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.067 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.068 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.070 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.072 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.074 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.087 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.092 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.094 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.095 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.097 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.347 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.991 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.140 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.148 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.149 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.150 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.151 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.152 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.154 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.157 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.158 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.159 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.160 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.162 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.169 I llama_model_loader: - type  f32:   37 tensors
0.00.266.172 I llama_model_loader: - type q8_0:  127 tensors
0.00.440.472 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.501.836 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.502.801 I llm_load_vocab: special tokens cache size = 5
0.00.596.851 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.596.918 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.596.919 I llm_load_print_meta: arch             = gemma
0.00.596.919 I llm_load_print_meta: vocab type       = SPM
0.00.596.921 I llm_load_print_meta: n_vocab          = 256000
0.00.596.923 I llm_load_print_meta: n_merges         = 0
0.00.596.923 I llm_load_print_meta: vocab_only       = 0
0.00.596.924 I llm_load_print_meta: n_ctx_train      = 8192
0.00.596.924 I llm_load_print_meta: n_embd           = 2048
0.00.596.924 I llm_load_print_meta: n_layer          = 18
0.00.596.989 I llm_load_print_meta: n_head           = 8
0.00.596.996 I llm_load_print_meta: n_head_kv        = 1
0.00.596.997 I llm_load_print_meta: n_rot            = 256
0.00.596.997 I llm_load_print_meta: n_swa            = 0
0.00.596.999 I llm_load_print_meta: n_embd_head_k    = 256
0.00.596.999 I llm_load_print_meta: n_embd_head_v    = 256
0.00.597.004 I llm_load_print_meta: n_gqa            = 8
0.00.597.009 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.597.014 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.597.015 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.597.017 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.597.017 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.597.018 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.597.018 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.597.023 I llm_load_print_meta: n_ff             = 16384
0.00.597.024 I llm_load_print_meta: n_expert         = 0
0.00.597.024 I llm_load_print_meta: n_expert_used    = 0
0.00.597.025 I llm_load_print_meta: causal attn      = 1
0.00.597.026 I llm_load_print_meta: pooling type     = 0
0.00.597.026 I llm_load_print_meta: rope type        = 2
0.00.597.027 I llm_load_print_meta: rope scaling     = linear
0.00.597.033 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.597.033 I llm_load_print_meta: freq_scale_train = 1
0.00.597.035 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.597.035 I llm_load_print_meta: rope_finetuned   = unknown
0.00.597.036 I llm_load_print_meta: ssm_d_conv       = 0
0.00.597.036 I llm_load_print_meta: ssm_d_inner      = 0
0.00.597.037 I llm_load_print_meta: ssm_d_state      = 0
0.00.597.037 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.597.037 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.597.038 I llm_load_print_meta: model type       = 2B
0.00.597.039 I llm_load_print_meta: model ftype      = Q8_0
0.00.597.040 I llm_load_print_meta: model params     = 2.51 B
0.00.597.049 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.597.049 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.597.050 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.597.054 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.597.054 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.597.054 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.597.055 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.597.055 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.597.060 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.597.062 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.597.063 I llm_load_print_meta: max token length = 93
0.00.700.152 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.700.160 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.700.161 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.700.162 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.700.163 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.700.163 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.706.159 I llama_new_context_with_model: n_seq_max     = 1
0.00.706.166 I llama_new_context_with_model: n_ctx         = 4096
0.00.706.167 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.706.167 I llama_new_context_with_model: n_batch       = 2048
0.00.706.168 I llama_new_context_with_model: n_ubatch      = 512
0.00.706.168 I llama_new_context_with_model: flash_attn    = 0
0.00.706.170 I llama_new_context_with_model: freq_base     = 10000.0
0.00.706.171 I llama_new_context_with_model: freq_scale    = 1
0.00.706.172 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.722.664 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.722.702 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.722.825 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.725.369 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.725.373 I llama_new_context_with_model: graph nodes  = 601
0.00.725.373 I llama_new_context_with_model: graph splits = 1
0.00.725.401 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.334.122 I main: llama threadpool init, n_threads = 4
0.01.334.134 I 
0.01.334.238 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.334.242 I 
0.01.334.472 I sampler seed: 1645576536
0.01.334.484 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.334.493 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.334.494 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.334.494 I 
 increabling the magic of storytelling, especially for children.

**Step 1: Understand the Child's World**

- Observe their interests, hobbies,

0.14.727.621 I llama_perf_sampler_print:    sampling time =      46.65 ms /    33 runs   (    1.41 ms per token,   707.35 tokens per second)
0.14.727.625 I llama_perf_context_print:        load time =    1332.92 ms
0.14.727.627 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.727.629 I llama_perf_context_print:        eval time =   13305.51 ms /    32 runs   (  415.80 ms per token,     2.41 tokens per second)
0.14.727.630 I llama_perf_context_print:       total time =   13393.51 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.632 I build: 4073 (5d4cbc08) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.834 I main: llama backend init
0.00.001.095 I main: load the model and apply lora adapter, if any
0.00.023.340 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.431 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.444 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.447 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.451 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.453 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.454 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.455 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.456 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.457 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.463 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.465 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.466 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.468 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.469 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.146.948 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.245.404 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.263.523 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.263.531 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.263.532 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.263.533 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.263.534 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.263.535 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.263.537 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.263.543 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.263.544 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.263.545 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.263.546 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.263.547 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.263.555 I llama_model_loader: - type  f32:   37 tensors
0.00.263.557 I llama_model_loader: - type q8_0:  127 tensors
0.00.443.452 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.503.142 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.504.088 I llm_load_vocab: special tokens cache size = 5
0.00.599.870 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.599.934 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.599.935 I llm_load_print_meta: arch             = gemma
0.00.599.935 I llm_load_print_meta: vocab type       = SPM
0.00.599.936 I llm_load_print_meta: n_vocab          = 256000
0.00.599.939 I llm_load_print_meta: n_merges         = 0
0.00.599.939 I llm_load_print_meta: vocab_only       = 0
0.00.599.940 I llm_load_print_meta: n_ctx_train      = 8192
0.00.599.940 I llm_load_print_meta: n_embd           = 2048
0.00.599.940 I llm_load_print_meta: n_layer          = 18
0.00.600.007 I llm_load_print_meta: n_head           = 8
0.00.600.014 I llm_load_print_meta: n_head_kv        = 1
0.00.600.015 I llm_load_print_meta: n_rot            = 256
0.00.600.017 I llm_load_print_meta: n_swa            = 0
0.00.600.018 I llm_load_print_meta: n_embd_head_k    = 256
0.00.600.018 I llm_load_print_meta: n_embd_head_v    = 256
0.00.600.024 I llm_load_print_meta: n_gqa            = 8
0.00.600.029 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.600.034 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.600.036 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.600.038 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.600.038 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.600.038 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.600.039 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.600.044 I llm_load_print_meta: n_ff             = 16384
0.00.600.044 I llm_load_print_meta: n_expert         = 0
0.00.600.048 I llm_load_print_meta: n_expert_used    = 0
0.00.600.048 I llm_load_print_meta: causal attn      = 1
0.00.600.049 I llm_load_print_meta: pooling type     = 0
0.00.600.049 I llm_load_print_meta: rope type        = 2
0.00.600.050 I llm_load_print_meta: rope scaling     = linear
0.00.600.051 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.600.052 I llm_load_print_meta: freq_scale_train = 1
0.00.600.052 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.600.053 I llm_load_print_meta: rope_finetuned   = unknown
0.00.600.053 I llm_load_print_meta: ssm_d_conv       = 0
0.00.600.054 I llm_load_print_meta: ssm_d_inner      = 0
0.00.600.054 I llm_load_print_meta: ssm_d_state      = 0
0.00.600.054 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.600.055 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.600.056 I llm_load_print_meta: model type       = 2B
0.00.600.057 I llm_load_print_meta: model ftype      = Q8_0
0.00.600.058 I llm_load_print_meta: model params     = 2.51 B
0.00.600.067 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.600.068 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.600.069 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.600.070 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.600.070 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.600.074 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.600.074 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.600.075 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.600.079 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.600.081 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.600.081 I llm_load_print_meta: max token length = 93
0.00.697.576 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.703.401 I llama_new_context_with_model: n_seq_max     = 1
0.00.703.407 I llama_new_context_with_model: n_ctx         = 4096
0.00.703.408 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.703.408 I llama_new_context_with_model: n_batch       = 2048
0.00.703.408 I llama_new_context_with_model: n_ubatch      = 512
0.00.703.409 I llama_new_context_with_model: flash_attn    = 0
0.00.703.411 I llama_new_context_with_model: freq_base     = 10000.0
0.00.703.412 I llama_new_context_with_model: freq_scale    = 1
0.00.703.412 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.720.021 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.720.059 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.720.181 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.722.673 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.722.677 I llama_new_context_with_model: graph nodes  = 601
0.00.722.678 I llama_new_context_with_model: graph splits = 1
0.00.722.701 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.330.906 I main: llama threadpool init, n_threads = 4
0.01.330.918 I 
0.01.331.026 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.331.030 I 
0.01.331.261 I sampler seed: 3128147296
0.01.331.273 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.331.279 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.331.282 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.331.283 I 
 increasively and ineffectively. [end of text]


0.04.262.200 I llama_perf_sampler_print:    sampling time =      10.60 ms /     8 runs   (    1.33 ms per token,   754.50 tokens per second)
0.04.262.203 I llama_perf_context_print:        load time =    1329.71 ms
0.04.262.204 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.04.262.227 I llama_perf_context_print:        eval time =    2910.14 ms /     7 runs   (  415.73 ms per token,     2.41 tokens per second)
0.04.262.228 I llama_perf_context_print:       total time =    2931.30 ms /     8 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.668 I build: 4073 (5d4cbc08) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.892 I main: llama backend init
0.00.001.170 I main: load the model and apply lora adapter, if any
0.00.025.173 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.187 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.297 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.311 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.313 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.319 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.320 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.322 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.324 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.326 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.327 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.338 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.343 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.345 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.347 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.349 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.154.301 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.254.419 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.465 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.475 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.476 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.478 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.479 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.480 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.482 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.486 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.487 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.489 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.490 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.272.491 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.498 I llama_model_loader: - type  f32:   37 tensors
0.00.272.501 I llama_model_loader: - type q8_0:  127 tensors
0.00.444.630 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.503.833 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.504.753 I llm_load_vocab: special tokens cache size = 5
0.00.604.073 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.604.143 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.604.144 I llm_load_print_meta: arch             = gemma
0.00.604.144 I llm_load_print_meta: vocab type       = SPM
0.00.604.146 I llm_load_print_meta: n_vocab          = 256000
0.00.604.148 I llm_load_print_meta: n_merges         = 0
0.00.604.148 I llm_load_print_meta: vocab_only       = 0
0.00.604.149 I llm_load_print_meta: n_ctx_train      = 8192
0.00.604.149 I llm_load_print_meta: n_embd           = 2048
0.00.604.150 I llm_load_print_meta: n_layer          = 18
0.00.604.216 I llm_load_print_meta: n_head           = 8
0.00.604.224 I llm_load_print_meta: n_head_kv        = 1
0.00.604.224 I llm_load_print_meta: n_rot            = 256
0.00.604.225 I llm_load_print_meta: n_swa            = 0
0.00.604.226 I llm_load_print_meta: n_embd_head_k    = 256
0.00.604.226 I llm_load_print_meta: n_embd_head_v    = 256
0.00.604.231 I llm_load_print_meta: n_gqa            = 8
0.00.604.237 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.604.243 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.604.245 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.604.247 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.604.248 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.604.249 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.604.250 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.604.260 I llm_load_print_meta: n_ff             = 16384
0.00.604.261 I llm_load_print_meta: n_expert         = 0
0.00.604.265 I llm_load_print_meta: n_expert_used    = 0
0.00.604.266 I llm_load_print_meta: causal attn      = 1
0.00.604.266 I llm_load_print_meta: pooling type     = 0
0.00.604.267 I llm_load_print_meta: rope type        = 2
0.00.604.267 I llm_load_print_meta: rope scaling     = linear
0.00.604.270 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.604.271 I llm_load_print_meta: freq_scale_train = 1
0.00.604.271 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.604.272 I llm_load_print_meta: rope_finetuned   = unknown
0.00.604.272 I llm_load_print_meta: ssm_d_conv       = 0
0.00.604.273 I llm_load_print_meta: ssm_d_inner      = 0
0.00.604.273 I llm_load_print_meta: ssm_d_state      = 0
0.00.604.274 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.604.274 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.604.279 I llm_load_print_meta: model type       = 2B
0.00.604.280 I llm_load_print_meta: model ftype      = Q8_0
0.00.604.281 I llm_load_print_meta: model params     = 2.51 B
0.00.604.291 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.604.292 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.604.294 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.604.295 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.604.295 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.604.297 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.604.298 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.604.298 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.604.305 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.604.308 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.604.308 I llm_load_print_meta: max token length = 93
0.00.954.410 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.954.422 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.954.423 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.954.424 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.954.425 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.954.425 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.960.505 I llama_new_context_with_model: n_seq_max     = 1
0.00.960.512 I llama_new_context_with_model: n_ctx         = 4096
0.00.960.513 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.960.513 I llama_new_context_with_model: n_batch       = 2048
0.00.960.513 I llama_new_context_with_model: n_ubatch      = 512
0.00.960.514 I llama_new_context_with_model: flash_attn    = 0
0.00.960.516 I llama_new_context_with_model: freq_base     = 10000.0
0.00.960.517 I llama_new_context_with_model: freq_scale    = 1
0.00.960.517 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.976.879 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.976.921 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.977.040 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.979.564 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.979.567 I llama_new_context_with_model: graph nodes  = 601
0.00.979.568 I llama_new_context_with_model: graph splits = 1
0.00.979.592 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.589.371 I main: llama threadpool init, n_threads = 4
0.01.589.384 I 
0.01.589.505 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.589.509 I 
0.01.589.747 I sampler seed: 796009980
0.01.589.762 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.589.769 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.589.770 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.589.770 I 
 increasities as a new type of financial instrument. [end of text]


0.06.230.453 I llama_perf_sampler_print:    sampling time =      16.15 ms /    12 runs   (    1.35 ms per token,   742.90 tokens per second)
0.06.230.457 I llama_perf_context_print:        load time =    1588.09 ms
0.06.230.459 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.230.461 I llama_perf_context_print:        eval time =    4609.46 ms /    11 runs   (  419.04 ms per token,     2.39 tokens per second)
0.06.230.462 I llama_perf_context_print:       total time =    4641.09 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.657 I build: 4073 (5d4cbc08) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.854 I main: llama backend init
0.00.001.110 I main: load the model and apply lora adapter, if any
0.00.023.364 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.377 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.465 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.478 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.480 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.491 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.493 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.495 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.496 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.497 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.506 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.517 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.521 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.522 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.523 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.524 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.124 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.355 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.396 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.407 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.408 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.409 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.410 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.412 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.413 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.417 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.418 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.419 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.420 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.265.422 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.432 I llama_model_loader: - type  f32:   37 tensors
0.00.265.443 I llama_model_loader: - type q8_0:  127 tensors
0.00.452.357 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.513.396 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.514.256 I llm_load_vocab: special tokens cache size = 5
0.00.608.982 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.609.048 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.609.049 I llm_load_print_meta: arch             = gemma
0.00.609.050 I llm_load_print_meta: vocab type       = SPM
0.00.609.050 I llm_load_print_meta: n_vocab          = 256000
0.00.609.053 I llm_load_print_meta: n_merges         = 0
0.00.609.053 I llm_load_print_meta: vocab_only       = 0
0.00.609.054 I llm_load_print_meta: n_ctx_train      = 8192
0.00.609.054 I llm_load_print_meta: n_embd           = 2048
0.00.609.054 I llm_load_print_meta: n_layer          = 18
0.00.609.120 I llm_load_print_meta: n_head           = 8
0.00.609.127 I llm_load_print_meta: n_head_kv        = 1
0.00.609.128 I llm_load_print_meta: n_rot            = 256
0.00.609.128 I llm_load_print_meta: n_swa            = 0
0.00.609.129 I llm_load_print_meta: n_embd_head_k    = 256
0.00.609.129 I llm_load_print_meta: n_embd_head_v    = 256
0.00.609.134 I llm_load_print_meta: n_gqa            = 8
0.00.609.159 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.609.165 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.609.167 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.609.168 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.609.169 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.609.169 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.609.170 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.609.175 I llm_load_print_meta: n_ff             = 16384
0.00.609.175 I llm_load_print_meta: n_expert         = 0
0.00.609.175 I llm_load_print_meta: n_expert_used    = 0
0.00.609.176 I llm_load_print_meta: causal attn      = 1
0.00.609.177 I llm_load_print_meta: pooling type     = 0
0.00.609.185 I llm_load_print_meta: rope type        = 2
0.00.609.186 I llm_load_print_meta: rope scaling     = linear
0.00.609.188 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.609.188 I llm_load_print_meta: freq_scale_train = 1
0.00.609.189 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.609.189 I llm_load_print_meta: rope_finetuned   = unknown
0.00.609.189 I llm_load_print_meta: ssm_d_conv       = 0
0.00.609.191 I llm_load_print_meta: ssm_d_inner      = 0
0.00.609.191 I llm_load_print_meta: ssm_d_state      = 0
0.00.609.191 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.609.192 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.609.192 I llm_load_print_meta: model type       = 2B
0.00.609.194 I llm_load_print_meta: model ftype      = Q8_0
0.00.609.195 I llm_load_print_meta: model params     = 2.51 B
0.00.609.203 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.609.203 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.609.204 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.609.204 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.609.205 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.609.205 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.609.214 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.609.215 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.609.221 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.609.228 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.609.229 I llm_load_print_meta: max token length = 93
0.00.682.084 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.682.092 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.687.960 I llama_new_context_with_model: n_seq_max     = 1
0.00.687.968 I llama_new_context_with_model: n_ctx         = 4096
0.00.687.968 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.687.969 I llama_new_context_with_model: n_batch       = 2048
0.00.687.969 I llama_new_context_with_model: n_ubatch      = 512
0.00.687.969 I llama_new_context_with_model: flash_attn    = 0
0.00.687.971 I llama_new_context_with_model: freq_base     = 10000.0
0.00.687.972 I llama_new_context_with_model: freq_scale    = 1
0.00.687.973 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.704.419 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.704.461 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.704.609 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.707.249 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.707.254 I llama_new_context_with_model: graph nodes  = 601
0.00.707.254 I llama_new_context_with_model: graph splits = 1
0.00.707.279 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.343.787 I main: llama threadpool init, n_threads = 4
0.01.343.799 I 
0.01.343.904 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.343.908 I 
0.01.344.141 I sampler seed: 3917420535
0.01.344.152 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.344.160 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.344.160 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.344.161 I 
 increasities. [end of text]


0.03.040.959 I llama_perf_sampler_print:    sampling time =       6.55 ms /     5 runs   (    1.31 ms per token,   763.83 tokens per second)
0.03.040.973 I llama_perf_context_print:        load time =    1342.58 ms
0.03.040.974 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.040.976 I llama_perf_context_print:        eval time =    1683.23 ms /     4 runs   (  420.81 ms per token,     2.38 tokens per second)
0.03.040.976 I llama_perf_context_print:       total time =    1697.18 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m37.889s
user	1m43.493s
sys	0m9.264s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4073 (5d4cbc08)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198630.11 ms
main:    total time = 198630.11 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.671 I build: 4073 (5d4cbc08) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.892 I main: llama backend init
0.00.001.155 I main: load the model and apply lora adapter, if any
0.00.023.698 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.708 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.798 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.810 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.812 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.816 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.818 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.819 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.821 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.822 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.830 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.836 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.838 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.839 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.840 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.841 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.860 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.123 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.233 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.243 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.244 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.245 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.246 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.247 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.248 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.251 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.252 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.254 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.254 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.256 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.264 I llama_model_loader: - type  f32:   37 tensors
0.00.265.266 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.267 I llama_model_loader: - type q6_K:   19 tensors
0.00.442.347 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.500.647 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.501.579 I llm_load_vocab: special tokens cache size = 5
0.00.595.730 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.595.800 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.595.801 I llm_load_print_meta: arch             = gemma
0.00.595.802 I llm_load_print_meta: vocab type       = SPM
0.00.595.802 I llm_load_print_meta: n_vocab          = 256000
0.00.595.805 I llm_load_print_meta: n_merges         = 0
0.00.595.805 I llm_load_print_meta: vocab_only       = 0
0.00.595.805 I llm_load_print_meta: n_ctx_train      = 8192
0.00.595.806 I llm_load_print_meta: n_embd           = 2048
0.00.595.806 I llm_load_print_meta: n_layer          = 18
0.00.595.868 I llm_load_print_meta: n_head           = 8
0.00.595.875 I llm_load_print_meta: n_head_kv        = 1
0.00.595.875 I llm_load_print_meta: n_rot            = 256
0.00.595.876 I llm_load_print_meta: n_swa            = 0
0.00.595.876 I llm_load_print_meta: n_embd_head_k    = 256
0.00.595.877 I llm_load_print_meta: n_embd_head_v    = 256
0.00.595.881 I llm_load_print_meta: n_gqa            = 8
0.00.595.886 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.595.891 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.595.892 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.595.894 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.595.894 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.595.894 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.595.895 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.595.913 I llm_load_print_meta: n_ff             = 16384
0.00.595.914 I llm_load_print_meta: n_expert         = 0
0.00.595.914 I llm_load_print_meta: n_expert_used    = 0
0.00.595.914 I llm_load_print_meta: causal attn      = 1
0.00.595.915 I llm_load_print_meta: pooling type     = 0
0.00.595.915 I llm_load_print_meta: rope type        = 2
0.00.595.916 I llm_load_print_meta: rope scaling     = linear
0.00.595.917 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.595.918 I llm_load_print_meta: freq_scale_train = 1
0.00.595.918 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.595.918 I llm_load_print_meta: rope_finetuned   = unknown
0.00.595.919 I llm_load_print_meta: ssm_d_conv       = 0
0.00.595.919 I llm_load_print_meta: ssm_d_inner      = 0
0.00.595.919 I llm_load_print_meta: ssm_d_state      = 0
0.00.595.920 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.595.920 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.595.921 I llm_load_print_meta: model type       = 2B
0.00.595.922 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.595.922 I llm_load_print_meta: model params     = 2.51 B
0.00.595.932 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.595.932 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.595.933 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.595.933 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.595.934 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.595.934 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.595.935 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.595.936 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.595.942 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.595.943 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.595.943 I llm_load_print_meta: max token length = 93
0.00.659.924 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.659.934 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.659.935 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.659.935 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.659.936 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.659.937 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.665.686 I llama_new_context_with_model: n_seq_max     = 1
0.00.665.693 I llama_new_context_with_model: n_ctx         = 4096
0.00.665.694 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.665.694 I llama_new_context_with_model: n_batch       = 2048
0.00.665.694 I llama_new_context_with_model: n_ubatch      = 512
0.00.665.695 I llama_new_context_with_model: flash_attn    = 0
0.00.665.698 I llama_new_context_with_model: freq_base     = 10000.0
0.00.665.698 I llama_new_context_with_model: freq_scale    = 1
0.00.665.699 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.682.257 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.682.296 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.682.410 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.684.916 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.684.920 I llama_new_context_with_model: graph nodes  = 601
0.00.684.921 I llama_new_context_with_model: graph splits = 1
0.00.684.944 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.256.359 I main: llama threadpool init, n_threads = 4
0.01.256.371 I 
0.01.256.476 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.256.480 I 
0.01.256.707 I sampler seed: 3991639292
0.01.256.720 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.256.727 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.256.730 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.256.730 I 
 squaRED, a leading provider of technology solutions for the public sector, has partnered with leading technology companies to offer innovative solutions that enhance citizen engagement and local governance.

0.12.133.874 I llama_perf_sampler_print:    sampling time =      46.72 ms /    33 runs   (    1.42 ms per token,   706.32 tokens per second)
0.12.133.878 I llama_perf_context_print:        load time =    1255.11 ms
0.12.133.880 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.133.881 I llama_perf_context_print:        eval time =   10790.19 ms /    32 runs   (  337.19 ms per token,     2.97 tokens per second)
0.12.133.882 I llama_perf_context_print:       total time =   10877.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4073 (5d4cbc08)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198595.42 ms
main:    total time = 198595.42 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 4073 (5d4cbc08) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.841 I main: llama backend init
0.00.001.106 I main: load the model and apply lora adapter, if any
0.00.023.464 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.561 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.574 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.577 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.581 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.586 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.587 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.588 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.589 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.590 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.596 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.597 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.599 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.600 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.601 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.406 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.778 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.963 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.971 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.972 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.973 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.975 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.976 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.978 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.982 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.983 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.991 I llama_model_loader: - type  f32:   37 tensors
0.00.270.994 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.995 I llama_model_loader: - type q6_K:   19 tensors
0.00.442.902 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.503.610 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.504.425 I llm_load_vocab: special tokens cache size = 5
0.00.599.591 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.599.660 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.599.664 I llm_load_print_meta: arch             = gemma
0.00.599.665 I llm_load_print_meta: vocab type       = SPM
0.00.599.665 I llm_load_print_meta: n_vocab          = 256000
0.00.599.667 I llm_load_print_meta: n_merges         = 0
0.00.599.668 I llm_load_print_meta: vocab_only       = 0
0.00.599.669 I llm_load_print_meta: n_ctx_train      = 8192
0.00.599.669 I llm_load_print_meta: n_embd           = 2048
0.00.599.669 I llm_load_print_meta: n_layer          = 18
0.00.599.733 I llm_load_print_meta: n_head           = 8
0.00.599.744 I llm_load_print_meta: n_head_kv        = 1
0.00.599.745 I llm_load_print_meta: n_rot            = 256
0.00.599.745 I llm_load_print_meta: n_swa            = 0
0.00.599.746 I llm_load_print_meta: n_embd_head_k    = 256
0.00.599.746 I llm_load_print_meta: n_embd_head_v    = 256
0.00.599.751 I llm_load_print_meta: n_gqa            = 8
0.00.599.756 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.599.761 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.599.763 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.599.764 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.599.765 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.599.765 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.599.766 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.599.770 I llm_load_print_meta: n_ff             = 16384
0.00.599.771 I llm_load_print_meta: n_expert         = 0
0.00.599.772 I llm_load_print_meta: n_expert_used    = 0
0.00.599.772 I llm_load_print_meta: causal attn      = 1
0.00.599.772 I llm_load_print_meta: pooling type     = 0
0.00.599.773 I llm_load_print_meta: rope type        = 2
0.00.599.774 I llm_load_print_meta: rope scaling     = linear
0.00.599.775 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.599.776 I llm_load_print_meta: freq_scale_train = 1
0.00.599.777 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.599.778 I llm_load_print_meta: rope_finetuned   = unknown
0.00.599.779 I llm_load_print_meta: ssm_d_conv       = 0
0.00.599.779 I llm_load_print_meta: ssm_d_inner      = 0
0.00.599.780 I llm_load_print_meta: ssm_d_state      = 0
0.00.599.780 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.599.780 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.599.781 I llm_load_print_meta: model type       = 2B
0.00.599.783 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.599.783 I llm_load_print_meta: model params     = 2.51 B
0.00.599.792 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.599.793 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.599.794 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.599.794 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.599.795 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.599.796 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.599.796 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.599.797 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.599.802 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.599.804 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.599.804 I llm_load_print_meta: max token length = 93
0.00.660.060 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.665.784 I llama_new_context_with_model: n_seq_max     = 1
0.00.665.791 I llama_new_context_with_model: n_ctx         = 4096
0.00.665.791 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.665.791 I llama_new_context_with_model: n_batch       = 2048
0.00.665.792 I llama_new_context_with_model: n_ubatch      = 512
0.00.665.792 I llama_new_context_with_model: flash_attn    = 0
0.00.665.794 I llama_new_context_with_model: freq_base     = 10000.0
0.00.665.795 I llama_new_context_with_model: freq_scale    = 1
0.00.665.795 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.682.209 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.682.249 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.682.366 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.684.933 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.684.937 I llama_new_context_with_model: graph nodes  = 601
0.00.684.938 I llama_new_context_with_model: graph splits = 1
0.00.684.963 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.257.128 I main: llama threadpool init, n_threads = 4
0.01.257.140 I 
0.01.257.244 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.257.248 I 
0.01.257.474 I sampler seed: 2171705741
0.01.257.487 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.257.493 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.257.497 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.257.497 I 
 increasities with a focus on the role of social media and the changing dynamics of online courtship.

## The Digital Matchmaker: Social Media and Changing Dynamics of

0.12.163.122 I llama_perf_sampler_print:    sampling time =      46.79 ms /    33 runs   (    1.42 ms per token,   705.34 tokens per second)
0.12.163.137 I llama_perf_context_print:        load time =    1255.93 ms
0.12.163.139 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.163.141 I llama_perf_context_print:        eval time =   10817.69 ms /    32 runs   (  338.05 ms per token,     2.96 tokens per second)
0.12.163.143 I llama_perf_context_print:       total time =   10906.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.686s
user	50m8.654s
sys	0m6.369s
