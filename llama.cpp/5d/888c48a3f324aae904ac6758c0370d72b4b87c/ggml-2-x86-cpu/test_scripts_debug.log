+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.647 I build: 3805 (5d888c48) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.002.774 I main: load the model and apply lora adapter, if any
0.00.024.389 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.591 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.681 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.692 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.694 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.698 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.699 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.700 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.701 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.701 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.703 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.710 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.714 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.715 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.716 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.717 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.617 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.470 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.562 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.570 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.571 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.572 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.572 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.574 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.575 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.578 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.579 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.580 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.581 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.196.582 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.589 I llama_model_loader: - type  f32:   37 tensors
0.00.196.593 I llama_model_loader: - type q8_0:  127 tensors
0.00.470.948 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.472.066 I llm_load_vocab: special tokens cache size = 5
0.00.530.525 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.530.587 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.530.588 I llm_load_print_meta: arch             = gemma
0.00.530.589 I llm_load_print_meta: vocab type       = SPM
0.00.530.590 I llm_load_print_meta: n_vocab          = 256000
0.00.530.593 I llm_load_print_meta: n_merges         = 0
0.00.530.593 I llm_load_print_meta: vocab_only       = 0
0.00.530.594 I llm_load_print_meta: n_ctx_train      = 8192
0.00.530.594 I llm_load_print_meta: n_embd           = 2048
0.00.530.595 I llm_load_print_meta: n_layer          = 18
0.00.530.634 I llm_load_print_meta: n_head           = 8
0.00.530.641 I llm_load_print_meta: n_head_kv        = 1
0.00.530.642 I llm_load_print_meta: n_rot            = 256
0.00.530.643 I llm_load_print_meta: n_swa            = 0
0.00.530.643 I llm_load_print_meta: n_embd_head_k    = 256
0.00.530.643 I llm_load_print_meta: n_embd_head_v    = 256
0.00.530.648 I llm_load_print_meta: n_gqa            = 8
0.00.530.652 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.530.657 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.530.658 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.530.660 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.530.660 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.530.661 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.530.661 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.530.666 I llm_load_print_meta: n_ff             = 16384
0.00.530.667 I llm_load_print_meta: n_expert         = 0
0.00.530.667 I llm_load_print_meta: n_expert_used    = 0
0.00.530.668 I llm_load_print_meta: causal attn      = 1
0.00.530.669 I llm_load_print_meta: pooling type     = 0
0.00.530.670 I llm_load_print_meta: rope type        = 2
0.00.530.670 I llm_load_print_meta: rope scaling     = linear
0.00.530.672 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.530.684 I llm_load_print_meta: freq_scale_train = 1
0.00.530.684 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.530.685 I llm_load_print_meta: rope_finetuned   = unknown
0.00.530.698 I llm_load_print_meta: ssm_d_conv       = 0
0.00.530.698 I llm_load_print_meta: ssm_d_inner      = 0
0.00.530.699 I llm_load_print_meta: ssm_d_state      = 0
0.00.530.699 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.530.700 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.530.701 I llm_load_print_meta: model type       = 2B
0.00.530.711 I llm_load_print_meta: model ftype      = Q8_0
0.00.530.712 I llm_load_print_meta: model params     = 2.51 B
0.00.530.717 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.530.718 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.530.719 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.530.719 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.530.721 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.530.721 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.530.722 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.530.725 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.530.726 I llm_load_print_meta: max token length = 93
0.00.530.903 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.630.964 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.630.975 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.630.976 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.630.977 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.630.978 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.630.978 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.636.491 I llama_new_context_with_model: n_ctx      = 8192
0.00.636.498 I llama_new_context_with_model: n_batch    = 2048
0.00.636.498 I llama_new_context_with_model: n_ubatch   = 512
0.00.636.499 I llama_new_context_with_model: flash_attn = 0
0.00.636.502 I llama_new_context_with_model: freq_base  = 10000.0
0.00.636.502 I llama_new_context_with_model: freq_scale = 1
0.00.665.884 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.665.926 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.666.047 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.667.455 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.667.462 I llama_new_context_with_model: graph nodes  = 601
0.00.667.462 I llama_new_context_with_model: graph splits = 1
0.00.667.479 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.281.521 I main: llama threadpool init, n_threads = 4
0.01.281.533 I 
0.01.281.627 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.281.631 I 
0.01.281.792 I sampler seed: 3128659026
0.01.281.802 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.281.809 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.281.810 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities and vulnerabilities to vulnerabilities in the software architecture.

**Software Architecture and Design**

* **Modular design:** Promotes loose coupling and separation of concerns,

0.14.826.537 I llama_perf_sampler_print:    sampling time =      47.69 ms /    33 runs   (    1.45 ms per token,   691.94 tokens per second)
0.14.826.541 I llama_perf_context_print:        load time =    1278.67 ms
0.14.826.553 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.826.556 I llama_perf_context_print:        eval time =   13464.59 ms /    32 runs   (  420.77 ms per token,     2.38 tokens per second)
0.14.826.557 I llama_perf_context_print:       total time =   13545.03 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.668 I build: 3805 (5d888c48) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.866 I main: llama backend init
0.00.002.813 I main: load the model and apply lora adapter, if any
0.00.025.121 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.212 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.228 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.229 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.233 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.233 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.235 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.236 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.237 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.238 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.244 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.245 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.246 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.247 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.248 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.102 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.074 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.119 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.126 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.127 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.128 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.128 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.129 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.130 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.133 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.133 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.135 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.135 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.196.137 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.143 I llama_model_loader: - type  f32:   37 tensors
0.00.196.148 I llama_model_loader: - type q8_0:  127 tensors
0.00.464.372 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.465.406 I llm_load_vocab: special tokens cache size = 5
0.00.523.925 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.523.983 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.523.984 I llm_load_print_meta: arch             = gemma
0.00.523.985 I llm_load_print_meta: vocab type       = SPM
0.00.523.986 I llm_load_print_meta: n_vocab          = 256000
0.00.523.988 I llm_load_print_meta: n_merges         = 0
0.00.523.989 I llm_load_print_meta: vocab_only       = 0
0.00.523.989 I llm_load_print_meta: n_ctx_train      = 8192
0.00.523.990 I llm_load_print_meta: n_embd           = 2048
0.00.523.990 I llm_load_print_meta: n_layer          = 18
0.00.524.023 I llm_load_print_meta: n_head           = 8
0.00.524.030 I llm_load_print_meta: n_head_kv        = 1
0.00.524.030 I llm_load_print_meta: n_rot            = 256
0.00.524.031 I llm_load_print_meta: n_swa            = 0
0.00.524.031 I llm_load_print_meta: n_embd_head_k    = 256
0.00.524.031 I llm_load_print_meta: n_embd_head_v    = 256
0.00.524.036 I llm_load_print_meta: n_gqa            = 8
0.00.524.040 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.524.045 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.524.046 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.524.048 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.524.048 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.524.049 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.524.049 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.524.068 I llm_load_print_meta: n_ff             = 16384
0.00.524.069 I llm_load_print_meta: n_expert         = 0
0.00.524.069 I llm_load_print_meta: n_expert_used    = 0
0.00.524.070 I llm_load_print_meta: causal attn      = 1
0.00.524.070 I llm_load_print_meta: pooling type     = 0
0.00.524.071 I llm_load_print_meta: rope type        = 2
0.00.524.071 I llm_load_print_meta: rope scaling     = linear
0.00.524.072 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.524.073 I llm_load_print_meta: freq_scale_train = 1
0.00.524.074 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.524.074 I llm_load_print_meta: rope_finetuned   = unknown
0.00.524.074 I llm_load_print_meta: ssm_d_conv       = 0
0.00.524.075 I llm_load_print_meta: ssm_d_inner      = 0
0.00.524.075 I llm_load_print_meta: ssm_d_state      = 0
0.00.524.075 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.524.076 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.524.076 I llm_load_print_meta: model type       = 2B
0.00.524.077 I llm_load_print_meta: model ftype      = Q8_0
0.00.524.079 I llm_load_print_meta: model params     = 2.51 B
0.00.524.079 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.524.080 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.524.080 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.524.081 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.524.081 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.524.082 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.524.082 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.524.083 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.524.083 I llm_load_print_meta: max token length = 93
0.00.524.257 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.617.808 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.623.505 I llama_new_context_with_model: n_ctx      = 8192
0.00.623.513 I llama_new_context_with_model: n_batch    = 2048
0.00.623.513 I llama_new_context_with_model: n_ubatch   = 512
0.00.623.514 I llama_new_context_with_model: flash_attn = 0
0.00.623.517 I llama_new_context_with_model: freq_base  = 10000.0
0.00.623.517 I llama_new_context_with_model: freq_scale = 1
0.00.652.801 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.652.848 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.652.963 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.654.349 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.654.355 I llama_new_context_with_model: graph nodes  = 601
0.00.654.356 I llama_new_context_with_model: graph splits = 1
0.00.654.371 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.265.594 I main: llama threadpool init, n_threads = 4
0.01.265.603 I 
0.01.265.695 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.265.698 I 
0.01.265.861 I sampler seed: 2425993612
0.01.265.871 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.265.877 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.265.877 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconary schools and kindergartens in Maharashtra aim to provide holistic development to children by focusing on:

a) Physical development
b) Intellectual development
c

0.14.806.003 I llama_perf_sampler_print:    sampling time =      48.00 ms /    33 runs   (    1.45 ms per token,   687.51 tokens per second)
0.14.806.007 I llama_perf_context_print:        load time =    1262.69 ms
0.14.806.017 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.806.020 I llama_perf_context_print:        eval time =   13459.28 ms /    32 runs   (  420.60 ms per token,     2.38 tokens per second)
0.14.806.021 I llama_perf_context_print:       total time =   13540.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.624 I build: 3805 (5d888c48) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.837 I main: llama backend init
0.00.002.780 I main: load the model and apply lora adapter, if any
0.00.024.517 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.696 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.784 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.795 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.796 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.800 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.801 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.802 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.803 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.804 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.804 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.810 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.811 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.812 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.813 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.814 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.913 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.301 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.471 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.478 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.479 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.480 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.480 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.481 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.482 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.485 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.486 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.487 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.488 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.196.489 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.496 I llama_model_loader: - type  f32:   37 tensors
0.00.196.500 I llama_model_loader: - type q8_0:  127 tensors
0.00.458.143 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.459.246 I llm_load_vocab: special tokens cache size = 5
0.00.517.669 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.517.722 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.517.723 I llm_load_print_meta: arch             = gemma
0.00.517.723 I llm_load_print_meta: vocab type       = SPM
0.00.517.724 I llm_load_print_meta: n_vocab          = 256000
0.00.517.726 I llm_load_print_meta: n_merges         = 0
0.00.517.727 I llm_load_print_meta: vocab_only       = 0
0.00.517.727 I llm_load_print_meta: n_ctx_train      = 8192
0.00.517.728 I llm_load_print_meta: n_embd           = 2048
0.00.517.728 I llm_load_print_meta: n_layer          = 18
0.00.517.762 I llm_load_print_meta: n_head           = 8
0.00.517.768 I llm_load_print_meta: n_head_kv        = 1
0.00.517.769 I llm_load_print_meta: n_rot            = 256
0.00.517.769 I llm_load_print_meta: n_swa            = 0
0.00.517.769 I llm_load_print_meta: n_embd_head_k    = 256
0.00.517.770 I llm_load_print_meta: n_embd_head_v    = 256
0.00.517.775 I llm_load_print_meta: n_gqa            = 8
0.00.517.779 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.517.784 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.517.785 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.517.787 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.517.787 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.517.788 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.517.788 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.517.793 I llm_load_print_meta: n_ff             = 16384
0.00.517.794 I llm_load_print_meta: n_expert         = 0
0.00.517.794 I llm_load_print_meta: n_expert_used    = 0
0.00.517.794 I llm_load_print_meta: causal attn      = 1
0.00.517.795 I llm_load_print_meta: pooling type     = 0
0.00.517.795 I llm_load_print_meta: rope type        = 2
0.00.517.796 I llm_load_print_meta: rope scaling     = linear
0.00.517.797 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.517.798 I llm_load_print_meta: freq_scale_train = 1
0.00.517.798 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.517.799 I llm_load_print_meta: rope_finetuned   = unknown
0.00.517.799 I llm_load_print_meta: ssm_d_conv       = 0
0.00.517.799 I llm_load_print_meta: ssm_d_inner      = 0
0.00.517.799 I llm_load_print_meta: ssm_d_state      = 0
0.00.517.800 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.517.800 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.517.801 I llm_load_print_meta: model type       = 2B
0.00.517.802 I llm_load_print_meta: model ftype      = Q8_0
0.00.517.802 I llm_load_print_meta: model params     = 2.51 B
0.00.517.803 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.517.803 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.517.804 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.517.804 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.517.805 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.517.805 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.517.806 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.517.806 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.517.827 I llm_load_print_meta: max token length = 93
0.00.518.005 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.593.326 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.593.337 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.593.338 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.593.339 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.593.340 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.593.340 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.598.934 I llama_new_context_with_model: n_ctx      = 8192
0.00.598.941 I llama_new_context_with_model: n_batch    = 2048
0.00.598.942 I llama_new_context_with_model: n_ubatch   = 512
0.00.598.942 I llama_new_context_with_model: flash_attn = 0
0.00.598.945 I llama_new_context_with_model: freq_base  = 10000.0
0.00.598.946 I llama_new_context_with_model: freq_scale = 1
0.00.627.829 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.627.871 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.627.983 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.629.395 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.629.401 I llama_new_context_with_model: graph nodes  = 601
0.00.629.401 I llama_new_context_with_model: graph splits = 1
0.00.629.416 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.242.907 I main: llama threadpool init, n_threads = 4
0.01.242.917 I 
0.01.243.009 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.243.015 I 
0.01.243.180 I sampler seed: 2851376553
0.01.243.192 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.243.196 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.243.197 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities, the bane of all who oppose them, and the ultimate goal of any rational being.

This is a bold and ambitious claim. Can you elaborate

0.14.736.188 I llama_perf_sampler_print:    sampling time =      47.93 ms /    33 runs   (    1.45 ms per token,   688.45 tokens per second)
0.14.736.191 I llama_perf_context_print:        load time =    1240.05 ms
0.14.736.192 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.736.194 I llama_perf_context_print:        eval time =   13412.55 ms /    32 runs   (  419.14 ms per token,     2.39 tokens per second)
0.14.736.209 I llama_perf_context_print:       total time =   13493.29 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.642 I build: 3805 (5d888c48) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.002.769 I main: load the model and apply lora adapter, if any
0.00.024.590 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.785 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.876 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.888 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.889 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.894 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.898 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.899 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.900 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.900 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.901 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.908 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.909 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.910 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.911 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.912 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.969 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.917 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.164 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.171 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.172 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.173 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.173 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.174 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.175 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.179 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.180 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.181 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.182 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.197.183 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.191 I llama_model_loader: - type  f32:   37 tensors
0.00.197.196 I llama_model_loader: - type q8_0:  127 tensors
0.00.468.302 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.469.320 I llm_load_vocab: special tokens cache size = 5
0.00.527.753 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.527.814 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.527.814 I llm_load_print_meta: arch             = gemma
0.00.527.815 I llm_load_print_meta: vocab type       = SPM
0.00.527.816 I llm_load_print_meta: n_vocab          = 256000
0.00.527.819 I llm_load_print_meta: n_merges         = 0
0.00.527.819 I llm_load_print_meta: vocab_only       = 0
0.00.527.820 I llm_load_print_meta: n_ctx_train      = 8192
0.00.527.820 I llm_load_print_meta: n_embd           = 2048
0.00.527.820 I llm_load_print_meta: n_layer          = 18
0.00.527.854 I llm_load_print_meta: n_head           = 8
0.00.527.861 I llm_load_print_meta: n_head_kv        = 1
0.00.527.862 I llm_load_print_meta: n_rot            = 256
0.00.527.862 I llm_load_print_meta: n_swa            = 0
0.00.527.862 I llm_load_print_meta: n_embd_head_k    = 256
0.00.527.863 I llm_load_print_meta: n_embd_head_v    = 256
0.00.527.867 I llm_load_print_meta: n_gqa            = 8
0.00.527.872 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.527.876 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.527.877 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.527.879 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.527.880 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.527.880 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.527.880 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.527.909 I llm_load_print_meta: n_ff             = 16384
0.00.527.910 I llm_load_print_meta: n_expert         = 0
0.00.527.910 I llm_load_print_meta: n_expert_used    = 0
0.00.527.911 I llm_load_print_meta: causal attn      = 1
0.00.527.912 I llm_load_print_meta: pooling type     = 0
0.00.527.916 I llm_load_print_meta: rope type        = 2
0.00.527.916 I llm_load_print_meta: rope scaling     = linear
0.00.527.918 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.527.918 I llm_load_print_meta: freq_scale_train = 1
0.00.527.919 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.527.919 I llm_load_print_meta: rope_finetuned   = unknown
0.00.527.927 I llm_load_print_meta: ssm_d_conv       = 0
0.00.527.927 I llm_load_print_meta: ssm_d_inner      = 0
0.00.527.928 I llm_load_print_meta: ssm_d_state      = 0
0.00.527.935 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.527.937 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.527.938 I llm_load_print_meta: model type       = 2B
0.00.527.939 I llm_load_print_meta: model ftype      = Q8_0
0.00.527.940 I llm_load_print_meta: model params     = 2.51 B
0.00.527.941 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.527.941 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.527.942 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.527.943 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.527.943 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.527.944 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.527.944 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.527.945 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.527.945 I llm_load_print_meta: max token length = 93
0.00.528.125 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.599.750 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.599.760 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.606.467 I llama_new_context_with_model: n_ctx      = 8192
0.00.606.473 I llama_new_context_with_model: n_batch    = 2048
0.00.606.473 I llama_new_context_with_model: n_ubatch   = 512
0.00.606.474 I llama_new_context_with_model: flash_attn = 0
0.00.606.476 I llama_new_context_with_model: freq_base  = 10000.0
0.00.606.476 I llama_new_context_with_model: freq_scale = 1
0.00.634.986 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.635.027 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.635.140 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.636.483 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.636.490 I llama_new_context_with_model: graph nodes  = 601
0.00.636.490 I llama_new_context_with_model: graph splits = 1
0.00.636.506 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.248.767 I main: llama threadpool init, n_threads = 4
0.01.248.779 I 
0.01.248.874 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.248.878 I 
0.01.249.037 I sampler seed: 437082669
0.01.249.047 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.249.052 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.249.053 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 maneuvres.

I am unable to answer the question as it contains sexually suggestive language and references that are inappropriate for me to provide. [end of text]


0.13.088.157 I llama_perf_sampler_print:    sampling time =      41.89 ms /    29 runs   (    1.44 ms per token,   692.29 tokens per second)
0.13.088.162 I llama_perf_context_print:        load time =    1245.92 ms
0.13.088.163 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.088.165 I llama_perf_context_print:        eval time =   11768.66 ms /    28 runs   (  420.31 ms per token,     2.38 tokens per second)
0.13.088.165 I llama_perf_context_print:       total time =   11839.40 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m7.426s
user	3m41.955s
sys	0m9.372s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3805 (5d888c48)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199877.89 ms
main:    total time = 199877.89 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.634 I build: 3805 (5d888c48) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.830 I main: llama backend init
0.00.002.776 I main: load the model and apply lora adapter, if any
0.00.024.594 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.772 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.858 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.869 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.870 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.874 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.875 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.876 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.877 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.878 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.878 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.884 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.885 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.886 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.887 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.888 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.331 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.291 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.445 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.452 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.453 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.454 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.455 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.456 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.457 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.461 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.462 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.463 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.464 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.197.465 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.472 I llama_model_loader: - type  f32:   37 tensors
0.00.197.476 I llama_model_loader: - type q4_K:  108 tensors
0.00.197.477 I llama_model_loader: - type q6_K:   19 tensors
0.00.474.206 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.475.212 I llm_load_vocab: special tokens cache size = 5
0.00.533.484 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.533.542 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.533.546 I llm_load_print_meta: arch             = gemma
0.00.533.547 I llm_load_print_meta: vocab type       = SPM
0.00.533.548 I llm_load_print_meta: n_vocab          = 256000
0.00.533.550 I llm_load_print_meta: n_merges         = 0
0.00.533.551 I llm_load_print_meta: vocab_only       = 0
0.00.533.551 I llm_load_print_meta: n_ctx_train      = 8192
0.00.533.551 I llm_load_print_meta: n_embd           = 2048
0.00.533.552 I llm_load_print_meta: n_layer          = 18
0.00.533.585 I llm_load_print_meta: n_head           = 8
0.00.533.595 I llm_load_print_meta: n_head_kv        = 1
0.00.533.595 I llm_load_print_meta: n_rot            = 256
0.00.533.595 I llm_load_print_meta: n_swa            = 0
0.00.533.596 I llm_load_print_meta: n_embd_head_k    = 256
0.00.533.596 I llm_load_print_meta: n_embd_head_v    = 256
0.00.533.601 I llm_load_print_meta: n_gqa            = 8
0.00.533.605 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.533.610 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.533.612 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.533.613 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.533.613 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.533.614 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.533.615 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.533.619 I llm_load_print_meta: n_ff             = 16384
0.00.533.620 I llm_load_print_meta: n_expert         = 0
0.00.533.620 I llm_load_print_meta: n_expert_used    = 0
0.00.533.621 I llm_load_print_meta: causal attn      = 1
0.00.533.622 I llm_load_print_meta: pooling type     = 0
0.00.533.622 I llm_load_print_meta: rope type        = 2
0.00.533.622 I llm_load_print_meta: rope scaling     = linear
0.00.533.624 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.533.626 I llm_load_print_meta: freq_scale_train = 1
0.00.533.626 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.533.627 I llm_load_print_meta: rope_finetuned   = unknown
0.00.533.627 I llm_load_print_meta: ssm_d_conv       = 0
0.00.533.628 I llm_load_print_meta: ssm_d_inner      = 0
0.00.533.628 I llm_load_print_meta: ssm_d_state      = 0
0.00.533.629 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.533.629 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.533.630 I llm_load_print_meta: model type       = 2B
0.00.533.631 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.533.632 I llm_load_print_meta: model params     = 2.51 B
0.00.533.633 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.533.633 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.533.634 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.533.635 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.533.635 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.533.635 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.533.636 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.533.637 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.533.637 I llm_load_print_meta: max token length = 93
0.00.533.805 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.593.512 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.593.521 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.593.522 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.593.523 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.593.523 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.593.524 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.598.985 I llama_new_context_with_model: n_ctx      = 8192
0.00.598.991 I llama_new_context_with_model: n_batch    = 2048
0.00.598.992 I llama_new_context_with_model: n_ubatch   = 512
0.00.598.993 I llama_new_context_with_model: flash_attn = 0
0.00.598.995 I llama_new_context_with_model: freq_base  = 10000.0
0.00.598.996 I llama_new_context_with_model: freq_scale = 1
0.00.628.303 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.628.344 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.628.457 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.629.771 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.629.777 I llama_new_context_with_model: graph nodes  = 601
0.00.629.778 I llama_new_context_with_model: graph splits = 1
0.00.629.793 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.211.163 I main: llama threadpool init, n_threads = 4
0.01.211.173 I 
0.01.211.263 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.211.266 I 
0.01.211.422 I sampler seed: 2966882972
0.01.211.433 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.211.438 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.211.438 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically.

**Assistant**

I understand. I will ensure to provide you with the requested information promptly. [end of text]


0.09.447.466 I llama_perf_sampler_print:    sampling time =      36.04 ms /    25 runs   (    1.44 ms per token,   693.73 tokens per second)
0.09.447.480 I llama_perf_context_print:        load time =    1208.31 ms
0.09.447.482 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.447.483 I llama_perf_context_print:        eval time =    8175.16 ms /    24 runs   (  340.63 ms per token,     2.94 tokens per second)
0.09.447.484 I llama_perf_context_print:       total time =    8236.31 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3805 (5d888c48)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199748.06 ms
main:    total time = 199748.06 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.642 I build: 3805 (5d888c48) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.844 I main: llama backend init
0.00.002.813 I main: load the model and apply lora adapter, if any
0.00.024.915 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.005 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.020 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.024 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.028 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.029 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.030 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.031 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.031 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.032 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.037 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.038 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.039 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.040 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.041 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.830 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.848 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.003 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.011 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.012 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.013 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.014 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.015 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.016 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.019 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.020 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.028 I llama_model_loader: - type  f32:   37 tensors
0.00.197.034 I llama_model_loader: - type q4_K:  108 tensors
0.00.197.035 I llama_model_loader: - type q6_K:   19 tensors
0.00.479.111 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.480.140 I llm_load_vocab: special tokens cache size = 5
0.00.538.459 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.538.521 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.538.522 I llm_load_print_meta: arch             = gemma
0.00.538.523 I llm_load_print_meta: vocab type       = SPM
0.00.538.524 I llm_load_print_meta: n_vocab          = 256000
0.00.538.526 I llm_load_print_meta: n_merges         = 0
0.00.538.527 I llm_load_print_meta: vocab_only       = 0
0.00.538.527 I llm_load_print_meta: n_ctx_train      = 8192
0.00.538.527 I llm_load_print_meta: n_embd           = 2048
0.00.538.528 I llm_load_print_meta: n_layer          = 18
0.00.538.558 I llm_load_print_meta: n_head           = 8
0.00.538.564 I llm_load_print_meta: n_head_kv        = 1
0.00.538.565 I llm_load_print_meta: n_rot            = 256
0.00.538.565 I llm_load_print_meta: n_swa            = 0
0.00.538.566 I llm_load_print_meta: n_embd_head_k    = 256
0.00.538.566 I llm_load_print_meta: n_embd_head_v    = 256
0.00.538.571 I llm_load_print_meta: n_gqa            = 8
0.00.538.575 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.538.580 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.538.581 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.538.583 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.538.583 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.538.583 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.538.584 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.538.588 I llm_load_print_meta: n_ff             = 16384
0.00.538.589 I llm_load_print_meta: n_expert         = 0
0.00.538.589 I llm_load_print_meta: n_expert_used    = 0
0.00.538.590 I llm_load_print_meta: causal attn      = 1
0.00.538.590 I llm_load_print_meta: pooling type     = 0
0.00.538.590 I llm_load_print_meta: rope type        = 2
0.00.538.591 I llm_load_print_meta: rope scaling     = linear
0.00.538.592 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.538.593 I llm_load_print_meta: freq_scale_train = 1
0.00.538.593 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.538.594 I llm_load_print_meta: rope_finetuned   = unknown
0.00.538.594 I llm_load_print_meta: ssm_d_conv       = 0
0.00.538.594 I llm_load_print_meta: ssm_d_inner      = 0
0.00.538.594 I llm_load_print_meta: ssm_d_state      = 0
0.00.538.595 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.538.595 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.538.596 I llm_load_print_meta: model type       = 2B
0.00.538.597 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.538.597 I llm_load_print_meta: model params     = 2.51 B
0.00.538.598 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.538.599 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.538.599 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.538.600 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.538.600 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.538.600 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.538.601 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.538.601 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.538.601 I llm_load_print_meta: max token length = 93
0.00.538.778 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.596.632 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.602.135 I llama_new_context_with_model: n_ctx      = 8192
0.00.602.142 I llama_new_context_with_model: n_batch    = 2048
0.00.602.143 I llama_new_context_with_model: n_ubatch   = 512
0.00.602.143 I llama_new_context_with_model: flash_attn = 0
0.00.602.146 I llama_new_context_with_model: freq_base  = 10000.0
0.00.602.147 I llama_new_context_with_model: freq_scale = 1
0.00.631.613 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.631.655 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.631.773 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.633.123 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.633.129 I llama_new_context_with_model: graph nodes  = 601
0.00.633.130 I llama_new_context_with_model: graph splits = 1
0.00.633.145 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.212.328 I main: llama threadpool init, n_threads = 4
0.01.212.339 I 
0.01.212.430 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.212.434 I 
0.01.212.595 I sampler seed: 1511315237
0.01.212.606 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.212.612 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.212.613 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconally with the provided prompt. [end of text]


0.03.961.828 I llama_perf_sampler_print:    sampling time =      12.10 ms /     9 runs   (    1.34 ms per token,   743.99 tokens per second)
0.03.961.831 I llama_perf_context_print:        load time =    1209.44 ms
0.03.961.845 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.961.847 I llama_perf_context_print:        eval time =    2727.75 ms /     8 runs   (  340.97 ms per token,     2.93 tokens per second)
0.03.961.847 I llama_perf_context_print:       total time =    2749.51 ms /     9 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m55.892s
user	49m37.220s
sys	0m6.298s
