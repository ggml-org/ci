+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.627 I build: 3776 (02266138) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.836 I main: llama backend init
0.00.002.773 I main: load the model and apply lora adapter, if any
0.00.024.575 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.756 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.838 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.848 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.850 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.854 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.856 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.857 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.858 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.859 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.860 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.866 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.867 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.868 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.868 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.869 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.093.950 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.181.758 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.193.671 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.193.678 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.193.679 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.193.680 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.193.681 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.193.682 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.193.683 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.193.687 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.193.688 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.193.689 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.193.690 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.193.691 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.193.699 I llama_model_loader: - type  f32:   37 tensors
0.00.193.704 I llama_model_loader: - type q8_0:  127 tensors
0.00.475.705 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.476.728 I llm_load_vocab: special tokens cache size = 5
0.00.534.816 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.534.875 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.534.876 I llm_load_print_meta: arch             = gemma
0.00.534.877 I llm_load_print_meta: vocab type       = SPM
0.00.534.878 I llm_load_print_meta: n_vocab          = 256000
0.00.534.880 I llm_load_print_meta: n_merges         = 0
0.00.534.881 I llm_load_print_meta: vocab_only       = 0
0.00.534.881 I llm_load_print_meta: n_ctx_train      = 8192
0.00.534.882 I llm_load_print_meta: n_embd           = 2048
0.00.534.882 I llm_load_print_meta: n_layer          = 18
0.00.534.917 I llm_load_print_meta: n_head           = 8
0.00.534.924 I llm_load_print_meta: n_head_kv        = 1
0.00.534.924 I llm_load_print_meta: n_rot            = 256
0.00.534.925 I llm_load_print_meta: n_swa            = 0
0.00.534.925 I llm_load_print_meta: n_embd_head_k    = 256
0.00.534.925 I llm_load_print_meta: n_embd_head_v    = 256
0.00.534.930 I llm_load_print_meta: n_gqa            = 8
0.00.534.934 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.534.939 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.534.940 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.534.941 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.534.942 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.534.942 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.534.943 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.534.948 I llm_load_print_meta: n_ff             = 16384
0.00.534.948 I llm_load_print_meta: n_expert         = 0
0.00.534.949 I llm_load_print_meta: n_expert_used    = 0
0.00.534.949 I llm_load_print_meta: causal attn      = 1
0.00.534.949 I llm_load_print_meta: pooling type     = 0
0.00.534.950 I llm_load_print_meta: rope type        = 2
0.00.534.950 I llm_load_print_meta: rope scaling     = linear
0.00.534.951 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.534.952 I llm_load_print_meta: freq_scale_train = 1
0.00.534.952 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.534.953 I llm_load_print_meta: rope_finetuned   = unknown
0.00.534.953 I llm_load_print_meta: ssm_d_conv       = 0
0.00.534.953 I llm_load_print_meta: ssm_d_inner      = 0
0.00.534.954 I llm_load_print_meta: ssm_d_state      = 0
0.00.534.954 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.534.954 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.534.955 I llm_load_print_meta: model type       = 2B
0.00.534.956 I llm_load_print_meta: model ftype      = Q8_0
0.00.534.957 I llm_load_print_meta: model params     = 2.51 B
0.00.534.958 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.534.958 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.534.959 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.534.959 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.534.960 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.534.960 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.534.960 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.534.961 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.534.961 I llm_load_print_meta: max token length = 93
0.00.535.135 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.636.130 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.636.141 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.636.142 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.636.143 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.636.143 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.636.144 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.641.780 I llama_new_context_with_model: n_ctx      = 8192
0.00.641.786 I llama_new_context_with_model: n_batch    = 2048
0.00.641.787 I llama_new_context_with_model: n_ubatch   = 512
0.00.641.788 I llama_new_context_with_model: flash_attn = 0
0.00.641.790 I llama_new_context_with_model: freq_base  = 10000.0
0.00.641.791 I llama_new_context_with_model: freq_scale = 1
0.00.671.136 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.671.176 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.671.292 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.672.696 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.672.701 I llama_new_context_with_model: graph nodes  = 601
0.00.672.702 I llama_new_context_with_model: graph splits = 1
0.00.672.718 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.288.223 I main: llama threadpool init, n_threads = 4
0.01.288.235 I 
0.01.288.327 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.288.331 I 
0.01.288.508 I sampler seed: 289442777
0.01.288.519 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.288.524 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.288.525 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities, and other sexually suggestive content in public spaces. [end of text]


0.06.792.035 I llama_perf_sampler_print:    sampling time =      20.13 ms /    14 runs   (    1.44 ms per token,   695.55 tokens per second)
0.06.792.038 I llama_perf_context_print:        load time =    1285.37 ms
0.06.792.040 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.792.042 I llama_perf_context_print:        eval time =    5469.64 ms /    13 runs   (  420.74 ms per token,     2.38 tokens per second)
0.06.792.043 I llama_perf_context_print:       total time =    5503.82 ms /    14 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.626 I build: 3776 (02266138) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.834 I main: llama backend init
0.00.002.763 I main: load the model and apply lora adapter, if any
0.00.027.934 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.028.048 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.028.063 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.028.067 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.028.071 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.028.072 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.028.074 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.028.076 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.028.077 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.028.090 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.028.097 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.028.101 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.028.102 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.028.103 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.028.104 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.098.089 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.832 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.825 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.831 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.832 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.833 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.834 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.835 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.836 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.839 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.840 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.841 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.842 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.197.843 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.850 I llama_model_loader: - type  f32:   37 tensors
0.00.197.853 I llama_model_loader: - type q8_0:  127 tensors
0.00.459.558 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.460.580 I llm_load_vocab: special tokens cache size = 5
0.00.518.364 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.518.423 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.518.424 I llm_load_print_meta: arch             = gemma
0.00.518.425 I llm_load_print_meta: vocab type       = SPM
0.00.518.426 I llm_load_print_meta: n_vocab          = 256000
0.00.518.428 I llm_load_print_meta: n_merges         = 0
0.00.518.429 I llm_load_print_meta: vocab_only       = 0
0.00.518.429 I llm_load_print_meta: n_ctx_train      = 8192
0.00.518.429 I llm_load_print_meta: n_embd           = 2048
0.00.518.430 I llm_load_print_meta: n_layer          = 18
0.00.518.463 I llm_load_print_meta: n_head           = 8
0.00.518.470 I llm_load_print_meta: n_head_kv        = 1
0.00.518.471 I llm_load_print_meta: n_rot            = 256
0.00.518.471 I llm_load_print_meta: n_swa            = 0
0.00.518.471 I llm_load_print_meta: n_embd_head_k    = 256
0.00.518.472 I llm_load_print_meta: n_embd_head_v    = 256
0.00.518.477 I llm_load_print_meta: n_gqa            = 8
0.00.518.481 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.518.485 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.518.486 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.518.488 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.518.488 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.518.488 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.518.489 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.518.495 I llm_load_print_meta: n_ff             = 16384
0.00.518.496 I llm_load_print_meta: n_expert         = 0
0.00.518.496 I llm_load_print_meta: n_expert_used    = 0
0.00.518.496 I llm_load_print_meta: causal attn      = 1
0.00.518.497 I llm_load_print_meta: pooling type     = 0
0.00.518.497 I llm_load_print_meta: rope type        = 2
0.00.518.497 I llm_load_print_meta: rope scaling     = linear
0.00.518.499 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.518.499 I llm_load_print_meta: freq_scale_train = 1
0.00.518.500 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.518.500 I llm_load_print_meta: rope_finetuned   = unknown
0.00.518.500 I llm_load_print_meta: ssm_d_conv       = 0
0.00.518.500 I llm_load_print_meta: ssm_d_inner      = 0
0.00.518.501 I llm_load_print_meta: ssm_d_state      = 0
0.00.518.501 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.518.501 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.518.502 I llm_load_print_meta: model type       = 2B
0.00.518.503 I llm_load_print_meta: model ftype      = Q8_0
0.00.518.503 I llm_load_print_meta: model params     = 2.51 B
0.00.518.504 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.518.505 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.518.505 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.518.506 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.518.506 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.518.506 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.518.507 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.518.507 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.518.508 I llm_load_print_meta: max token length = 93
0.00.518.687 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.615.814 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.621.349 I llama_new_context_with_model: n_ctx      = 8192
0.00.621.356 I llama_new_context_with_model: n_batch    = 2048
0.00.621.356 I llama_new_context_with_model: n_ubatch   = 512
0.00.621.357 I llama_new_context_with_model: flash_attn = 0
0.00.621.359 I llama_new_context_with_model: freq_base  = 10000.0
0.00.621.360 I llama_new_context_with_model: freq_scale = 1
0.00.650.171 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.650.217 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.650.327 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.651.693 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.651.699 I llama_new_context_with_model: graph nodes  = 601
0.00.651.699 I llama_new_context_with_model: graph splits = 1
0.00.651.714 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.262.055 I main: llama threadpool init, n_threads = 4
0.01.262.067 I 
0.01.262.160 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.262.164 I 
0.01.262.326 I sampler seed: 6952398
0.01.262.337 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.262.342 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.262.343 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 maneuvously.

I am unable to generate the requested response due to limitations in my programming capabilities. [end of text]


0.10.586.039 I llama_perf_sampler_print:    sampling time =      33.99 ms /    23 runs   (    1.48 ms per token,   676.67 tokens per second)
0.10.586.041 I llama_perf_context_print:        load time =    1259.21 ms
0.10.586.043 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.586.044 I llama_perf_context_print:        eval time =    9266.76 ms /    22 runs   (  421.22 ms per token,     2.37 tokens per second)
0.10.586.045 I llama_perf_context_print:       total time =    9323.99 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.625 I build: 3776 (02266138) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.834 I main: llama backend init
0.00.002.822 I main: load the model and apply lora adapter, if any
0.00.024.691 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.889 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.978 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.989 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.990 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.994 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.996 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.997 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.998 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.999 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.000 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.008 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.015 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.020 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.021 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.022 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.631 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.106 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.311 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.320 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.321 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.322 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.323 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.324 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.325 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.328 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.329 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.330 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.330 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.195.331 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.340 I llama_model_loader: - type  f32:   37 tensors
0.00.195.344 I llama_model_loader: - type q8_0:  127 tensors
0.00.467.483 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.468.484 I llm_load_vocab: special tokens cache size = 5
0.00.526.622 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.526.683 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.526.684 I llm_load_print_meta: arch             = gemma
0.00.526.685 I llm_load_print_meta: vocab type       = SPM
0.00.526.686 I llm_load_print_meta: n_vocab          = 256000
0.00.526.688 I llm_load_print_meta: n_merges         = 0
0.00.526.689 I llm_load_print_meta: vocab_only       = 0
0.00.526.689 I llm_load_print_meta: n_ctx_train      = 8192
0.00.526.689 I llm_load_print_meta: n_embd           = 2048
0.00.526.690 I llm_load_print_meta: n_layer          = 18
0.00.526.724 I llm_load_print_meta: n_head           = 8
0.00.526.731 I llm_load_print_meta: n_head_kv        = 1
0.00.526.731 I llm_load_print_meta: n_rot            = 256
0.00.526.733 I llm_load_print_meta: n_swa            = 0
0.00.526.734 I llm_load_print_meta: n_embd_head_k    = 256
0.00.526.737 I llm_load_print_meta: n_embd_head_v    = 256
0.00.526.743 I llm_load_print_meta: n_gqa            = 8
0.00.526.747 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.526.752 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.526.753 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.526.754 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.526.755 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.526.755 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.526.756 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.526.760 I llm_load_print_meta: n_ff             = 16384
0.00.526.764 I llm_load_print_meta: n_expert         = 0
0.00.526.764 I llm_load_print_meta: n_expert_used    = 0
0.00.526.764 I llm_load_print_meta: causal attn      = 1
0.00.526.765 I llm_load_print_meta: pooling type     = 0
0.00.526.765 I llm_load_print_meta: rope type        = 2
0.00.526.765 I llm_load_print_meta: rope scaling     = linear
0.00.526.767 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.526.767 I llm_load_print_meta: freq_scale_train = 1
0.00.526.767 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.526.768 I llm_load_print_meta: rope_finetuned   = unknown
0.00.526.768 I llm_load_print_meta: ssm_d_conv       = 0
0.00.526.768 I llm_load_print_meta: ssm_d_inner      = 0
0.00.526.769 I llm_load_print_meta: ssm_d_state      = 0
0.00.526.769 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.526.769 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.526.770 I llm_load_print_meta: model type       = 2B
0.00.526.771 I llm_load_print_meta: model ftype      = Q8_0
0.00.526.779 I llm_load_print_meta: model params     = 2.51 B
0.00.526.781 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.526.781 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.526.782 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.526.794 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.526.795 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.526.795 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.526.796 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.526.796 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.526.797 I llm_load_print_meta: max token length = 93
0.00.526.966 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.602.478 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.602.487 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.602.488 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.602.489 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.602.489 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.602.490 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.608.167 I llama_new_context_with_model: n_ctx      = 8192
0.00.608.173 I llama_new_context_with_model: n_batch    = 2048
0.00.608.174 I llama_new_context_with_model: n_ubatch   = 512
0.00.608.175 I llama_new_context_with_model: flash_attn = 0
0.00.608.177 I llama_new_context_with_model: freq_base  = 10000.0
0.00.608.178 I llama_new_context_with_model: freq_scale = 1
0.00.638.197 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.638.244 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.638.360 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.639.789 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.639.797 I llama_new_context_with_model: graph nodes  = 601
0.00.639.798 I llama_new_context_with_model: graph splits = 1
0.00.639.817 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.284.741 I main: llama threadpool init, n_threads = 4
0.01.284.753 I 
0.01.284.857 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.284.862 I 
0.01.285.037 I sampler seed: 3391479979
0.01.285.048 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.285.053 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.285.054 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities:

**a) Explain the main idea of the statement.**

b) Identify the key point of contention.

c) Analyze the supporting arguments

0.15.022.790 I llama_perf_sampler_print:    sampling time =      49.27 ms /    33 runs   (    1.49 ms per token,   669.83 tokens per second)
0.15.022.793 I llama_perf_context_print:        load time =    1281.84 ms
0.15.022.794 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.022.809 I llama_perf_context_print:        eval time =   13656.82 ms /    32 runs   (  426.78 ms per token,     2.34 tokens per second)
0.15.022.810 I llama_perf_context_print:       total time =   13738.06 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.638 I build: 3776 (02266138) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.002.762 I main: load the model and apply lora adapter, if any
0.00.024.667 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.854 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.937 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.948 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.949 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.952 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.953 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.954 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.955 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.956 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.956 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.963 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.963 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.964 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.965 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.966 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.662 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.974 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.938 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.945 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.946 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.947 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.947 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.948 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.949 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.952 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.953 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.954 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.955 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.196.956 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.963 I llama_model_loader: - type  f32:   37 tensors
0.00.196.967 I llama_model_loader: - type q8_0:  127 tensors
0.00.467.800 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.468.811 I llm_load_vocab: special tokens cache size = 5
0.00.526.619 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.526.680 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.526.681 I llm_load_print_meta: arch             = gemma
0.00.526.682 I llm_load_print_meta: vocab type       = SPM
0.00.526.682 I llm_load_print_meta: n_vocab          = 256000
0.00.526.685 I llm_load_print_meta: n_merges         = 0
0.00.526.685 I llm_load_print_meta: vocab_only       = 0
0.00.526.686 I llm_load_print_meta: n_ctx_train      = 8192
0.00.526.686 I llm_load_print_meta: n_embd           = 2048
0.00.526.687 I llm_load_print_meta: n_layer          = 18
0.00.526.720 I llm_load_print_meta: n_head           = 8
0.00.526.726 I llm_load_print_meta: n_head_kv        = 1
0.00.526.727 I llm_load_print_meta: n_rot            = 256
0.00.526.727 I llm_load_print_meta: n_swa            = 0
0.00.526.728 I llm_load_print_meta: n_embd_head_k    = 256
0.00.526.728 I llm_load_print_meta: n_embd_head_v    = 256
0.00.526.733 I llm_load_print_meta: n_gqa            = 8
0.00.526.737 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.526.742 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.526.743 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.526.745 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.526.745 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.526.746 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.526.746 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.526.750 I llm_load_print_meta: n_ff             = 16384
0.00.526.751 I llm_load_print_meta: n_expert         = 0
0.00.526.751 I llm_load_print_meta: n_expert_used    = 0
0.00.526.752 I llm_load_print_meta: causal attn      = 1
0.00.526.752 I llm_load_print_meta: pooling type     = 0
0.00.526.752 I llm_load_print_meta: rope type        = 2
0.00.526.753 I llm_load_print_meta: rope scaling     = linear
0.00.526.754 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.526.755 I llm_load_print_meta: freq_scale_train = 1
0.00.526.755 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.526.755 I llm_load_print_meta: rope_finetuned   = unknown
0.00.526.756 I llm_load_print_meta: ssm_d_conv       = 0
0.00.526.756 I llm_load_print_meta: ssm_d_inner      = 0
0.00.526.756 I llm_load_print_meta: ssm_d_state      = 0
0.00.526.757 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.526.757 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.526.758 I llm_load_print_meta: model type       = 2B
0.00.526.759 I llm_load_print_meta: model ftype      = Q8_0
0.00.526.786 I llm_load_print_meta: model params     = 2.51 B
0.00.526.788 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.526.789 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.526.790 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.526.791 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.526.800 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.526.804 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.526.805 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.526.805 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.526.806 I llm_load_print_meta: max token length = 93
0.00.526.988 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.598.239 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.598.250 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.603.814 I llama_new_context_with_model: n_ctx      = 8192
0.00.603.820 I llama_new_context_with_model: n_batch    = 2048
0.00.603.821 I llama_new_context_with_model: n_ubatch   = 512
0.00.603.821 I llama_new_context_with_model: flash_attn = 0
0.00.603.823 I llama_new_context_with_model: freq_base  = 10000.0
0.00.603.824 I llama_new_context_with_model: freq_scale = 1
0.00.632.709 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.632.750 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.632.865 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.634.224 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.634.230 I llama_new_context_with_model: graph nodes  = 601
0.00.634.230 I llama_new_context_with_model: graph splits = 1
0.00.634.246 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.247.376 I main: llama threadpool init, n_threads = 4
0.01.247.388 I 
0.01.247.477 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.247.480 I 
0.01.247.657 I sampler seed: 1091615709
0.01.247.667 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.247.671 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.247.672 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities and the like.

I am unable to provide information that could potentially facilitate harmful activities, including those related to sexual exploitation or sexual violence. [end of text]


0.14.487.330 I llama_perf_sampler_print:    sampling time =      47.73 ms /    32 runs   (    1.49 ms per token,   670.38 tokens per second)
0.14.487.333 I llama_perf_context_print:        load time =    1244.54 ms
0.14.487.334 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.487.336 I llama_perf_context_print:        eval time =   13160.19 ms /    31 runs   (  424.52 ms per token,     2.36 tokens per second)
0.14.487.337 I llama_perf_context_print:       total time =   13239.96 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m56.375s
user	2m59.664s
sys	0m9.284s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3776 (02266138)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198824.83 ms
main:    total time = 198824.83 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.629 I build: 3776 (02266138) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.846 I main: llama backend init
0.00.002.779 I main: load the model and apply lora adapter, if any
0.00.024.773 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.965 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.056 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.068 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.070 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.074 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.076 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.077 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.078 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.079 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.081 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.090 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.095 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.097 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.098 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.100 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.662 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.182.679 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.194.690 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.194.697 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.194.698 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.194.698 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.194.699 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.194.700 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.194.701 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.194.704 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.194.705 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.194.706 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.194.707 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.194.708 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.194.715 I llama_model_loader: - type  f32:   37 tensors
0.00.194.719 I llama_model_loader: - type q4_K:  108 tensors
0.00.194.720 I llama_model_loader: - type q6_K:   19 tensors
0.00.462.807 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.463.833 I llm_load_vocab: special tokens cache size = 5
0.00.521.518 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.521.577 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.521.579 I llm_load_print_meta: arch             = gemma
0.00.521.579 I llm_load_print_meta: vocab type       = SPM
0.00.521.580 I llm_load_print_meta: n_vocab          = 256000
0.00.521.582 I llm_load_print_meta: n_merges         = 0
0.00.521.583 I llm_load_print_meta: vocab_only       = 0
0.00.521.583 I llm_load_print_meta: n_ctx_train      = 8192
0.00.521.583 I llm_load_print_meta: n_embd           = 2048
0.00.521.584 I llm_load_print_meta: n_layer          = 18
0.00.521.617 I llm_load_print_meta: n_head           = 8
0.00.521.624 I llm_load_print_meta: n_head_kv        = 1
0.00.521.625 I llm_load_print_meta: n_rot            = 256
0.00.521.625 I llm_load_print_meta: n_swa            = 0
0.00.521.625 I llm_load_print_meta: n_embd_head_k    = 256
0.00.521.626 I llm_load_print_meta: n_embd_head_v    = 256
0.00.521.630 I llm_load_print_meta: n_gqa            = 8
0.00.521.635 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.521.639 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.521.640 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.521.642 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.521.642 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.521.642 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.521.643 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.521.648 I llm_load_print_meta: n_ff             = 16384
0.00.521.648 I llm_load_print_meta: n_expert         = 0
0.00.521.648 I llm_load_print_meta: n_expert_used    = 0
0.00.521.649 I llm_load_print_meta: causal attn      = 1
0.00.521.649 I llm_load_print_meta: pooling type     = 0
0.00.521.650 I llm_load_print_meta: rope type        = 2
0.00.521.650 I llm_load_print_meta: rope scaling     = linear
0.00.521.652 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.521.653 I llm_load_print_meta: freq_scale_train = 1
0.00.521.654 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.521.654 I llm_load_print_meta: rope_finetuned   = unknown
0.00.521.655 I llm_load_print_meta: ssm_d_conv       = 0
0.00.521.655 I llm_load_print_meta: ssm_d_inner      = 0
0.00.521.655 I llm_load_print_meta: ssm_d_state      = 0
0.00.521.656 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.521.657 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.521.657 I llm_load_print_meta: model type       = 2B
0.00.521.658 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.521.659 I llm_load_print_meta: model params     = 2.51 B
0.00.521.660 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.521.661 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.521.661 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.521.662 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.521.662 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.521.663 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.521.663 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.521.664 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.521.664 I llm_load_print_meta: max token length = 93
0.00.521.845 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.581.694 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.581.705 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.581.706 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.581.706 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.581.707 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.581.708 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.587.472 I llama_new_context_with_model: n_ctx      = 8192
0.00.587.478 I llama_new_context_with_model: n_batch    = 2048
0.00.587.478 I llama_new_context_with_model: n_ubatch   = 512
0.00.587.479 I llama_new_context_with_model: flash_attn = 0
0.00.587.482 I llama_new_context_with_model: freq_base  = 10000.0
0.00.587.483 I llama_new_context_with_model: freq_scale = 1
0.00.616.891 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.616.933 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.617.045 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.618.457 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.618.463 I llama_new_context_with_model: graph nodes  = 601
0.00.618.464 I llama_new_context_with_model: graph splits = 1
0.00.618.479 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.196.959 I main: llama threadpool init, n_threads = 4
0.01.196.969 I 
0.01.197.060 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.197.063 I 
0.01.197.237 I sampler seed: 1019354700
0.01.197.248 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.197.253 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.197.254 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 squaRED, a platform that provides personalized financial guidance and investment solutions, has partnered with the American Bankers Association (ABA) to offer its services to ABA members.

0.12.130.350 I llama_perf_sampler_print:    sampling time =      49.17 ms /    33 runs   (    1.49 ms per token,   671.14 tokens per second)
0.12.130.353 I llama_perf_context_print:        load time =    1194.10 ms
0.12.130.354 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.130.355 I llama_perf_context_print:        eval time =   10852.44 ms /    32 runs   (  339.14 ms per token,     2.95 tokens per second)
0.12.130.356 I llama_perf_context_print:       total time =   10933.40 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3776 (02266138)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198671.99 ms
main:    total time = 198671.99 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.636 I build: 3776 (02266138) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.832 I main: llama backend init
0.00.002.780 I main: load the model and apply lora adapter, if any
0.00.024.545 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.634 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.648 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.650 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.654 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.657 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.658 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.659 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.660 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.660 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.666 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.667 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.668 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.669 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.678 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.093.835 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.181.431 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.193.487 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.193.494 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.193.495 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.193.496 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.193.497 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.193.498 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.193.499 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.193.502 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.193.503 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.193.510 I llama_model_loader: - type  f32:   37 tensors
0.00.193.514 I llama_model_loader: - type q4_K:  108 tensors
0.00.193.515 I llama_model_loader: - type q6_K:   19 tensors
0.00.462.253 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.463.238 I llm_load_vocab: special tokens cache size = 5
0.00.520.973 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.521.029 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.521.030 I llm_load_print_meta: arch             = gemma
0.00.521.031 I llm_load_print_meta: vocab type       = SPM
0.00.521.032 I llm_load_print_meta: n_vocab          = 256000
0.00.521.034 I llm_load_print_meta: n_merges         = 0
0.00.521.034 I llm_load_print_meta: vocab_only       = 0
0.00.521.035 I llm_load_print_meta: n_ctx_train      = 8192
0.00.521.035 I llm_load_print_meta: n_embd           = 2048
0.00.521.035 I llm_load_print_meta: n_layer          = 18
0.00.521.067 I llm_load_print_meta: n_head           = 8
0.00.521.074 I llm_load_print_meta: n_head_kv        = 1
0.00.521.075 I llm_load_print_meta: n_rot            = 256
0.00.521.075 I llm_load_print_meta: n_swa            = 0
0.00.521.075 I llm_load_print_meta: n_embd_head_k    = 256
0.00.521.076 I llm_load_print_meta: n_embd_head_v    = 256
0.00.521.080 I llm_load_print_meta: n_gqa            = 8
0.00.521.106 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.521.113 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.521.121 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.521.123 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.521.131 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.521.132 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.521.133 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.521.138 I llm_load_print_meta: n_ff             = 16384
0.00.521.138 I llm_load_print_meta: n_expert         = 0
0.00.521.139 I llm_load_print_meta: n_expert_used    = 0
0.00.521.139 I llm_load_print_meta: causal attn      = 1
0.00.521.147 I llm_load_print_meta: pooling type     = 0
0.00.521.151 I llm_load_print_meta: rope type        = 2
0.00.521.151 I llm_load_print_meta: rope scaling     = linear
0.00.521.153 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.521.154 I llm_load_print_meta: freq_scale_train = 1
0.00.521.154 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.521.155 I llm_load_print_meta: rope_finetuned   = unknown
0.00.521.155 I llm_load_print_meta: ssm_d_conv       = 0
0.00.521.156 I llm_load_print_meta: ssm_d_inner      = 0
0.00.521.156 I llm_load_print_meta: ssm_d_state      = 0
0.00.521.156 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.521.157 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.521.157 I llm_load_print_meta: model type       = 2B
0.00.521.161 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.521.162 I llm_load_print_meta: model params     = 2.51 B
0.00.521.163 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.521.163 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.521.164 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.521.164 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.521.165 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.521.165 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.521.166 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.521.166 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.521.166 I llm_load_print_meta: max token length = 93
0.00.521.354 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.577.864 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.583.386 I llama_new_context_with_model: n_ctx      = 8192
0.00.583.393 I llama_new_context_with_model: n_batch    = 2048
0.00.583.394 I llama_new_context_with_model: n_ubatch   = 512
0.00.583.394 I llama_new_context_with_model: flash_attn = 0
0.00.583.397 I llama_new_context_with_model: freq_base  = 10000.0
0.00.583.398 I llama_new_context_with_model: freq_scale = 1
0.00.612.231 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.612.276 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.612.384 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.613.737 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.613.744 I llama_new_context_with_model: graph nodes  = 601
0.00.613.744 I llama_new_context_with_model: graph splits = 1
0.00.613.759 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.191.510 I main: llama threadpool init, n_threads = 4
0.01.191.521 I 
0.01.191.609 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.191.612 I 
0.01.191.775 I sampler seed: 2308563836
0.01.191.786 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.191.792 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.191.792 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 encompases?

The provided context does not contain any information regarding encompases, so I am unable to answer this question from the provided context. [end of text]


0.11.465.774 I llama_perf_sampler_print:    sampling time =      45.96 ms /    31 runs   (    1.48 ms per token,   674.51 tokens per second)
0.11.465.778 I llama_perf_context_print:        load time =    1188.65 ms
0.11.465.779 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.465.781 I llama_perf_context_print:        eval time =   10198.36 ms /    30 runs   (  339.95 ms per token,     2.94 tokens per second)
0.11.465.793 I llama_perf_context_print:       total time =   10274.27 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m3.901s
user	50m9.724s
sys	0m6.303s
