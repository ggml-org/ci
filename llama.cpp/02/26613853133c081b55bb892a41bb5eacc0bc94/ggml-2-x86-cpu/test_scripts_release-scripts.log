+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.578 I build: 3776 (02266138) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.773 I main: llama backend init
0.00.001.853 I main: load the model and apply lora adapter, if any
0.00.021.906 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.954 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.964 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.969 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.970 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.974 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.975 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.975 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.976 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.976 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.977 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.981 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.981 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.982 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.983 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.983 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.169 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.468 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.365 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.371 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.372 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.373 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.373 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.374 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.375 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.378 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.379 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.380 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.381 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.382 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.386 I llama_model_loader: - type  f32:   37 tensors
0.00.132.389 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.561 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.204.333 I llm_load_vocab: special tokens cache size = 5
0.00.222.626 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.222.641 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.222.641 I llm_load_print_meta: arch             = gemma
0.00.222.642 I llm_load_print_meta: vocab type       = SPM
0.00.222.643 I llm_load_print_meta: n_vocab          = 256000
0.00.222.643 I llm_load_print_meta: n_merges         = 0
0.00.222.643 I llm_load_print_meta: vocab_only       = 0
0.00.222.644 I llm_load_print_meta: n_ctx_train      = 8192
0.00.222.644 I llm_load_print_meta: n_embd           = 2048
0.00.222.644 I llm_load_print_meta: n_layer          = 18
0.00.222.656 I llm_load_print_meta: n_head           = 8
0.00.222.657 I llm_load_print_meta: n_head_kv        = 1
0.00.222.658 I llm_load_print_meta: n_rot            = 256
0.00.222.658 I llm_load_print_meta: n_swa            = 0
0.00.222.658 I llm_load_print_meta: n_embd_head_k    = 256
0.00.222.659 I llm_load_print_meta: n_embd_head_v    = 256
0.00.222.659 I llm_load_print_meta: n_gqa            = 8
0.00.222.660 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.222.661 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.222.662 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.222.663 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.222.664 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.222.664 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.222.664 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.222.665 I llm_load_print_meta: n_ff             = 16384
0.00.222.666 I llm_load_print_meta: n_expert         = 0
0.00.222.666 I llm_load_print_meta: n_expert_used    = 0
0.00.222.666 I llm_load_print_meta: causal attn      = 1
0.00.222.667 I llm_load_print_meta: pooling type     = 0
0.00.222.667 I llm_load_print_meta: rope type        = 2
0.00.222.667 I llm_load_print_meta: rope scaling     = linear
0.00.222.668 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.222.669 I llm_load_print_meta: freq_scale_train = 1
0.00.222.669 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.222.670 I llm_load_print_meta: rope_finetuned   = unknown
0.00.222.670 I llm_load_print_meta: ssm_d_conv       = 0
0.00.222.670 I llm_load_print_meta: ssm_d_inner      = 0
0.00.222.670 I llm_load_print_meta: ssm_d_state      = 0
0.00.222.671 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.222.671 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.222.672 I llm_load_print_meta: model type       = 2B
0.00.222.673 I llm_load_print_meta: model ftype      = Q8_0
0.00.222.674 I llm_load_print_meta: model params     = 2.51 B
0.00.222.674 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.222.675 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.222.675 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.222.676 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.222.676 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.222.676 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.222.676 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.222.677 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.222.677 I llm_load_print_meta: max token length = 93
0.00.222.695 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.321.581 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.321.589 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.321.590 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.321.591 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.321.591 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.321.592 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.326.772 I llama_new_context_with_model: n_ctx      = 8192
0.00.326.779 I llama_new_context_with_model: n_batch    = 2048
0.00.326.780 I llama_new_context_with_model: n_ubatch   = 512
0.00.326.780 I llama_new_context_with_model: flash_attn = 0
0.00.326.783 I llama_new_context_with_model: freq_base  = 10000.0
0.00.326.784 I llama_new_context_with_model: freq_scale = 1
0.00.356.710 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.356.725 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.356.824 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.357.723 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.357.731 I llama_new_context_with_model: graph nodes  = 601
0.00.357.731 I llama_new_context_with_model: graph splits = 1
0.00.357.733 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.448.467 I main: llama threadpool init, n_threads = 4
0.00.448.480 I 
0.00.448.553 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.448.556 I 
0.00.448.592 I sampler seed: 1861746554
0.00.448.602 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.448.605 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.448.605 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconary.

**Assistant**

I am unable to provide information or answer questions related to medical or health-related matters. Please consult a qualified healthcare professional

0.02.662.610 I llama_perf_sampler_print:    sampling time =       4.80 ms /    33 runs   (    0.15 ms per token,  6875.00 tokens per second)
0.02.662.612 I llama_perf_context_print:        load time =     446.60 ms
0.02.662.613 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.662.615 I llama_perf_context_print:        eval time =    2196.33 ms /    32 runs   (   68.64 ms per token,    14.57 tokens per second)
0.02.662.615 I llama_perf_context_print:       total time =    2214.15 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.546 I build: 3776 (02266138) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.732 I main: llama backend init
0.00.001.819 I main: load the model and apply lora adapter, if any
0.00.021.874 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.888 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.895 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.896 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.900 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.901 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.901 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.902 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.903 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.903 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.907 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.908 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.911 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.912 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.912 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.301 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.576 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.427 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.433 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.434 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.434 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.435 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.436 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.436 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.438 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.439 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.439 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.440 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.442 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.445 I llama_model_loader: - type  f32:   37 tensors
0.00.131.447 I llama_model_loader: - type q8_0:  127 tensors
0.00.193.901 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.194.540 I llm_load_vocab: special tokens cache size = 5
0.00.212.774 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.212.787 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.212.787 I llm_load_print_meta: arch             = gemma
0.00.212.788 I llm_load_print_meta: vocab type       = SPM
0.00.212.789 I llm_load_print_meta: n_vocab          = 256000
0.00.212.789 I llm_load_print_meta: n_merges         = 0
0.00.212.789 I llm_load_print_meta: vocab_only       = 0
0.00.212.790 I llm_load_print_meta: n_ctx_train      = 8192
0.00.212.790 I llm_load_print_meta: n_embd           = 2048
0.00.212.790 I llm_load_print_meta: n_layer          = 18
0.00.212.802 I llm_load_print_meta: n_head           = 8
0.00.212.803 I llm_load_print_meta: n_head_kv        = 1
0.00.212.803 I llm_load_print_meta: n_rot            = 256
0.00.212.803 I llm_load_print_meta: n_swa            = 0
0.00.212.804 I llm_load_print_meta: n_embd_head_k    = 256
0.00.212.804 I llm_load_print_meta: n_embd_head_v    = 256
0.00.212.805 I llm_load_print_meta: n_gqa            = 8
0.00.212.806 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.212.807 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.212.807 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.212.808 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.212.809 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.212.809 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.212.809 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.212.810 I llm_load_print_meta: n_ff             = 16384
0.00.212.811 I llm_load_print_meta: n_expert         = 0
0.00.212.811 I llm_load_print_meta: n_expert_used    = 0
0.00.212.811 I llm_load_print_meta: causal attn      = 1
0.00.212.812 I llm_load_print_meta: pooling type     = 0
0.00.212.812 I llm_load_print_meta: rope type        = 2
0.00.212.812 I llm_load_print_meta: rope scaling     = linear
0.00.212.814 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.212.814 I llm_load_print_meta: freq_scale_train = 1
0.00.212.815 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.212.815 I llm_load_print_meta: rope_finetuned   = unknown
0.00.212.815 I llm_load_print_meta: ssm_d_conv       = 0
0.00.212.815 I llm_load_print_meta: ssm_d_inner      = 0
0.00.212.816 I llm_load_print_meta: ssm_d_state      = 0
0.00.212.816 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.212.816 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.212.817 I llm_load_print_meta: model type       = 2B
0.00.212.817 I llm_load_print_meta: model ftype      = Q8_0
0.00.212.818 I llm_load_print_meta: model params     = 2.51 B
0.00.212.819 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.212.819 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.212.819 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.212.820 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.212.820 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.212.820 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.212.821 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.212.821 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.212.821 I llm_load_print_meta: max token length = 93
0.00.212.837 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.306.938 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.311.923 I llama_new_context_with_model: n_ctx      = 8192
0.00.311.930 I llama_new_context_with_model: n_batch    = 2048
0.00.311.930 I llama_new_context_with_model: n_ubatch   = 512
0.00.311.930 I llama_new_context_with_model: flash_attn = 0
0.00.311.932 I llama_new_context_with_model: freq_base  = 10000.0
0.00.311.933 I llama_new_context_with_model: freq_scale = 1
0.00.340.793 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.340.809 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.340.901 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.341.735 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.341.743 I llama_new_context_with_model: graph nodes  = 601
0.00.341.743 I llama_new_context_with_model: graph splits = 1
0.00.341.745 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.429.632 I main: llama threadpool init, n_threads = 4
0.00.429.644 I 
0.00.429.721 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.429.724 I 
0.00.429.762 I sampler seed: 1024949889
0.00.429.772 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.429.775 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.429.776 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities and anxieties, and the existential angst of a species grappling with its own mortality.

These are just a few threads that weave the tapestry of "The

0.02.600.289 I llama_perf_sampler_print:    sampling time =       5.02 ms /    33 runs   (    0.15 ms per token,  6572.40 tokens per second)
0.02.600.293 I llama_perf_context_print:        load time =     427.80 ms
0.02.600.294 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.600.296 I llama_perf_context_print:        eval time =    2151.81 ms /    32 runs   (   67.24 ms per token,    14.87 tokens per second)
0.02.600.297 I llama_perf_context_print:       total time =    2170.67 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.560 I build: 3776 (02266138) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.769 I main: llama backend init
0.00.001.905 I main: load the model and apply lora adapter, if any
0.00.022.270 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.321 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.327 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.333 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.335 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.338 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.339 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.342 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.343 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.343 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.344 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.348 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.349 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.350 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.350 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.351 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.125 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.714 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.700 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.706 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.707 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.708 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.708 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.709 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.710 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.712 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.713 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.714 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.714 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.716 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.719 I llama_model_loader: - type  f32:   37 tensors
0.00.132.722 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.312 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.201.011 I llm_load_vocab: special tokens cache size = 5
0.00.219.302 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.219.316 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.219.317 I llm_load_print_meta: arch             = gemma
0.00.219.317 I llm_load_print_meta: vocab type       = SPM
0.00.219.318 I llm_load_print_meta: n_vocab          = 256000
0.00.219.318 I llm_load_print_meta: n_merges         = 0
0.00.219.318 I llm_load_print_meta: vocab_only       = 0
0.00.219.319 I llm_load_print_meta: n_ctx_train      = 8192
0.00.219.319 I llm_load_print_meta: n_embd           = 2048
0.00.219.319 I llm_load_print_meta: n_layer          = 18
0.00.219.332 I llm_load_print_meta: n_head           = 8
0.00.219.343 I llm_load_print_meta: n_head_kv        = 1
0.00.219.344 I llm_load_print_meta: n_rot            = 256
0.00.219.344 I llm_load_print_meta: n_swa            = 0
0.00.219.345 I llm_load_print_meta: n_embd_head_k    = 256
0.00.219.345 I llm_load_print_meta: n_embd_head_v    = 256
0.00.219.346 I llm_load_print_meta: n_gqa            = 8
0.00.219.347 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.219.348 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.219.349 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.219.350 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.219.350 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.219.351 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.219.351 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.219.352 I llm_load_print_meta: n_ff             = 16384
0.00.219.353 I llm_load_print_meta: n_expert         = 0
0.00.219.354 I llm_load_print_meta: n_expert_used    = 0
0.00.219.354 I llm_load_print_meta: causal attn      = 1
0.00.219.355 I llm_load_print_meta: pooling type     = 0
0.00.219.355 I llm_load_print_meta: rope type        = 2
0.00.219.355 I llm_load_print_meta: rope scaling     = linear
0.00.219.357 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.219.357 I llm_load_print_meta: freq_scale_train = 1
0.00.219.358 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.219.359 I llm_load_print_meta: rope_finetuned   = unknown
0.00.219.359 I llm_load_print_meta: ssm_d_conv       = 0
0.00.219.359 I llm_load_print_meta: ssm_d_inner      = 0
0.00.219.360 I llm_load_print_meta: ssm_d_state      = 0
0.00.219.360 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.219.360 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.219.361 I llm_load_print_meta: model type       = 2B
0.00.219.361 I llm_load_print_meta: model ftype      = Q8_0
0.00.219.362 I llm_load_print_meta: model params     = 2.51 B
0.00.219.363 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.219.363 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.219.364 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.219.365 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.219.365 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.219.365 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.219.366 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.219.367 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.219.367 I llm_load_print_meta: max token length = 93
0.00.219.385 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.293.259 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.293.267 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.293.267 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.293.268 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.293.268 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.293.269 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.298.391 I llama_new_context_with_model: n_ctx      = 8192
0.00.298.397 I llama_new_context_with_model: n_batch    = 2048
0.00.298.397 I llama_new_context_with_model: n_ubatch   = 512
0.00.298.398 I llama_new_context_with_model: flash_attn = 0
0.00.298.400 I llama_new_context_with_model: freq_base  = 10000.0
0.00.298.401 I llama_new_context_with_model: freq_scale = 1
0.00.327.370 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.327.385 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.327.477 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.328.343 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.328.351 I llama_new_context_with_model: graph nodes  = 601
0.00.328.352 I llama_new_context_with_model: graph splits = 1
0.00.328.354 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.418.005 I main: llama threadpool init, n_threads = 4
0.00.418.017 I 
0.00.418.089 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.418.092 I 
0.00.418.120 I sampler seed: 1089668670
0.00.418.129 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.418.141 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.418.144 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities by not mentioning her name.

I cannot answer this question as it contains potentially sensitive and private information that I am not authorized to disclose. [end of text]


0.02.626.878 I llama_perf_sampler_print:    sampling time =       4.99 ms /    32 runs   (    0.16 ms per token,  6417.97 tokens per second)
0.02.626.880 I llama_perf_context_print:        load time =     416.08 ms
0.02.626.882 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.626.883 I llama_perf_context_print:        eval time =    2191.29 ms /    31 runs   (   70.69 ms per token,    14.15 tokens per second)
0.02.626.884 I llama_perf_context_print:       total time =    2208.88 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.543 I build: 3776 (02266138) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.740 I main: llama backend init
0.00.001.903 I main: load the model and apply lora adapter, if any
0.00.021.896 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.941 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.954 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.959 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.959 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.963 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.964 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.964 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.965 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.965 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.965 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.970 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.970 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.971 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.971 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.972 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.701 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.068 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.938 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.944 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.945 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.946 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.947 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.947 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.948 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.950 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.951 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.952 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.952 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.953 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.956 I llama_model_loader: - type  f32:   37 tensors
0.00.131.959 I llama_model_loader: - type q8_0:  127 tensors
0.00.193.494 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.194.102 I llm_load_vocab: special tokens cache size = 5
0.00.212.115 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.212.127 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.212.127 I llm_load_print_meta: arch             = gemma
0.00.212.128 I llm_load_print_meta: vocab type       = SPM
0.00.212.128 I llm_load_print_meta: n_vocab          = 256000
0.00.212.129 I llm_load_print_meta: n_merges         = 0
0.00.212.129 I llm_load_print_meta: vocab_only       = 0
0.00.212.129 I llm_load_print_meta: n_ctx_train      = 8192
0.00.212.130 I llm_load_print_meta: n_embd           = 2048
0.00.212.130 I llm_load_print_meta: n_layer          = 18
0.00.212.141 I llm_load_print_meta: n_head           = 8
0.00.212.142 I llm_load_print_meta: n_head_kv        = 1
0.00.212.143 I llm_load_print_meta: n_rot            = 256
0.00.212.143 I llm_load_print_meta: n_swa            = 0
0.00.212.143 I llm_load_print_meta: n_embd_head_k    = 256
0.00.212.144 I llm_load_print_meta: n_embd_head_v    = 256
0.00.212.144 I llm_load_print_meta: n_gqa            = 8
0.00.212.145 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.212.146 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.212.148 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.212.149 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.212.149 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.212.150 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.212.150 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.212.151 I llm_load_print_meta: n_ff             = 16384
0.00.212.151 I llm_load_print_meta: n_expert         = 0
0.00.212.152 I llm_load_print_meta: n_expert_used    = 0
0.00.212.152 I llm_load_print_meta: causal attn      = 1
0.00.212.152 I llm_load_print_meta: pooling type     = 0
0.00.212.153 I llm_load_print_meta: rope type        = 2
0.00.212.153 I llm_load_print_meta: rope scaling     = linear
0.00.212.155 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.212.155 I llm_load_print_meta: freq_scale_train = 1
0.00.212.156 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.212.156 I llm_load_print_meta: rope_finetuned   = unknown
0.00.212.157 I llm_load_print_meta: ssm_d_conv       = 0
0.00.212.157 I llm_load_print_meta: ssm_d_inner      = 0
0.00.212.157 I llm_load_print_meta: ssm_d_state      = 0
0.00.212.157 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.212.158 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.212.158 I llm_load_print_meta: model type       = 2B
0.00.212.159 I llm_load_print_meta: model ftype      = Q8_0
0.00.212.160 I llm_load_print_meta: model params     = 2.51 B
0.00.212.160 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.212.161 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.212.161 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.212.161 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.212.162 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.212.162 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.212.162 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.212.163 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.212.163 I llm_load_print_meta: max token length = 93
0.00.212.178 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.282.234 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.282.241 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.287.297 I llama_new_context_with_model: n_ctx      = 8192
0.00.287.302 I llama_new_context_with_model: n_batch    = 2048
0.00.287.303 I llama_new_context_with_model: n_ubatch   = 512
0.00.287.303 I llama_new_context_with_model: flash_attn = 0
0.00.287.306 I llama_new_context_with_model: freq_base  = 10000.0
0.00.287.307 I llama_new_context_with_model: freq_scale = 1
0.00.315.886 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.315.901 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.315.992 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.316.842 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.316.849 I llama_new_context_with_model: graph nodes  = 601
0.00.316.849 I llama_new_context_with_model: graph splits = 1
0.00.316.851 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.410.875 I main: llama threadpool init, n_threads = 4
0.00.410.887 I 
0.00.410.960 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.410.964 I 
0.00.411.001 I sampler seed: 1601967916
0.00.411.012 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.411.015 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.411.016 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities, and the like, are not recognized as official terms within the organization.

**Guidelines for Using This Document:**

* This document is intended for

0.02.825.834 I llama_perf_sampler_print:    sampling time =       5.14 ms /    33 runs   (    0.16 ms per token,  6421.48 tokens per second)
0.02.825.836 I llama_perf_context_print:        load time =     408.95 ms
0.02.825.837 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.825.839 I llama_perf_context_print:        eval time =    2395.86 ms /    32 runs   (   74.87 ms per token,    13.36 tokens per second)
0.02.825.839 I llama_perf_context_print:       total time =    2414.97 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.115s
user	0m38.705s
sys	0m9.312s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3776 (02266138)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31959.45 ms
main:    total time = 31959.45 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.574 I build: 3776 (02266138) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.772 I main: llama backend init
0.00.001.900 I main: load the model and apply lora adapter, if any
0.00.022.322 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.369 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.381 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.386 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.388 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.391 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.392 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.393 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.393 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.394 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.394 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.398 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.399 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.399 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.400 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.401 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.928 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.175 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.089 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.096 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.096 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.097 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.098 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.098 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.099 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.101 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.102 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.104 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.105 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.106 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.109 I llama_model_loader: - type  f32:   37 tensors
0.00.132.112 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.112 I llama_model_loader: - type q6_K:   19 tensors
0.00.196.971 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.197.657 I llm_load_vocab: special tokens cache size = 5
0.00.215.834 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.215.846 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.215.847 I llm_load_print_meta: arch             = gemma
0.00.215.847 I llm_load_print_meta: vocab type       = SPM
0.00.215.848 I llm_load_print_meta: n_vocab          = 256000
0.00.215.848 I llm_load_print_meta: n_merges         = 0
0.00.215.849 I llm_load_print_meta: vocab_only       = 0
0.00.215.849 I llm_load_print_meta: n_ctx_train      = 8192
0.00.215.849 I llm_load_print_meta: n_embd           = 2048
0.00.215.849 I llm_load_print_meta: n_layer          = 18
0.00.215.861 I llm_load_print_meta: n_head           = 8
0.00.215.862 I llm_load_print_meta: n_head_kv        = 1
0.00.215.862 I llm_load_print_meta: n_rot            = 256
0.00.215.862 I llm_load_print_meta: n_swa            = 0
0.00.215.863 I llm_load_print_meta: n_embd_head_k    = 256
0.00.215.863 I llm_load_print_meta: n_embd_head_v    = 256
0.00.215.864 I llm_load_print_meta: n_gqa            = 8
0.00.215.865 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.215.866 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.215.867 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.215.868 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.215.869 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.215.869 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.215.869 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.215.870 I llm_load_print_meta: n_ff             = 16384
0.00.215.871 I llm_load_print_meta: n_expert         = 0
0.00.215.871 I llm_load_print_meta: n_expert_used    = 0
0.00.215.871 I llm_load_print_meta: causal attn      = 1
0.00.215.872 I llm_load_print_meta: pooling type     = 0
0.00.215.872 I llm_load_print_meta: rope type        = 2
0.00.215.872 I llm_load_print_meta: rope scaling     = linear
0.00.215.873 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.215.874 I llm_load_print_meta: freq_scale_train = 1
0.00.215.874 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.215.875 I llm_load_print_meta: rope_finetuned   = unknown
0.00.215.875 I llm_load_print_meta: ssm_d_conv       = 0
0.00.215.875 I llm_load_print_meta: ssm_d_inner      = 0
0.00.215.875 I llm_load_print_meta: ssm_d_state      = 0
0.00.215.876 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.215.876 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.215.877 I llm_load_print_meta: model type       = 2B
0.00.215.877 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.215.878 I llm_load_print_meta: model params     = 2.51 B
0.00.215.879 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.215.879 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.215.880 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.215.880 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.215.880 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.215.880 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.215.881 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.215.881 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.215.881 I llm_load_print_meta: max token length = 93
0.00.215.898 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.275.116 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.275.123 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.275.123 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.275.124 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.275.124 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.275.125 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.280.215 I llama_new_context_with_model: n_ctx      = 8192
0.00.280.220 I llama_new_context_with_model: n_batch    = 2048
0.00.280.220 I llama_new_context_with_model: n_ubatch   = 512
0.00.280.221 I llama_new_context_with_model: flash_attn = 0
0.00.280.223 I llama_new_context_with_model: freq_base  = 10000.0
0.00.280.224 I llama_new_context_with_model: freq_scale = 1
0.00.309.235 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.309.249 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.309.338 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.310.203 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.310.211 I llama_new_context_with_model: graph nodes  = 601
0.00.310.211 I llama_new_context_with_model: graph splits = 1
0.00.310.213 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.400.039 I main: llama threadpool init, n_threads = 4
0.00.400.053 I 
0.00.400.125 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.400.128 I 
0.00.400.156 I sampler seed: 1744299341
0.00.400.166 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.400.168 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.400.169 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically!

I am unable to generate the requested response as it contains inappropriate and potentially harmful content. [end of text]


0.01.505.420 I llama_perf_sampler_print:    sampling time =       3.27 ms /    23 runs   (    0.14 ms per token,  7042.25 tokens per second)
0.01.505.422 I llama_perf_context_print:        load time =     398.12 ms
0.01.505.424 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.505.425 I llama_perf_context_print:        eval time =    1092.57 ms /    22 runs   (   49.66 ms per token,    20.14 tokens per second)
0.01.505.426 I llama_perf_context_print:       total time =    1105.39 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3776 (02266138)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32034.97 ms
main:    total time = 32034.97 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.562 I build: 3776 (02266138) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.771 I main: llama backend init
0.00.001.883 I main: load the model and apply lora adapter, if any
0.00.021.962 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.974 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.981 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.983 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.986 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.987 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.988 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.989 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.989 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.990 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.993 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.994 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.995 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.995 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.996 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.443 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.480 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.300 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.306 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.307 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.308 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.308 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.309 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.310 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.312 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.312 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.315 I llama_model_loader: - type  f32:   37 tensors
0.00.131.318 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.320 I llama_model_loader: - type q6_K:   19 tensors
0.00.194.303 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.194.921 I llm_load_vocab: special tokens cache size = 5
0.00.212.938 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.212.950 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.212.951 I llm_load_print_meta: arch             = gemma
0.00.212.951 I llm_load_print_meta: vocab type       = SPM
0.00.212.952 I llm_load_print_meta: n_vocab          = 256000
0.00.212.953 I llm_load_print_meta: n_merges         = 0
0.00.212.953 I llm_load_print_meta: vocab_only       = 0
0.00.212.953 I llm_load_print_meta: n_ctx_train      = 8192
0.00.212.954 I llm_load_print_meta: n_embd           = 2048
0.00.212.954 I llm_load_print_meta: n_layer          = 18
0.00.212.965 I llm_load_print_meta: n_head           = 8
0.00.212.966 I llm_load_print_meta: n_head_kv        = 1
0.00.212.967 I llm_load_print_meta: n_rot            = 256
0.00.212.967 I llm_load_print_meta: n_swa            = 0
0.00.212.967 I llm_load_print_meta: n_embd_head_k    = 256
0.00.212.968 I llm_load_print_meta: n_embd_head_v    = 256
0.00.212.968 I llm_load_print_meta: n_gqa            = 8
0.00.212.969 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.212.970 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.212.971 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.212.972 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.212.973 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.212.973 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.212.973 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.212.974 I llm_load_print_meta: n_ff             = 16384
0.00.212.975 I llm_load_print_meta: n_expert         = 0
0.00.212.975 I llm_load_print_meta: n_expert_used    = 0
0.00.212.975 I llm_load_print_meta: causal attn      = 1
0.00.212.975 I llm_load_print_meta: pooling type     = 0
0.00.212.976 I llm_load_print_meta: rope type        = 2
0.00.212.976 I llm_load_print_meta: rope scaling     = linear
0.00.212.978 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.212.978 I llm_load_print_meta: freq_scale_train = 1
0.00.212.979 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.212.979 I llm_load_print_meta: rope_finetuned   = unknown
0.00.212.979 I llm_load_print_meta: ssm_d_conv       = 0
0.00.212.979 I llm_load_print_meta: ssm_d_inner      = 0
0.00.212.980 I llm_load_print_meta: ssm_d_state      = 0
0.00.212.980 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.212.980 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.212.980 I llm_load_print_meta: model type       = 2B
0.00.212.981 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.212.982 I llm_load_print_meta: model params     = 2.51 B
0.00.212.983 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.212.983 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.212.983 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.212.984 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.212.984 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.212.984 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.212.985 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.212.985 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.212.985 I llm_load_print_meta: max token length = 93
0.00.213.007 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.268.019 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.273.055 I llama_new_context_with_model: n_ctx      = 8192
0.00.273.061 I llama_new_context_with_model: n_batch    = 2048
0.00.273.061 I llama_new_context_with_model: n_ubatch   = 512
0.00.273.062 I llama_new_context_with_model: flash_attn = 0
0.00.273.065 I llama_new_context_with_model: freq_base  = 10000.0
0.00.273.066 I llama_new_context_with_model: freq_scale = 1
0.00.302.405 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.302.421 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.302.519 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.303.358 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.303.367 I llama_new_context_with_model: graph nodes  = 601
0.00.303.367 I llama_new_context_with_model: graph splits = 1
0.00.303.369 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.383.364 I main: llama threadpool init, n_threads = 4
0.00.383.377 I 
0.00.383.451 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.383.454 I 
0.00.383.483 I sampler seed: 4092127129
0.00.383.493 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.383.496 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.383.497 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically with excitement.

I'm so thrilled to finally be here.

I've been waiting for this moment for years.

The journey has

0.01.995.712 I llama_perf_sampler_print:    sampling time =       4.89 ms /    33 runs   (    0.15 ms per token,  6745.71 tokens per second)
0.01.995.715 I llama_perf_context_print:        load time =     381.46 ms
0.01.995.716 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.995.718 I llama_perf_context_print:        eval time =    1594.24 ms /    32 runs   (   49.82 ms per token,    20.07 tokens per second)
0.01.995.719 I llama_perf_context_print:       total time =    1612.36 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.219s
user	8m12.440s
sys	0m6.764s
