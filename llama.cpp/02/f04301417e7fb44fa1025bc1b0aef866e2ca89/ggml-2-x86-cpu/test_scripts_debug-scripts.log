+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.631 I build: 4438 (02f04301) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.831 I main: llama backend init
0.00.000.839 I main: load the model and apply lora adapter, if any
0.00.085.804 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.085.817 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.085.914 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.935 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.938 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.943 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.945 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.947 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.949 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.951 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.952 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.961 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.963 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.965 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.967 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.969 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.313.369 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.412.707 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.439.703 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.439.716 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.439.718 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.439.720 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.439.722 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.439.724 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.439.725 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.439.730 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.439.731 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.439.734 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.439.736 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.439.737 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.439.745 I llama_model_loader: - type  f32:   37 tensors
0.00.439.747 I llama_model_loader: - type q8_0:  127 tensors
0.00.696.323 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.816.487 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.817.426 I llm_load_vocab: special tokens cache size = 5
0.01.034.794 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.034.879 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.034.883 I llm_load_print_meta: arch             = gemma
0.01.034.884 I llm_load_print_meta: vocab type       = SPM
0.01.034.885 I llm_load_print_meta: n_vocab          = 256000
0.01.034.887 I llm_load_print_meta: n_merges         = 0
0.01.034.888 I llm_load_print_meta: vocab_only       = 0
0.01.034.889 I llm_load_print_meta: n_ctx_train      = 8192
0.01.034.889 I llm_load_print_meta: n_embd           = 2048
0.01.034.889 I llm_load_print_meta: n_layer          = 18
0.01.034.971 I llm_load_print_meta: n_head           = 8
0.01.034.982 I llm_load_print_meta: n_head_kv        = 1
0.01.034.982 I llm_load_print_meta: n_rot            = 256
0.01.034.984 I llm_load_print_meta: n_swa            = 0
0.01.034.985 I llm_load_print_meta: n_embd_head_k    = 256
0.01.034.985 I llm_load_print_meta: n_embd_head_v    = 256
0.01.034.990 I llm_load_print_meta: n_gqa            = 8
0.01.034.995 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.035.000 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.035.003 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.035.005 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.035.005 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.035.006 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.035.006 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.035.011 I llm_load_print_meta: n_ff             = 16384
0.01.035.011 I llm_load_print_meta: n_expert         = 0
0.01.035.012 I llm_load_print_meta: n_expert_used    = 0
0.01.035.013 I llm_load_print_meta: causal attn      = 1
0.01.035.014 I llm_load_print_meta: pooling type     = 0
0.01.035.014 I llm_load_print_meta: rope type        = 2
0.01.035.015 I llm_load_print_meta: rope scaling     = linear
0.01.035.017 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.035.018 I llm_load_print_meta: freq_scale_train = 1
0.01.035.019 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.035.019 I llm_load_print_meta: rope_finetuned   = unknown
0.01.035.020 I llm_load_print_meta: ssm_d_conv       = 0
0.01.035.020 I llm_load_print_meta: ssm_d_inner      = 0
0.01.035.021 I llm_load_print_meta: ssm_d_state      = 0
0.01.035.021 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.035.022 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.035.025 I llm_load_print_meta: model type       = 2B
0.01.035.027 I llm_load_print_meta: model ftype      = Q8_0
0.01.035.028 I llm_load_print_meta: model params     = 2.51 B
0.01.035.029 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.035.030 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.035.030 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.035.031 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.035.032 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.035.032 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.035.033 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.035.034 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.035.041 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.035.042 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.035.043 I llm_load_print_meta: max token length = 93
0.01.138.968 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.138.978 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.138.979 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.138.980 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.138.980 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.138.981 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.146.133 I llama_new_context_with_model: n_seq_max     = 1
0.01.146.138 I llama_new_context_with_model: n_ctx         = 4096
0.01.146.138 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.146.139 I llama_new_context_with_model: n_batch       = 2048
0.01.146.139 I llama_new_context_with_model: n_ubatch      = 512
0.01.146.139 I llama_new_context_with_model: flash_attn    = 0
0.01.146.142 I llama_new_context_with_model: freq_base     = 10000.0
0.01.146.142 I llama_new_context_with_model: freq_scale    = 1
0.01.146.143 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.146.227 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.160.509 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.160.549 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.160.677 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.164.373 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.164.378 I llama_new_context_with_model: graph nodes  = 601
0.01.164.378 I llama_new_context_with_model: graph splits = 1
0.01.164.405 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.164.408 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.775.651 I main: llama threadpool init, n_threads = 4
0.01.775.669 I 
0.01.775.795 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.775.799 I 
0.01.776.038 I sampler seed: 4213785124
0.01.776.053 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.776.062 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.776.066 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.776.066 I 
 increasities on a daily basis, and I am unable to keep up.

This is overwhelming, and I need a solution that can help me stay organized and

0.15.320.263 I llama_perf_sampler_print:    sampling time =      50.04 ms /    33 runs   (    1.52 ms per token,   659.47 tokens per second)
0.15.320.266 I llama_perf_context_print:        load time =    1774.72 ms
0.15.320.267 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.320.269 I llama_perf_context_print:        eval time =   13459.15 ms /    32 runs   (  420.60 ms per token,     2.38 tokens per second)
0.15.320.270 I llama_perf_context_print:       total time =   13544.62 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.672 I build: 4438 (02f04301) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.881 I main: llama backend init
0.00.000.889 I main: load the model and apply lora adapter, if any
0.00.085.547 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.085.656 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.686 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.703 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.710 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.712 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.713 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.715 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.718 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.722 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.731 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.734 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.739 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.742 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.745 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.317.596 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.416.773 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.440.430 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.440.448 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.440.450 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.440.452 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.440.453 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.440.456 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.440.457 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.440.462 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.440.464 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.440.466 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.440.468 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.440.470 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.440.479 I llama_model_loader: - type  f32:   37 tensors
0.00.440.482 I llama_model_loader: - type q8_0:  127 tensors
0.00.725.972 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.853.054 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.854.047 I llm_load_vocab: special tokens cache size = 5
0.01.074.034 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.074.114 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.074.119 I llm_load_print_meta: arch             = gemma
0.01.074.120 I llm_load_print_meta: vocab type       = SPM
0.01.074.121 I llm_load_print_meta: n_vocab          = 256000
0.01.074.124 I llm_load_print_meta: n_merges         = 0
0.01.074.124 I llm_load_print_meta: vocab_only       = 0
0.01.074.125 I llm_load_print_meta: n_ctx_train      = 8192
0.01.074.125 I llm_load_print_meta: n_embd           = 2048
0.01.074.125 I llm_load_print_meta: n_layer          = 18
0.01.074.218 I llm_load_print_meta: n_head           = 8
0.01.074.229 I llm_load_print_meta: n_head_kv        = 1
0.01.074.230 I llm_load_print_meta: n_rot            = 256
0.01.074.233 I llm_load_print_meta: n_swa            = 0
0.01.074.233 I llm_load_print_meta: n_embd_head_k    = 256
0.01.074.234 I llm_load_print_meta: n_embd_head_v    = 256
0.01.074.239 I llm_load_print_meta: n_gqa            = 8
0.01.074.246 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.074.253 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.074.255 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.074.268 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.074.272 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.074.273 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.074.274 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.074.286 I llm_load_print_meta: n_ff             = 16384
0.01.074.287 I llm_load_print_meta: n_expert         = 0
0.01.074.287 I llm_load_print_meta: n_expert_used    = 0
0.01.074.288 I llm_load_print_meta: causal attn      = 1
0.01.074.289 I llm_load_print_meta: pooling type     = 0
0.01.074.293 I llm_load_print_meta: rope type        = 2
0.01.074.293 I llm_load_print_meta: rope scaling     = linear
0.01.074.295 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.074.310 I llm_load_print_meta: freq_scale_train = 1
0.01.074.314 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.074.314 I llm_load_print_meta: rope_finetuned   = unknown
0.01.074.315 I llm_load_print_meta: ssm_d_conv       = 0
0.01.074.315 I llm_load_print_meta: ssm_d_inner      = 0
0.01.074.316 I llm_load_print_meta: ssm_d_state      = 0
0.01.074.317 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.074.317 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.074.322 I llm_load_print_meta: model type       = 2B
0.01.074.325 I llm_load_print_meta: model ftype      = Q8_0
0.01.074.327 I llm_load_print_meta: model params     = 2.51 B
0.01.074.328 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.074.331 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.074.333 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.074.333 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.074.334 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.074.335 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.074.337 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.074.337 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.074.352 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.074.354 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.074.355 I llm_load_print_meta: max token length = 93
0.01.171.908 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.179.211 I llama_new_context_with_model: n_seq_max     = 1
0.01.179.216 I llama_new_context_with_model: n_ctx         = 4096
0.01.179.217 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.179.217 I llama_new_context_with_model: n_batch       = 2048
0.01.179.218 I llama_new_context_with_model: n_ubatch      = 512
0.01.179.218 I llama_new_context_with_model: flash_attn    = 0
0.01.179.220 I llama_new_context_with_model: freq_base     = 10000.0
0.01.179.221 I llama_new_context_with_model: freq_scale    = 1
0.01.179.222 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.179.307 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.193.702 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.193.740 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.193.878 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.197.414 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.197.419 I llama_new_context_with_model: graph nodes  = 601
0.01.197.419 I llama_new_context_with_model: graph splits = 1
0.01.197.444 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.197.448 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.809.839 I main: llama threadpool init, n_threads = 4
0.01.809.856 I 
0.01.809.984 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.809.988 I 
0.01.810.229 I sampler seed: 4071953429
0.01.810.243 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.810.257 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.810.261 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.810.262 I 
 increasities of the past, and their enduring legacies.

**Answer:**

**The enduring legacies of historical events include:**

**1. Cultural Transmission:**

0.15.443.219 I llama_perf_sampler_print:    sampling time =      49.80 ms /    33 runs   (    1.51 ms per token,   662.66 tokens per second)
0.15.443.234 I llama_perf_context_print:        load time =    1808.86 ms
0.15.443.235 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.443.237 I llama_perf_context_print:        eval time =   13547.92 ms /    32 runs   (  423.37 ms per token,     2.36 tokens per second)
0.15.443.238 I llama_perf_context_print:       total time =   13633.39 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.655 I build: 4438 (02f04301) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.853 I main: llama backend init
0.00.000.862 I main: load the model and apply lora adapter, if any
0.00.086.036 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.086.051 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.086.146 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.170 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.173 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.179 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.181 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.182 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.184 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.186 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.187 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.195 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.197 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.199 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.201 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.202 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.317.011 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.423.664 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.447.236 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.447.250 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.447.252 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.447.254 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.447.256 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.447.258 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.447.259 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.447.264 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.447.266 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.447.268 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.447.270 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.447.271 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.447.280 I llama_model_loader: - type  f32:   37 tensors
0.00.447.282 I llama_model_loader: - type q8_0:  127 tensors
0.00.727.411 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.860.390 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.861.438 I llm_load_vocab: special tokens cache size = 5
0.01.087.396 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.087.477 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.087.482 I llm_load_print_meta: arch             = gemma
0.01.087.482 I llm_load_print_meta: vocab type       = SPM
0.01.087.483 I llm_load_print_meta: n_vocab          = 256000
0.01.087.485 I llm_load_print_meta: n_merges         = 0
0.01.087.486 I llm_load_print_meta: vocab_only       = 0
0.01.087.486 I llm_load_print_meta: n_ctx_train      = 8192
0.01.087.487 I llm_load_print_meta: n_embd           = 2048
0.01.087.487 I llm_load_print_meta: n_layer          = 18
0.01.087.565 I llm_load_print_meta: n_head           = 8
0.01.087.575 I llm_load_print_meta: n_head_kv        = 1
0.01.087.576 I llm_load_print_meta: n_rot            = 256
0.01.087.579 I llm_load_print_meta: n_swa            = 0
0.01.087.579 I llm_load_print_meta: n_embd_head_k    = 256
0.01.087.580 I llm_load_print_meta: n_embd_head_v    = 256
0.01.087.585 I llm_load_print_meta: n_gqa            = 8
0.01.087.590 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.087.594 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.087.596 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.087.597 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.087.598 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.087.599 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.087.599 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.087.604 I llm_load_print_meta: n_ff             = 16384
0.01.087.605 I llm_load_print_meta: n_expert         = 0
0.01.087.606 I llm_load_print_meta: n_expert_used    = 0
0.01.087.606 I llm_load_print_meta: causal attn      = 1
0.01.087.606 I llm_load_print_meta: pooling type     = 0
0.01.087.608 I llm_load_print_meta: rope type        = 2
0.01.087.609 I llm_load_print_meta: rope scaling     = linear
0.01.087.612 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.087.613 I llm_load_print_meta: freq_scale_train = 1
0.01.087.613 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.087.614 I llm_load_print_meta: rope_finetuned   = unknown
0.01.087.614 I llm_load_print_meta: ssm_d_conv       = 0
0.01.087.614 I llm_load_print_meta: ssm_d_inner      = 0
0.01.087.615 I llm_load_print_meta: ssm_d_state      = 0
0.01.087.615 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.087.615 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.087.626 I llm_load_print_meta: model type       = 2B
0.01.087.628 I llm_load_print_meta: model ftype      = Q8_0
0.01.087.629 I llm_load_print_meta: model params     = 2.51 B
0.01.087.630 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.087.631 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.087.632 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.087.632 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.087.633 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.087.634 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.087.635 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.087.636 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.087.642 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.087.643 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.087.643 I llm_load_print_meta: max token length = 93
0.01.166.273 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.166.281 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.166.282 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.166.283 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.166.284 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.166.285 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.173.741 I llama_new_context_with_model: n_seq_max     = 1
0.01.173.746 I llama_new_context_with_model: n_ctx         = 4096
0.01.173.747 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.173.747 I llama_new_context_with_model: n_batch       = 2048
0.01.173.747 I llama_new_context_with_model: n_ubatch      = 512
0.01.173.748 I llama_new_context_with_model: flash_attn    = 0
0.01.173.750 I llama_new_context_with_model: freq_base     = 10000.0
0.01.173.751 I llama_new_context_with_model: freq_scale    = 1
0.01.173.751 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.173.840 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.188.109 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.188.147 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.188.270 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.191.412 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.191.416 I llama_new_context_with_model: graph nodes  = 601
0.01.191.417 I llama_new_context_with_model: graph splits = 1
0.01.191.443 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.191.446 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.816.527 I main: llama threadpool init, n_threads = 4
0.01.816.542 I 
0.01.816.685 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.816.690 I 
0.01.816.929 I sampler seed: 3835420516
0.01.816.944 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.816.956 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.816.960 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.816.961 I 
 increasities in his wife's belly.

The doctor explained that the bulging uterus was caused by amniotic fluid leaking from the cervix.

The patient was

0.15.447.062 I llama_perf_sampler_print:    sampling time =      49.78 ms /    33 runs   (    1.51 ms per token,   662.96 tokens per second)
0.15.447.066 I llama_perf_context_print:        load time =    1815.58 ms
0.15.447.067 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.447.069 I llama_perf_context_print:        eval time =   13545.59 ms /    32 runs   (  423.30 ms per token,     2.36 tokens per second)
0.15.447.070 I llama_perf_context_print:       total time =   13630.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.691 I build: 4438 (02f04301) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.909 I main: llama backend init
0.00.000.918 I main: load the model and apply lora adapter, if any
0.00.085.831 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.085.845 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.085.956 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.990 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.998 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.014 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.020 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.023 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.027 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.030 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.034 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.045 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.051 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.055 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.065 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.071 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.289.742 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.390.979 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.414.637 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.414.652 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.414.654 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.414.656 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.414.657 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.414.660 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.414.661 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.414.666 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.414.667 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.414.669 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.414.671 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.414.673 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.414.681 I llama_model_loader: - type  f32:   37 tensors
0.00.414.683 I llama_model_loader: - type q8_0:  127 tensors
0.00.675.793 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.802.595 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.803.657 I llm_load_vocab: special tokens cache size = 5
0.01.019.720 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.019.806 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.019.811 I llm_load_print_meta: arch             = gemma
0.01.019.811 I llm_load_print_meta: vocab type       = SPM
0.01.019.812 I llm_load_print_meta: n_vocab          = 256000
0.01.019.815 I llm_load_print_meta: n_merges         = 0
0.01.019.815 I llm_load_print_meta: vocab_only       = 0
0.01.019.816 I llm_load_print_meta: n_ctx_train      = 8192
0.01.019.816 I llm_load_print_meta: n_embd           = 2048
0.01.019.816 I llm_load_print_meta: n_layer          = 18
0.01.019.899 I llm_load_print_meta: n_head           = 8
0.01.019.907 I llm_load_print_meta: n_head_kv        = 1
0.01.019.908 I llm_load_print_meta: n_rot            = 256
0.01.019.909 I llm_load_print_meta: n_swa            = 0
0.01.019.910 I llm_load_print_meta: n_embd_head_k    = 256
0.01.019.910 I llm_load_print_meta: n_embd_head_v    = 256
0.01.019.915 I llm_load_print_meta: n_gqa            = 8
0.01.019.950 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.019.960 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.019.961 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.019.963 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.019.963 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.019.964 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.019.964 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.019.969 I llm_load_print_meta: n_ff             = 16384
0.01.019.969 I llm_load_print_meta: n_expert         = 0
0.01.019.970 I llm_load_print_meta: n_expert_used    = 0
0.01.019.971 I llm_load_print_meta: causal attn      = 1
0.01.019.972 I llm_load_print_meta: pooling type     = 0
0.01.019.972 I llm_load_print_meta: rope type        = 2
0.01.019.975 I llm_load_print_meta: rope scaling     = linear
0.01.019.977 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.019.983 I llm_load_print_meta: freq_scale_train = 1
0.01.019.984 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.019.986 I llm_load_print_meta: rope_finetuned   = unknown
0.01.019.987 I llm_load_print_meta: ssm_d_conv       = 0
0.01.019.987 I llm_load_print_meta: ssm_d_inner      = 0
0.01.019.987 I llm_load_print_meta: ssm_d_state      = 0
0.01.019.987 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.019.988 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.019.990 I llm_load_print_meta: model type       = 2B
0.01.019.992 I llm_load_print_meta: model ftype      = Q8_0
0.01.019.993 I llm_load_print_meta: model params     = 2.51 B
0.01.019.994 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.019.994 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.019.995 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.019.997 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.019.998 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.019.998 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.019.999 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.020.004 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.020.010 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.020.019 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.020.020 I llm_load_print_meta: max token length = 93
0.01.092.711 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.092.719 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.100.039 I llama_new_context_with_model: n_seq_max     = 1
0.01.100.045 I llama_new_context_with_model: n_ctx         = 4096
0.01.100.045 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.100.046 I llama_new_context_with_model: n_batch       = 2048
0.01.100.046 I llama_new_context_with_model: n_ubatch      = 512
0.01.100.047 I llama_new_context_with_model: flash_attn    = 0
0.01.100.049 I llama_new_context_with_model: freq_base     = 10000.0
0.01.100.050 I llama_new_context_with_model: freq_scale    = 1
0.01.100.050 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.100.138 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.114.139 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.114.178 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.114.311 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.117.588 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.117.593 I llama_new_context_with_model: graph nodes  = 601
0.01.117.593 I llama_new_context_with_model: graph splits = 1
0.01.117.617 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.117.618 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.733.453 I main: llama threadpool init, n_threads = 4
0.01.733.469 I 
0.01.733.613 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.733.618 I 
0.01.733.858 I sampler seed: 3224286309
0.01.733.872 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.733.884 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.733.888 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.733.889 I 
 increasities in the workplace, and how to address them.

**1. Understanding the Causes of Workplace Imbalances**

* **Communication breakdowns:** Poor

0.15.367.173 I llama_perf_sampler_print:    sampling time =      49.71 ms /    33 runs   (    1.51 ms per token,   663.84 tokens per second)
0.15.367.188 I llama_perf_context_print:        load time =    1732.43 ms
0.15.367.189 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.367.191 I llama_perf_context_print:        eval time =   13547.51 ms /    32 runs   (  423.36 ms per token,     2.36 tokens per second)
0.15.367.192 I llama_perf_context_print:       total time =   13633.73 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m13.202s
user	3m53.772s
sys	0m9.397s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4438 (02f04301)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 187204.11 ms
main:    total time = 187204.11 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.650 I build: 4438 (02f04301) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.841 I main: llama backend init
0.00.000.849 I main: load the model and apply lora adapter, if any
0.00.085.574 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.085.587 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.085.687 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.710 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.715 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.720 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.722 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.725 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.727 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.729 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.730 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.738 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.740 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.743 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.744 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.312.176 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.411.528 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.435.140 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.435.156 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.435.159 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.435.161 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.435.162 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.435.164 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.435.166 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.435.171 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.435.173 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.435.175 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.435.177 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.435.179 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.435.181 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.435.190 I llama_model_loader: - type  f32:   37 tensors
0.00.435.192 I llama_model_loader: - type q4_K:  108 tensors
0.00.435.192 I llama_model_loader: - type q6_K:   19 tensors
0.00.714.453 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.840.916 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.841.889 I llm_load_vocab: special tokens cache size = 5
0.01.063.327 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.063.410 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.063.415 I llm_load_print_meta: arch             = gemma
0.01.063.415 I llm_load_print_meta: vocab type       = SPM
0.01.063.416 I llm_load_print_meta: n_vocab          = 256000
0.01.063.419 I llm_load_print_meta: n_merges         = 0
0.01.063.419 I llm_load_print_meta: vocab_only       = 0
0.01.063.420 I llm_load_print_meta: n_ctx_train      = 8192
0.01.063.420 I llm_load_print_meta: n_embd           = 2048
0.01.063.420 I llm_load_print_meta: n_layer          = 18
0.01.063.502 I llm_load_print_meta: n_head           = 8
0.01.063.509 I llm_load_print_meta: n_head_kv        = 1
0.01.063.513 I llm_load_print_meta: n_rot            = 256
0.01.063.513 I llm_load_print_meta: n_swa            = 0
0.01.063.513 I llm_load_print_meta: n_embd_head_k    = 256
0.01.063.514 I llm_load_print_meta: n_embd_head_v    = 256
0.01.063.519 I llm_load_print_meta: n_gqa            = 8
0.01.063.524 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.063.530 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.063.531 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.063.532 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.063.533 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.063.534 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.063.534 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.063.539 I llm_load_print_meta: n_ff             = 16384
0.01.063.540 I llm_load_print_meta: n_expert         = 0
0.01.063.541 I llm_load_print_meta: n_expert_used    = 0
0.01.063.541 I llm_load_print_meta: causal attn      = 1
0.01.063.542 I llm_load_print_meta: pooling type     = 0
0.01.063.542 I llm_load_print_meta: rope type        = 2
0.01.063.545 I llm_load_print_meta: rope scaling     = linear
0.01.063.546 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.063.547 I llm_load_print_meta: freq_scale_train = 1
0.01.063.547 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.063.547 I llm_load_print_meta: rope_finetuned   = unknown
0.01.063.548 I llm_load_print_meta: ssm_d_conv       = 0
0.01.063.548 I llm_load_print_meta: ssm_d_inner      = 0
0.01.063.548 I llm_load_print_meta: ssm_d_state      = 0
0.01.063.548 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.063.549 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.063.551 I llm_load_print_meta: model type       = 2B
0.01.063.553 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.01.063.555 I llm_load_print_meta: model params     = 2.51 B
0.01.063.556 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.01.063.557 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.063.558 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.063.558 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.063.559 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.063.559 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.063.560 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.063.561 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.063.568 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.063.569 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.063.569 I llm_load_print_meta: max token length = 93
0.01.126.922 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.126.934 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.126.935 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.126.936 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.126.937 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.126.938 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.133.968 I llama_new_context_with_model: n_seq_max     = 1
0.01.133.974 I llama_new_context_with_model: n_ctx         = 4096
0.01.133.974 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.133.974 I llama_new_context_with_model: n_batch       = 2048
0.01.133.975 I llama_new_context_with_model: n_ubatch      = 512
0.01.133.975 I llama_new_context_with_model: flash_attn    = 0
0.01.133.978 I llama_new_context_with_model: freq_base     = 10000.0
0.01.133.978 I llama_new_context_with_model: freq_scale    = 1
0.01.133.979 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.134.061 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.148.176 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.148.214 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.148.338 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.151.546 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.151.550 I llama_new_context_with_model: graph nodes  = 601
0.01.151.551 I llama_new_context_with_model: graph splits = 1
0.01.151.576 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.151.579 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.742.418 I main: llama threadpool init, n_threads = 4
0.01.742.436 I 
0.01.742.558 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.742.562 I 
0.01.742.795 I sampler seed: 4135038213
0.01.742.810 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.742.820 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.742.822 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.742.822 I 
 squaRED

## The Squashed

The Squashed is a platform dedicated to providing accessible, bite-sized, and engaging content for people with short attention spans

0.13.009.005 I llama_perf_sampler_print:    sampling time =      49.88 ms /    33 runs   (    1.51 ms per token,   661.65 tokens per second)
0.13.009.020 I llama_perf_context_print:        load time =    1741.49 ms
0.13.009.021 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.009.024 I llama_perf_context_print:        eval time =   11181.00 ms /    32 runs   (  349.41 ms per token,     2.86 tokens per second)
0.13.009.025 I llama_perf_context_print:       total time =   11266.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4438 (02f04301)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186221.04 ms
main:    total time = 186221.04 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.622 I build: 4438 (02f04301) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.830 I main: llama backend init
0.00.000.838 I main: load the model and apply lora adapter, if any
0.00.085.835 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.085.958 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.984 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.986 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.992 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.993 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.995 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.997 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.999 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.000 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.008 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.010 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.011 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.013 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.291.443 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.390.974 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.414.669 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.414.685 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.414.687 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.414.689 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.414.690 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.414.693 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.414.695 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.414.699 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.414.701 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.414.703 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.414.712 I llama_model_loader: - type  f32:   37 tensors
0.00.414.714 I llama_model_loader: - type q4_K:  108 tensors
0.00.414.715 I llama_model_loader: - type q6_K:   19 tensors
0.00.703.102 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.830.405 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.831.383 I llm_load_vocab: special tokens cache size = 5
0.01.049.952 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.050.034 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.050.038 I llm_load_print_meta: arch             = gemma
0.01.050.039 I llm_load_print_meta: vocab type       = SPM
0.01.050.040 I llm_load_print_meta: n_vocab          = 256000
0.01.050.042 I llm_load_print_meta: n_merges         = 0
0.01.050.043 I llm_load_print_meta: vocab_only       = 0
0.01.050.043 I llm_load_print_meta: n_ctx_train      = 8192
0.01.050.044 I llm_load_print_meta: n_embd           = 2048
0.01.050.044 I llm_load_print_meta: n_layer          = 18
0.01.050.123 I llm_load_print_meta: n_head           = 8
0.01.050.130 I llm_load_print_meta: n_head_kv        = 1
0.01.050.131 I llm_load_print_meta: n_rot            = 256
0.01.050.131 I llm_load_print_meta: n_swa            = 0
0.01.050.132 I llm_load_print_meta: n_embd_head_k    = 256
0.01.050.132 I llm_load_print_meta: n_embd_head_v    = 256
0.01.050.137 I llm_load_print_meta: n_gqa            = 8
0.01.050.142 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.050.146 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.050.147 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.050.149 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.050.150 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.050.150 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.050.151 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.050.156 I llm_load_print_meta: n_ff             = 16384
0.01.050.156 I llm_load_print_meta: n_expert         = 0
0.01.050.157 I llm_load_print_meta: n_expert_used    = 0
0.01.050.158 I llm_load_print_meta: causal attn      = 1
0.01.050.158 I llm_load_print_meta: pooling type     = 0
0.01.050.159 I llm_load_print_meta: rope type        = 2
0.01.050.159 I llm_load_print_meta: rope scaling     = linear
0.01.050.161 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.050.163 I llm_load_print_meta: freq_scale_train = 1
0.01.050.164 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.050.174 I llm_load_print_meta: rope_finetuned   = unknown
0.01.050.185 I llm_load_print_meta: ssm_d_conv       = 0
0.01.050.186 I llm_load_print_meta: ssm_d_inner      = 0
0.01.050.187 I llm_load_print_meta: ssm_d_state      = 0
0.01.050.187 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.050.188 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.050.195 I llm_load_print_meta: model type       = 2B
0.01.050.197 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.01.050.198 I llm_load_print_meta: model params     = 2.51 B
0.01.050.199 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.01.050.199 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.050.200 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.050.201 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.050.202 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.050.202 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.050.203 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.050.206 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.050.213 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.050.214 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.050.214 I llm_load_print_meta: max token length = 93
0.01.110.032 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.01.117.311 I llama_new_context_with_model: n_seq_max     = 1
0.01.117.316 I llama_new_context_with_model: n_ctx         = 4096
0.01.117.317 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.117.317 I llama_new_context_with_model: n_batch       = 2048
0.01.117.318 I llama_new_context_with_model: n_ubatch      = 512
0.01.117.318 I llama_new_context_with_model: flash_attn    = 0
0.01.117.320 I llama_new_context_with_model: freq_base     = 10000.0
0.01.117.321 I llama_new_context_with_model: freq_scale    = 1
0.01.117.321 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.117.403 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.131.800 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.131.839 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.131.963 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.135.252 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.135.256 I llama_new_context_with_model: graph nodes  = 601
0.01.135.257 I llama_new_context_with_model: graph splits = 1
0.01.135.281 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.135.285 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.715.997 I main: llama threadpool init, n_threads = 4
0.01.716.014 I 
0.01.716.149 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.716.154 I 
0.01.716.392 I sampler seed: 3981275370
0.01.716.407 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.716.417 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.716.421 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.716.421 I 
 seconded by the word 'a' is a contraction of which of the following?
a) Associate
b) Associate's
c) Associate'

0.12.895.236 I llama_perf_sampler_print:    sampling time =      49.56 ms /    33 runs   (    1.50 ms per token,   665.85 tokens per second)
0.12.895.240 I llama_perf_context_print:        load time =    1715.08 ms
0.12.895.242 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.895.245 I llama_perf_context_print:        eval time =   11093.61 ms /    32 runs   (  346.68 ms per token,     2.88 tokens per second)
0.12.895.248 I llama_perf_context_print:       total time =   11179.25 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m42.569s
user	46m54.565s
sys	0m6.317s
