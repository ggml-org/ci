+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.573 I build: 4438 (02f04301) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.785 I main: llama backend init
0.00.000.792 I main: load the model and apply lora adapter, if any
0.00.030.168 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.030.179 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.030.186 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.192 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.194 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.197 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.197 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.198 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.199 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.199 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.200 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.204 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.205 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.206 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.206 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.030.207 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.056.714 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.130.925 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.428 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.435 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.436 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.437 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.437 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.438 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.439 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.440 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.441 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.137.442 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.443 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.137.443 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.137.447 I llama_model_loader: - type  f32:   37 tensors
0.00.137.448 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.658 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.926 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.450 I llm_load_vocab: special tokens cache size = 5
0.00.269.446 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.463 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.465 I llm_load_print_meta: arch             = gemma
0.00.269.465 I llm_load_print_meta: vocab type       = SPM
0.00.269.466 I llm_load_print_meta: n_vocab          = 256000
0.00.269.467 I llm_load_print_meta: n_merges         = 0
0.00.269.467 I llm_load_print_meta: vocab_only       = 0
0.00.269.468 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.468 I llm_load_print_meta: n_embd           = 2048
0.00.269.469 I llm_load_print_meta: n_layer          = 18
0.00.269.479 I llm_load_print_meta: n_head           = 8
0.00.269.481 I llm_load_print_meta: n_head_kv        = 1
0.00.269.481 I llm_load_print_meta: n_rot            = 256
0.00.269.481 I llm_load_print_meta: n_swa            = 0
0.00.269.482 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.482 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.484 I llm_load_print_meta: n_gqa            = 8
0.00.269.485 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.487 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.488 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.489 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.490 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.490 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.490 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.492 I llm_load_print_meta: n_ff             = 16384
0.00.269.493 I llm_load_print_meta: n_expert         = 0
0.00.269.493 I llm_load_print_meta: n_expert_used    = 0
0.00.269.493 I llm_load_print_meta: causal attn      = 1
0.00.269.493 I llm_load_print_meta: pooling type     = 0
0.00.269.494 I llm_load_print_meta: rope type        = 2
0.00.269.494 I llm_load_print_meta: rope scaling     = linear
0.00.269.496 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.496 I llm_load_print_meta: freq_scale_train = 1
0.00.269.497 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.497 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.498 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.498 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.498 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.498 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.499 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.500 I llm_load_print_meta: model type       = 2B
0.00.269.502 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.502 I llm_load_print_meta: model params     = 2.51 B
0.00.269.503 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.503 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.504 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.504 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.505 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.505 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.505 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.506 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.506 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.506 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.506 I llm_load_print_meta: max token length = 93
0.00.371.408 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.371.414 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.371.415 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.371.416 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.371.416 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.371.417 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.372.739 I llama_new_context_with_model: n_seq_max     = 1
0.00.372.743 I llama_new_context_with_model: n_ctx         = 4096
0.00.372.743 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.372.744 I llama_new_context_with_model: n_batch       = 2048
0.00.372.744 I llama_new_context_with_model: n_ubatch      = 512
0.00.372.745 I llama_new_context_with_model: flash_attn    = 0
0.00.372.747 I llama_new_context_with_model: freq_base     = 10000.0
0.00.372.747 I llama_new_context_with_model: freq_scale    = 1
0.00.372.748 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.372.766 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.387.406 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.419 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.514 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.389.724 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.389.731 I llama_new_context_with_model: graph nodes  = 601
0.00.389.731 I llama_new_context_with_model: graph splits = 1
0.00.389.734 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.389.734 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.475.425 I main: llama threadpool init, n_threads = 4
0.00.475.439 I 
0.00.475.516 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.475.519 I 
0.00.475.552 I sampler seed: 629343757
0.00.475.563 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.475.565 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.475.578 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.475.581 I 
 increasities, and the like.

I am not sure if I should answer this question. It sounds sexually suggestive.

I am not comfortable answering questions about

0.02.726.774 I llama_perf_sampler_print:    sampling time =       4.79 ms /    33 runs   (    0.15 ms per token,  6893.67 tokens per second)
0.02.726.777 I llama_perf_context_print:        load time =     474.61 ms
0.02.726.778 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.726.780 I llama_perf_context_print:        eval time =    2232.95 ms /    32 runs   (   69.78 ms per token,    14.33 tokens per second)
0.02.726.781 I llama_perf_context_print:       total time =    2251.36 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.549 I build: 4438 (02f04301) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.744 I main: llama backend init
0.00.000.751 I main: load the model and apply lora adapter, if any
0.00.029.882 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.029.897 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.029.905 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.029.906 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.029.909 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.029.910 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.029.911 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.029.912 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.029.912 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.029.913 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.029.918 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.029.919 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.029.919 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.029.920 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.029.920 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.056.712 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.131.698 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.138.198 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.138.206 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.138.207 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.138.207 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.138.208 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.138.209 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.138.210 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.138.212 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.138.212 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.138.213 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.138.215 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.138.216 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.138.220 I llama_model_loader: - type  f32:   37 tensors
0.00.138.220 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.372 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.313 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.874 I llm_load_vocab: special tokens cache size = 5
0.00.268.884 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.902 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.903 I llm_load_print_meta: arch             = gemma
0.00.268.904 I llm_load_print_meta: vocab type       = SPM
0.00.268.904 I llm_load_print_meta: n_vocab          = 256000
0.00.268.905 I llm_load_print_meta: n_merges         = 0
0.00.268.905 I llm_load_print_meta: vocab_only       = 0
0.00.268.905 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.906 I llm_load_print_meta: n_embd           = 2048
0.00.268.907 I llm_load_print_meta: n_layer          = 18
0.00.268.918 I llm_load_print_meta: n_head           = 8
0.00.268.920 I llm_load_print_meta: n_head_kv        = 1
0.00.268.920 I llm_load_print_meta: n_rot            = 256
0.00.268.921 I llm_load_print_meta: n_swa            = 0
0.00.268.921 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.921 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.923 I llm_load_print_meta: n_gqa            = 8
0.00.268.925 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.927 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.927 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.929 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.930 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.930 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.931 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.932 I llm_load_print_meta: n_ff             = 16384
0.00.268.933 I llm_load_print_meta: n_expert         = 0
0.00.268.933 I llm_load_print_meta: n_expert_used    = 0
0.00.268.933 I llm_load_print_meta: causal attn      = 1
0.00.268.933 I llm_load_print_meta: pooling type     = 0
0.00.268.934 I llm_load_print_meta: rope type        = 2
0.00.268.934 I llm_load_print_meta: rope scaling     = linear
0.00.268.936 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.936 I llm_load_print_meta: freq_scale_train = 1
0.00.268.937 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.937 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.938 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.938 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.938 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.939 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.939 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.940 I llm_load_print_meta: model type       = 2B
0.00.268.942 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.942 I llm_load_print_meta: model params     = 2.51 B
0.00.268.943 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.943 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.944 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.944 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.944 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.945 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.945 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.945 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.946 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.946 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.947 I llm_load_print_meta: max token length = 93
0.00.364.846 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.366.140 I llama_new_context_with_model: n_seq_max     = 1
0.00.366.144 I llama_new_context_with_model: n_ctx         = 4096
0.00.366.144 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.366.144 I llama_new_context_with_model: n_batch       = 2048
0.00.366.145 I llama_new_context_with_model: n_ubatch      = 512
0.00.366.145 I llama_new_context_with_model: flash_attn    = 0
0.00.366.147 I llama_new_context_with_model: freq_base     = 10000.0
0.00.366.148 I llama_new_context_with_model: freq_scale    = 1
0.00.366.149 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.366.168 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.380.435 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.380.450 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.380.539 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.382.756 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.382.760 I llama_new_context_with_model: graph nodes  = 601
0.00.382.761 I llama_new_context_with_model: graph splits = 1
0.00.382.764 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.382.765 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.464.150 I main: llama threadpool init, n_threads = 4
0.00.464.164 I 
0.00.464.238 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.464.241 I 
0.00.464.273 I sampler seed: 4252624049
0.00.464.284 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.464.297 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.464.301 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.464.301 I 
 increably.

I am unable to access the requested URL. Please verify that you have the necessary permissions to access the requested resource. [end of text]


0.02.376.757 I llama_perf_sampler_print:    sampling time =       4.13 ms /    29 runs   (    0.14 ms per token,  7025.19 tokens per second)
0.02.376.759 I llama_perf_context_print:        load time =     463.38 ms
0.02.376.760 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.376.762 I llama_perf_context_print:        eval time =    1896.60 ms /    28 runs   (   67.74 ms per token,    14.76 tokens per second)
0.02.376.763 I llama_perf_context_print:       total time =    1912.61 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.557 I build: 4438 (02f04301) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.748 I main: llama backend init
0.00.000.754 I main: load the model and apply lora adapter, if any
0.00.032.244 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.032.256 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.032.264 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.032.270 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.032.271 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.032.274 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.032.274 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.032.275 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.032.276 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.032.276 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.032.276 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.032.281 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.032.282 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.032.283 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.032.283 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.032.284 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.058.126 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.132.524 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.138.741 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.138.747 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.138.749 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.138.750 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.138.750 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.138.752 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.138.753 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.138.756 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.138.756 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.138.757 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.138.758 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.138.759 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.138.763 I llama_model_loader: - type  f32:   37 tensors
0.00.138.764 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.944 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.770 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.282 I llm_load_vocab: special tokens cache size = 5
0.00.267.336 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.354 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.355 I llm_load_print_meta: arch             = gemma
0.00.267.356 I llm_load_print_meta: vocab type       = SPM
0.00.267.356 I llm_load_print_meta: n_vocab          = 256000
0.00.267.357 I llm_load_print_meta: n_merges         = 0
0.00.267.357 I llm_load_print_meta: vocab_only       = 0
0.00.267.358 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.358 I llm_load_print_meta: n_embd           = 2048
0.00.267.358 I llm_load_print_meta: n_layer          = 18
0.00.267.369 I llm_load_print_meta: n_head           = 8
0.00.267.372 I llm_load_print_meta: n_head_kv        = 1
0.00.267.372 I llm_load_print_meta: n_rot            = 256
0.00.267.372 I llm_load_print_meta: n_swa            = 0
0.00.267.373 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.373 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.375 I llm_load_print_meta: n_gqa            = 8
0.00.267.376 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.378 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.379 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.380 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.381 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.381 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.381 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.383 I llm_load_print_meta: n_ff             = 16384
0.00.267.383 I llm_load_print_meta: n_expert         = 0
0.00.267.384 I llm_load_print_meta: n_expert_used    = 0
0.00.267.384 I llm_load_print_meta: causal attn      = 1
0.00.267.384 I llm_load_print_meta: pooling type     = 0
0.00.267.384 I llm_load_print_meta: rope type        = 2
0.00.267.385 I llm_load_print_meta: rope scaling     = linear
0.00.267.386 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.387 I llm_load_print_meta: freq_scale_train = 1
0.00.267.387 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.388 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.388 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.388 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.388 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.389 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.389 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.391 I llm_load_print_meta: model type       = 2B
0.00.267.392 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.392 I llm_load_print_meta: model params     = 2.51 B
0.00.267.393 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.393 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.394 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.394 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.395 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.395 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.395 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.396 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.396 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.396 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.397 I llm_load_print_meta: max token length = 93
0.00.345.286 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.345.291 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.345.292 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.345.292 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.345.293 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.345.294 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.346.560 I llama_new_context_with_model: n_seq_max     = 1
0.00.346.564 I llama_new_context_with_model: n_ctx         = 4096
0.00.346.564 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.346.565 I llama_new_context_with_model: n_batch       = 2048
0.00.346.565 I llama_new_context_with_model: n_ubatch      = 512
0.00.346.566 I llama_new_context_with_model: flash_attn    = 0
0.00.346.568 I llama_new_context_with_model: freq_base     = 10000.0
0.00.346.569 I llama_new_context_with_model: freq_scale    = 1
0.00.346.570 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.346.588 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.361.234 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.361.246 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.361.335 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.542 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.363.549 I llama_new_context_with_model: graph nodes  = 601
0.00.363.549 I llama_new_context_with_model: graph splits = 1
0.00.363.552 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.363.552 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.455.842 I main: llama threadpool init, n_threads = 4
0.00.455.858 I 
0.00.455.936 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.455.940 I 
0.00.455.973 I sampler seed: 662130406
0.00.455.983 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.455.985 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.455.986 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.455.986 I 
 increasities. [end of text]


0.00.748.503 I llama_perf_sampler_print:    sampling time =       0.61 ms /     5 runs   (    0.12 ms per token,  8250.83 tokens per second)
0.00.748.505 I llama_perf_context_print:        load time =     455.06 ms
0.00.748.505 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.748.507 I llama_perf_context_print:        eval time =     289.52 ms /     4 runs   (   72.38 ms per token,    13.82 tokens per second)
0.00.748.507 I llama_perf_context_print:       total time =     292.67 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.541 I build: 4438 (02f04301) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.737 I main: llama backend init
0.00.000.743 I main: load the model and apply lora adapter, if any
0.00.029.911 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.029.921 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.029.929 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.029.935 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.029.936 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.029.939 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.029.939 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.029.940 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.029.941 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.029.941 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.029.942 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.029.945 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.029.946 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.029.947 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.029.947 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.029.948 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.056.772 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.131.332 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.698 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.706 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.706 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.707 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.708 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.709 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.709 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.711 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.712 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.137.713 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.713 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.137.714 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.137.717 I llama_model_loader: - type  f32:   37 tensors
0.00.137.718 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.275 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.215 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.709 I llm_load_vocab: special tokens cache size = 5
0.00.267.841 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.857 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.859 I llm_load_print_meta: arch             = gemma
0.00.267.860 I llm_load_print_meta: vocab type       = SPM
0.00.267.870 I llm_load_print_meta: n_vocab          = 256000
0.00.267.871 I llm_load_print_meta: n_merges         = 0
0.00.267.871 I llm_load_print_meta: vocab_only       = 0
0.00.267.872 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.872 I llm_load_print_meta: n_embd           = 2048
0.00.267.872 I llm_load_print_meta: n_layer          = 18
0.00.267.884 I llm_load_print_meta: n_head           = 8
0.00.267.886 I llm_load_print_meta: n_head_kv        = 1
0.00.267.887 I llm_load_print_meta: n_rot            = 256
0.00.267.887 I llm_load_print_meta: n_swa            = 0
0.00.267.888 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.888 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.891 I llm_load_print_meta: n_gqa            = 8
0.00.267.892 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.894 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.895 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.897 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.898 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.899 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.900 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.901 I llm_load_print_meta: n_ff             = 16384
0.00.267.902 I llm_load_print_meta: n_expert         = 0
0.00.267.902 I llm_load_print_meta: n_expert_used    = 0
0.00.267.902 I llm_load_print_meta: causal attn      = 1
0.00.267.903 I llm_load_print_meta: pooling type     = 0
0.00.267.903 I llm_load_print_meta: rope type        = 2
0.00.267.903 I llm_load_print_meta: rope scaling     = linear
0.00.267.905 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.906 I llm_load_print_meta: freq_scale_train = 1
0.00.267.906 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.906 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.907 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.907 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.907 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.907 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.908 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.911 I llm_load_print_meta: model type       = 2B
0.00.267.912 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.913 I llm_load_print_meta: model params     = 2.51 B
0.00.267.914 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.914 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.915 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.915 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.915 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.916 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.916 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.916 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.917 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.929 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.930 I llm_load_print_meta: max token length = 93
0.00.339.570 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.339.575 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.340.789 I llama_new_context_with_model: n_seq_max     = 1
0.00.340.792 I llama_new_context_with_model: n_ctx         = 4096
0.00.340.793 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.340.793 I llama_new_context_with_model: n_batch       = 2048
0.00.340.794 I llama_new_context_with_model: n_ubatch      = 512
0.00.340.794 I llama_new_context_with_model: flash_attn    = 0
0.00.340.796 I llama_new_context_with_model: freq_base     = 10000.0
0.00.340.797 I llama_new_context_with_model: freq_scale    = 1
0.00.340.798 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.340.822 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.354.763 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.354.775 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.354.865 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.356.722 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.356.727 I llama_new_context_with_model: graph nodes  = 601
0.00.356.728 I llama_new_context_with_model: graph splits = 1
0.00.356.731 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.356.731 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.446.999 I main: llama threadpool init, n_threads = 4
0.00.447.012 I 
0.00.447.088 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.447.091 I 
0.00.447.124 I sampler seed: 2274401729
0.00.447.135 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.447.138 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.447.139 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.447.139 I 
 increably. 

I am unable to generate a response that includes sexually suggestive or inappropriate content. [end of text]


0.02.046.674 I llama_perf_sampler_print:    sampling time =       3.52 ms /    22 runs   (    0.16 ms per token,  6258.89 tokens per second)
0.02.046.676 I llama_perf_context_print:        load time =     446.23 ms
0.02.046.678 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.046.679 I llama_perf_context_print:        eval time =    1586.11 ms /    21 runs   (   75.53 ms per token,    13.24 tokens per second)
0.02.046.680 I llama_perf_context_print:       total time =    1599.68 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.576s
user	0m27.244s
sys	0m9.318s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4438 (02f04301)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40357.93 ms
main:    total time = 40357.93 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.540 I build: 4438 (02f04301) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.754 I main: llama backend init
0.00.000.761 I main: load the model and apply lora adapter, if any
0.00.030.104 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.030.114 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.030.123 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.129 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.130 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.133 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.134 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.134 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.135 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.135 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.136 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.140 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.140 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.141 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.141 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.057.027 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.131.120 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.784 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.790 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.791 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.792 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.793 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.794 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.795 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.797 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.797 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.137.799 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.137.800 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.800 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.137.801 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.137.804 I llama_model_loader: - type  f32:   37 tensors
0.00.137.804 I llama_model_loader: - type q4_K:  108 tensors
0.00.137.806 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.015 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.529 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.027 I llm_load_vocab: special tokens cache size = 5
0.00.264.320 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.336 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.338 I llm_load_print_meta: arch             = gemma
0.00.264.338 I llm_load_print_meta: vocab type       = SPM
0.00.264.338 I llm_load_print_meta: n_vocab          = 256000
0.00.264.339 I llm_load_print_meta: n_merges         = 0
0.00.264.339 I llm_load_print_meta: vocab_only       = 0
0.00.264.340 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.340 I llm_load_print_meta: n_embd           = 2048
0.00.264.340 I llm_load_print_meta: n_layer          = 18
0.00.264.352 I llm_load_print_meta: n_head           = 8
0.00.264.354 I llm_load_print_meta: n_head_kv        = 1
0.00.264.354 I llm_load_print_meta: n_rot            = 256
0.00.264.354 I llm_load_print_meta: n_swa            = 0
0.00.264.355 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.355 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.357 I llm_load_print_meta: n_gqa            = 8
0.00.264.358 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.360 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.360 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.362 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.362 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.362 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.362 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.364 I llm_load_print_meta: n_ff             = 16384
0.00.264.364 I llm_load_print_meta: n_expert         = 0
0.00.264.365 I llm_load_print_meta: n_expert_used    = 0
0.00.264.365 I llm_load_print_meta: causal attn      = 1
0.00.264.365 I llm_load_print_meta: pooling type     = 0
0.00.264.365 I llm_load_print_meta: rope type        = 2
0.00.264.366 I llm_load_print_meta: rope scaling     = linear
0.00.264.367 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.368 I llm_load_print_meta: freq_scale_train = 1
0.00.264.368 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.368 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.369 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.369 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.369 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.369 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.370 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.371 I llm_load_print_meta: model type       = 2B
0.00.264.373 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.264.373 I llm_load_print_meta: model params     = 2.51 B
0.00.264.374 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.264.375 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.375 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.375 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.376 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.376 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.376 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.377 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.377 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.377 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.378 I llm_load_print_meta: max token length = 93
0.00.325.236 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.325.245 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.325.246 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.325.247 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.325.247 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.325.248 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.326.625 I llama_new_context_with_model: n_seq_max     = 1
0.00.326.629 I llama_new_context_with_model: n_ctx         = 4096
0.00.326.629 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.326.629 I llama_new_context_with_model: n_batch       = 2048
0.00.326.630 I llama_new_context_with_model: n_ubatch      = 512
0.00.326.630 I llama_new_context_with_model: flash_attn    = 0
0.00.326.632 I llama_new_context_with_model: freq_base     = 10000.0
0.00.326.633 I llama_new_context_with_model: freq_scale    = 1
0.00.326.634 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.326.653 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.341.500 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.341.513 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.341.618 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.343.870 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.343.875 I llama_new_context_with_model: graph nodes  = 601
0.00.343.875 I llama_new_context_with_model: graph splits = 1
0.00.343.878 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.343.879 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.423.121 I main: llama threadpool init, n_threads = 4
0.00.423.135 I 
0.00.423.226 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.423.230 I 
0.00.423.282 I sampler seed: 2818718468
0.00.423.294 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.423.307 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.423.311 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.423.311 I 
 seconally, but I will patiently respond. [end of text]


0.00.916.005 I llama_perf_sampler_print:    sampling time =       1.55 ms /    11 runs   (    0.14 ms per token,  7078.51 tokens per second)
0.00.916.007 I llama_perf_context_print:        load time =     422.34 ms
0.00.916.008 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.916.010 I llama_perf_context_print:        eval time =     486.60 ms /    10 runs   (   48.66 ms per token,    20.55 tokens per second)
0.00.916.010 I llama_perf_context_print:       total time =     492.89 ms /    11 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4438 (02f04301)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40199.69 ms
main:    total time = 40199.69 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.535 I build: 4438 (02f04301) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.729 I main: llama backend init
0.00.000.736 I main: load the model and apply lora adapter, if any
0.00.029.990 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.030.006 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.014 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.015 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.018 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.018 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.019 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.019 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.020 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.020 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.024 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.024 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.025 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.026 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.056.369 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.130.457 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.136.737 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.136.743 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.136.744 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.136.745 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.136.746 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.136.747 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.136.747 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.136.750 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.136.750 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.136.751 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.136.753 I llama_model_loader: - type  f32:   37 tensors
0.00.136.754 I llama_model_loader: - type q4_K:  108 tensors
0.00.136.754 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.606 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.303 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.774 I llm_load_vocab: special tokens cache size = 5
0.00.266.126 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.143 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.145 I llm_load_print_meta: arch             = gemma
0.00.266.145 I llm_load_print_meta: vocab type       = SPM
0.00.266.146 I llm_load_print_meta: n_vocab          = 256000
0.00.266.146 I llm_load_print_meta: n_merges         = 0
0.00.266.146 I llm_load_print_meta: vocab_only       = 0
0.00.266.147 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.147 I llm_load_print_meta: n_embd           = 2048
0.00.266.147 I llm_load_print_meta: n_layer          = 18
0.00.266.159 I llm_load_print_meta: n_head           = 8
0.00.266.161 I llm_load_print_meta: n_head_kv        = 1
0.00.266.161 I llm_load_print_meta: n_rot            = 256
0.00.266.161 I llm_load_print_meta: n_swa            = 0
0.00.266.161 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.162 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.163 I llm_load_print_meta: n_gqa            = 8
0.00.266.165 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.167 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.168 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.170 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.170 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.170 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.171 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.172 I llm_load_print_meta: n_ff             = 16384
0.00.266.173 I llm_load_print_meta: n_expert         = 0
0.00.266.173 I llm_load_print_meta: n_expert_used    = 0
0.00.266.173 I llm_load_print_meta: causal attn      = 1
0.00.266.173 I llm_load_print_meta: pooling type     = 0
0.00.266.174 I llm_load_print_meta: rope type        = 2
0.00.266.174 I llm_load_print_meta: rope scaling     = linear
0.00.266.175 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.176 I llm_load_print_meta: freq_scale_train = 1
0.00.266.176 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.177 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.177 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.177 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.178 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.178 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.178 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.180 I llm_load_print_meta: model type       = 2B
0.00.266.181 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.266.182 I llm_load_print_meta: model params     = 2.51 B
0.00.266.183 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.266.183 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.183 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.184 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.184 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.185 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.185 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.185 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.186 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.186 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.186 I llm_load_print_meta: max token length = 93
0.00.324.430 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.325.672 I llama_new_context_with_model: n_seq_max     = 1
0.00.325.676 I llama_new_context_with_model: n_ctx         = 4096
0.00.325.676 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.325.677 I llama_new_context_with_model: n_batch       = 2048
0.00.325.677 I llama_new_context_with_model: n_ubatch      = 512
0.00.325.678 I llama_new_context_with_model: flash_attn    = 0
0.00.325.679 I llama_new_context_with_model: freq_base     = 10000.0
0.00.325.680 I llama_new_context_with_model: freq_scale    = 1
0.00.325.681 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.325.704 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.339.756 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.339.770 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.339.859 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.342.064 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.342.071 I llama_new_context_with_model: graph nodes  = 601
0.00.342.071 I llama_new_context_with_model: graph splits = 1
0.00.342.074 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.342.074 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.418.783 I main: llama threadpool init, n_threads = 4
0.00.418.796 I 
0.00.418.872 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.418.876 I 
0.00.418.911 I sampler seed: 4098294394
0.00.418.923 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.418.925 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.418.926 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.418.926 I 
 seconary of a group of bacteria or archaea, capable of fixing atmospheric nitrogen into a usable form for the host organism.

**Answer:** Nitrogen fixer [end of text]


0.01.969.436 I llama_perf_sampler_print:    sampling time =       4.90 ms /    33 runs   (    0.15 ms per token,  6730.57 tokens per second)
0.01.969.438 I llama_perf_context_print:        load time =     418.03 ms
0.01.969.439 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.969.440 I llama_perf_context_print:        eval time =    1532.56 ms /    32 runs   (   47.89 ms per token,    20.88 tokens per second)
0.01.969.441 I llama_perf_context_print:       total time =    1550.66 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.325s
user	10m19.474s
sys	0m6.853s
