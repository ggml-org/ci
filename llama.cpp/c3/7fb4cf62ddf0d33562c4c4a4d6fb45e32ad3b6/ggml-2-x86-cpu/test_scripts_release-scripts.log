+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.553 I build: 4294 (c37fb4cf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.767 I main: llama backend init
0.00.000.774 I main: load the model and apply lora adapter, if any
0.00.021.640 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.653 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.661 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.671 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.672 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.678 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.679 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.680 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.681 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.681 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.683 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.694 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.698 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.699 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.700 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.701 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.419 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.509 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.361 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.368 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.368 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.369 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.370 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.371 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.371 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.374 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.374 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.375 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.377 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.377 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.381 I llama_model_loader: - type  f32:   37 tensors
0.00.132.381 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.594 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.246 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.950 I llm_load_vocab: special tokens cache size = 5
0.00.282.209 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.229 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.230 I llm_load_print_meta: arch             = gemma
0.00.282.230 I llm_load_print_meta: vocab type       = SPM
0.00.282.232 I llm_load_print_meta: n_vocab          = 256000
0.00.282.232 I llm_load_print_meta: n_merges         = 0
0.00.282.233 I llm_load_print_meta: vocab_only       = 0
0.00.282.233 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.234 I llm_load_print_meta: n_embd           = 2048
0.00.282.234 I llm_load_print_meta: n_layer          = 18
0.00.282.246 I llm_load_print_meta: n_head           = 8
0.00.282.247 I llm_load_print_meta: n_head_kv        = 1
0.00.282.247 I llm_load_print_meta: n_rot            = 256
0.00.282.247 I llm_load_print_meta: n_swa            = 0
0.00.282.248 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.248 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.249 I llm_load_print_meta: n_gqa            = 8
0.00.282.250 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.251 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.252 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.253 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.254 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.254 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.254 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.255 I llm_load_print_meta: n_ff             = 16384
0.00.282.255 I llm_load_print_meta: n_expert         = 0
0.00.282.256 I llm_load_print_meta: n_expert_used    = 0
0.00.282.256 I llm_load_print_meta: causal attn      = 1
0.00.282.256 I llm_load_print_meta: pooling type     = 0
0.00.282.257 I llm_load_print_meta: rope type        = 2
0.00.282.257 I llm_load_print_meta: rope scaling     = linear
0.00.282.258 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.259 I llm_load_print_meta: freq_scale_train = 1
0.00.282.260 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.260 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.260 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.260 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.261 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.261 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.261 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.261 I llm_load_print_meta: model type       = 2B
0.00.282.262 I llm_load_print_meta: model ftype      = Q8_0
0.00.282.263 I llm_load_print_meta: model params     = 2.51 B
0.00.282.264 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.282.264 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.265 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.265 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.265 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.266 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.266 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.266 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.267 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.267 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.267 I llm_load_print_meta: max token length = 93
0.00.384.075 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.384.084 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.384.085 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.384.085 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.384.086 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.384.086 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.389.536 I llama_new_context_with_model: n_seq_max     = 1
0.00.389.545 I llama_new_context_with_model: n_ctx         = 4096
0.00.389.546 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.389.546 I llama_new_context_with_model: n_batch       = 2048
0.00.389.546 I llama_new_context_with_model: n_ubatch      = 512
0.00.389.547 I llama_new_context_with_model: flash_attn    = 0
0.00.389.551 I llama_new_context_with_model: freq_base     = 10000.0
0.00.389.552 I llama_new_context_with_model: freq_scale    = 1
0.00.389.553 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.405.058 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.405.073 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.405.168 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.406.457 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.406.462 I llama_new_context_with_model: graph nodes  = 601
0.00.406.462 I llama_new_context_with_model: graph splits = 1
0.00.406.464 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.494.403 I main: llama threadpool init, n_threads = 4
0.00.494.420 I 
0.00.494.504 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.494.508 I 
0.00.494.558 I sampler seed: 157045415
0.00.494.569 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.494.581 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.494.586 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.494.586 I 
 increasities, and other forms of flattery in the workplace.

While flattery can be a powerful motivator and tool for social connection, it can also create a

0.02.780.004 I llama_perf_sampler_print:    sampling time =       5.66 ms /    33 runs   (    0.17 ms per token,  5827.30 tokens per second)
0.02.780.007 I llama_perf_context_print:        load time =     493.61 ms
0.02.780.008 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.780.010 I llama_perf_context_print:        eval time =    2265.97 ms /    32 runs   (   70.81 ms per token,    14.12 tokens per second)
0.02.780.011 I llama_perf_context_print:       total time =    2285.61 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.568 I build: 4294 (c37fb4cf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.763 I main: llama backend init
0.00.000.770 I main: load the model and apply lora adapter, if any
0.00.021.296 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.312 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.319 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.320 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.326 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.327 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.328 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.329 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.330 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.330 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.335 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.335 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.337 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.337 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.338 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.923 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.885 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.760 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.768 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.769 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.769 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.770 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.771 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.772 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.774 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.775 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.777 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.777 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.778 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.782 I llama_model_loader: - type  f32:   37 tensors
0.00.131.783 I llama_model_loader: - type q8_0:  127 tensors
0.00.212.920 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.338 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.964 I llm_load_vocab: special tokens cache size = 5
0.00.280.761 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.778 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.779 I llm_load_print_meta: arch             = gemma
0.00.280.780 I llm_load_print_meta: vocab type       = SPM
0.00.280.780 I llm_load_print_meta: n_vocab          = 256000
0.00.280.780 I llm_load_print_meta: n_merges         = 0
0.00.280.781 I llm_load_print_meta: vocab_only       = 0
0.00.280.781 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.781 I llm_load_print_meta: n_embd           = 2048
0.00.280.781 I llm_load_print_meta: n_layer          = 18
0.00.280.794 I llm_load_print_meta: n_head           = 8
0.00.280.795 I llm_load_print_meta: n_head_kv        = 1
0.00.280.795 I llm_load_print_meta: n_rot            = 256
0.00.280.795 I llm_load_print_meta: n_swa            = 0
0.00.280.796 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.796 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.797 I llm_load_print_meta: n_gqa            = 8
0.00.280.798 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.799 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.800 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.801 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.802 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.802 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.802 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.803 I llm_load_print_meta: n_ff             = 16384
0.00.280.804 I llm_load_print_meta: n_expert         = 0
0.00.280.804 I llm_load_print_meta: n_expert_used    = 0
0.00.280.804 I llm_load_print_meta: causal attn      = 1
0.00.280.804 I llm_load_print_meta: pooling type     = 0
0.00.280.805 I llm_load_print_meta: rope type        = 2
0.00.280.805 I llm_load_print_meta: rope scaling     = linear
0.00.280.806 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.807 I llm_load_print_meta: freq_scale_train = 1
0.00.280.807 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.808 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.808 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.808 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.809 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.809 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.809 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.809 I llm_load_print_meta: model type       = 2B
0.00.280.810 I llm_load_print_meta: model ftype      = Q8_0
0.00.280.811 I llm_load_print_meta: model params     = 2.51 B
0.00.280.812 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.280.812 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.812 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.813 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.813 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.813 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.814 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.814 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.814 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.815 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.815 I llm_load_print_meta: max token length = 93
0.00.373.974 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.379.409 I llama_new_context_with_model: n_seq_max     = 1
0.00.379.416 I llama_new_context_with_model: n_ctx         = 4096
0.00.379.417 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.379.417 I llama_new_context_with_model: n_batch       = 2048
0.00.379.417 I llama_new_context_with_model: n_ubatch      = 512
0.00.379.418 I llama_new_context_with_model: flash_attn    = 0
0.00.379.421 I llama_new_context_with_model: freq_base     = 10000.0
0.00.379.422 I llama_new_context_with_model: freq_scale    = 1
0.00.379.423 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.394.414 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.394.429 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.394.520 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.395.750 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.395.756 I llama_new_context_with_model: graph nodes  = 601
0.00.395.757 I llama_new_context_with_model: graph splits = 1
0.00.395.759 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.482.237 I main: llama threadpool init, n_threads = 4
0.00.482.255 I 
0.00.482.353 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.482.356 I 
0.00.482.403 I sampler seed: 1140837973
0.00.482.415 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.482.418 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.482.419 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.482.421 I 
 increasities, and societal pressures.

**Discuss the impact of these factors on individuals and society.**

**Impact on Individuals:**

- **Increased stress and

0.02.680.772 I llama_perf_sampler_print:    sampling time =       5.70 ms /    33 runs   (    0.17 ms per token,  5786.43 tokens per second)
0.02.680.774 I llama_perf_context_print:        load time =     481.45 ms
0.02.680.775 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.680.777 I llama_perf_context_print:        eval time =    2178.75 ms /    32 runs   (   68.09 ms per token,    14.69 tokens per second)
0.02.680.777 I llama_perf_context_print:       total time =    2198.54 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.562 I build: 4294 (c37fb4cf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.801 I main: llama backend init
0.00.000.809 I main: load the model and apply lora adapter, if any
0.00.021.375 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.390 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.399 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.405 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.406 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.410 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.411 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.412 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.412 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.413 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.413 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.419 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.419 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.420 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.420 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.421 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.390 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.874 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.753 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.759 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.760 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.761 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.762 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.763 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.764 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.768 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.769 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.770 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.771 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.772 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.776 I llama_model_loader: - type  f32:   37 tensors
0.00.131.777 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.727 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.921 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.611 I llm_load_vocab: special tokens cache size = 5
0.00.277.416 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.434 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.435 I llm_load_print_meta: arch             = gemma
0.00.277.435 I llm_load_print_meta: vocab type       = SPM
0.00.277.436 I llm_load_print_meta: n_vocab          = 256000
0.00.277.437 I llm_load_print_meta: n_merges         = 0
0.00.277.437 I llm_load_print_meta: vocab_only       = 0
0.00.277.438 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.438 I llm_load_print_meta: n_embd           = 2048
0.00.277.438 I llm_load_print_meta: n_layer          = 18
0.00.277.450 I llm_load_print_meta: n_head           = 8
0.00.277.451 I llm_load_print_meta: n_head_kv        = 1
0.00.277.452 I llm_load_print_meta: n_rot            = 256
0.00.277.452 I llm_load_print_meta: n_swa            = 0
0.00.277.452 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.453 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.453 I llm_load_print_meta: n_gqa            = 8
0.00.277.454 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.455 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.456 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.458 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.458 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.458 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.459 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.459 I llm_load_print_meta: n_ff             = 16384
0.00.277.460 I llm_load_print_meta: n_expert         = 0
0.00.277.460 I llm_load_print_meta: n_expert_used    = 0
0.00.277.460 I llm_load_print_meta: causal attn      = 1
0.00.277.460 I llm_load_print_meta: pooling type     = 0
0.00.277.461 I llm_load_print_meta: rope type        = 2
0.00.277.461 I llm_load_print_meta: rope scaling     = linear
0.00.277.463 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.464 I llm_load_print_meta: freq_scale_train = 1
0.00.277.464 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.464 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.465 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.465 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.465 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.465 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.466 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.466 I llm_load_print_meta: model type       = 2B
0.00.277.466 I llm_load_print_meta: model ftype      = Q8_0
0.00.277.467 I llm_load_print_meta: model params     = 2.51 B
0.00.277.468 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.277.468 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.469 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.469 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.470 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.470 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.470 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.470 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.471 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.471 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.471 I llm_load_print_meta: max token length = 93
0.00.353.496 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.353.504 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.353.505 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.353.505 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.353.506 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.353.506 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.358.675 I llama_new_context_with_model: n_seq_max     = 1
0.00.358.682 I llama_new_context_with_model: n_ctx         = 4096
0.00.358.683 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.358.683 I llama_new_context_with_model: n_batch       = 2048
0.00.358.684 I llama_new_context_with_model: n_ubatch      = 512
0.00.358.684 I llama_new_context_with_model: flash_attn    = 0
0.00.358.686 I llama_new_context_with_model: freq_base     = 10000.0
0.00.358.687 I llama_new_context_with_model: freq_scale    = 1
0.00.358.689 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.373.677 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.373.691 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.373.782 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.375.121 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.375.127 I llama_new_context_with_model: graph nodes  = 601
0.00.375.127 I llama_new_context_with_model: graph splits = 1
0.00.375.130 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.462.547 I main: llama threadpool init, n_threads = 4
0.00.462.582 I 
0.00.462.668 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.462.672 I 
0.00.462.722 I sampler seed: 113190380
0.00.462.733 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.462.740 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.462.743 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.462.744 I 
 maneuvred

I cannot find any information about this term. Could you please provide some context or further information about it? [end of text]


0.02.315.758 I llama_perf_sampler_print:    sampling time =       4.61 ms /    27 runs   (    0.17 ms per token,  5855.56 tokens per second)
0.02.315.761 I llama_perf_context_print:        load time =     461.72 ms
0.02.315.762 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.315.763 I llama_perf_context_print:        eval time =    1836.26 ms /    26 runs   (   70.63 ms per token,    14.16 tokens per second)
0.02.315.764 I llama_perf_context_print:       total time =    1853.22 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.534 I build: 4294 (c37fb4cf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.798 I main: llama backend init
0.00.000.807 I main: load the model and apply lora adapter, if any
0.00.021.221 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.232 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.241 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.250 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.251 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.255 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.256 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.257 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.258 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.258 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.259 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.263 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.264 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.265 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.265 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.266 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.420 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.119 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.004 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.013 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.013 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.014 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.015 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.016 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.017 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.020 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.022 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.023 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.024 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.025 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.028 I llama_model_loader: - type  f32:   37 tensors
0.00.132.029 I llama_model_loader: - type q8_0:  127 tensors
0.00.224.080 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.270.513 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.271.103 I llm_load_vocab: special tokens cache size = 5
0.00.291.954 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.291.971 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.291.971 I llm_load_print_meta: arch             = gemma
0.00.291.972 I llm_load_print_meta: vocab type       = SPM
0.00.291.972 I llm_load_print_meta: n_vocab          = 256000
0.00.291.973 I llm_load_print_meta: n_merges         = 0
0.00.291.973 I llm_load_print_meta: vocab_only       = 0
0.00.291.973 I llm_load_print_meta: n_ctx_train      = 8192
0.00.291.974 I llm_load_print_meta: n_embd           = 2048
0.00.291.974 I llm_load_print_meta: n_layer          = 18
0.00.291.987 I llm_load_print_meta: n_head           = 8
0.00.291.988 I llm_load_print_meta: n_head_kv        = 1
0.00.291.988 I llm_load_print_meta: n_rot            = 256
0.00.291.988 I llm_load_print_meta: n_swa            = 0
0.00.291.989 I llm_load_print_meta: n_embd_head_k    = 256
0.00.291.989 I llm_load_print_meta: n_embd_head_v    = 256
0.00.291.990 I llm_load_print_meta: n_gqa            = 8
0.00.291.991 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.291.992 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.291.993 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.291.994 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.291.995 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.291.995 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.291.995 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.291.996 I llm_load_print_meta: n_ff             = 16384
0.00.291.996 I llm_load_print_meta: n_expert         = 0
0.00.291.997 I llm_load_print_meta: n_expert_used    = 0
0.00.291.997 I llm_load_print_meta: causal attn      = 1
0.00.291.997 I llm_load_print_meta: pooling type     = 0
0.00.291.997 I llm_load_print_meta: rope type        = 2
0.00.291.998 I llm_load_print_meta: rope scaling     = linear
0.00.291.999 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.292.000 I llm_load_print_meta: freq_scale_train = 1
0.00.292.000 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.292.000 I llm_load_print_meta: rope_finetuned   = unknown
0.00.292.001 I llm_load_print_meta: ssm_d_conv       = 0
0.00.292.001 I llm_load_print_meta: ssm_d_inner      = 0
0.00.292.001 I llm_load_print_meta: ssm_d_state      = 0
0.00.292.001 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.292.001 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.292.002 I llm_load_print_meta: model type       = 2B
0.00.292.002 I llm_load_print_meta: model ftype      = Q8_0
0.00.292.003 I llm_load_print_meta: model params     = 2.51 B
0.00.292.004 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.292.004 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.292.005 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.292.006 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.292.006 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.292.006 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.292.006 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.292.007 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.292.007 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.292.008 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.292.008 I llm_load_print_meta: max token length = 93
0.00.364.880 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.364.889 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.370.094 I llama_new_context_with_model: n_seq_max     = 1
0.00.370.100 I llama_new_context_with_model: n_ctx         = 4096
0.00.370.101 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.370.101 I llama_new_context_with_model: n_batch       = 2048
0.00.370.102 I llama_new_context_with_model: n_ubatch      = 512
0.00.370.103 I llama_new_context_with_model: flash_attn    = 0
0.00.370.106 I llama_new_context_with_model: freq_base     = 10000.0
0.00.370.107 I llama_new_context_with_model: freq_scale    = 1
0.00.370.108 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.385.919 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.385.933 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.386.035 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.387.376 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.387.384 I llama_new_context_with_model: graph nodes  = 601
0.00.387.384 I llama_new_context_with_model: graph splits = 1
0.00.387.386 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.477.452 I main: llama threadpool init, n_threads = 4
0.00.477.471 I 
0.00.477.547 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.477.551 I 
0.00.477.595 I sampler seed: 2332482870
0.00.477.606 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.477.611 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.477.612 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.477.612 I 
 increasities in the form of a rhyming couplet.

A love that's fierce, a passion true,
A bond that's strong, forever

0.02.883.777 I llama_perf_sampler_print:    sampling time =       5.40 ms /    33 runs   (    0.16 ms per token,  6109.98 tokens per second)
0.02.883.780 I llama_perf_context_print:        load time =     476.63 ms
0.02.883.781 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.883.783 I llama_perf_context_print:        eval time =    2386.70 ms /    32 runs   (   74.58 ms per token,    13.41 tokens per second)
0.02.883.783 I llama_perf_context_print:       total time =    2406.33 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.499s
user	0m37.924s
sys	0m9.517s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4294 (c37fb4cf)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40219.27 ms
main:    total time = 40219.27 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.524 I build: 4294 (c37fb4cf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.719 I main: llama backend init
0.00.000.725 I main: load the model and apply lora adapter, if any
0.00.021.399 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.409 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.418 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.425 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.429 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.433 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.434 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.435 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.436 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.437 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.437 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.441 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.441 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.442 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.442 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.442 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.035 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.446 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.344 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.352 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.353 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.354 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.355 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.356 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.357 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.361 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.362 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.363 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.365 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.366 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.371 I llama_model_loader: - type  f32:   37 tensors
0.00.131.372 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.373 I llama_model_loader: - type q6_K:   19 tensors
0.00.211.465 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.216 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.858 I llm_load_vocab: special tokens cache size = 5
0.00.278.739 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.759 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.760 I llm_load_print_meta: arch             = gemma
0.00.278.760 I llm_load_print_meta: vocab type       = SPM
0.00.278.761 I llm_load_print_meta: n_vocab          = 256000
0.00.278.761 I llm_load_print_meta: n_merges         = 0
0.00.278.762 I llm_load_print_meta: vocab_only       = 0
0.00.278.762 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.762 I llm_load_print_meta: n_embd           = 2048
0.00.278.763 I llm_load_print_meta: n_layer          = 18
0.00.278.774 I llm_load_print_meta: n_head           = 8
0.00.278.775 I llm_load_print_meta: n_head_kv        = 1
0.00.278.776 I llm_load_print_meta: n_rot            = 256
0.00.278.776 I llm_load_print_meta: n_swa            = 0
0.00.278.776 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.777 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.778 I llm_load_print_meta: n_gqa            = 8
0.00.278.779 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.779 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.780 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.782 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.782 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.782 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.782 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.783 I llm_load_print_meta: n_ff             = 16384
0.00.278.784 I llm_load_print_meta: n_expert         = 0
0.00.278.784 I llm_load_print_meta: n_expert_used    = 0
0.00.278.784 I llm_load_print_meta: causal attn      = 1
0.00.278.784 I llm_load_print_meta: pooling type     = 0
0.00.278.785 I llm_load_print_meta: rope type        = 2
0.00.278.785 I llm_load_print_meta: rope scaling     = linear
0.00.278.786 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.787 I llm_load_print_meta: freq_scale_train = 1
0.00.278.787 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.787 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.788 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.788 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.788 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.788 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.789 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.789 I llm_load_print_meta: model type       = 2B
0.00.278.789 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.278.790 I llm_load_print_meta: model params     = 2.51 B
0.00.278.791 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.278.791 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.792 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.792 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.793 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.793 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.793 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.793 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.794 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.794 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.794 I llm_load_print_meta: max token length = 93
0.00.338.097 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.338.105 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.338.106 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.338.107 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.338.107 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.338.108 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.343.611 I llama_new_context_with_model: n_seq_max     = 1
0.00.343.618 I llama_new_context_with_model: n_ctx         = 4096
0.00.343.619 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.343.619 I llama_new_context_with_model: n_batch       = 2048
0.00.343.619 I llama_new_context_with_model: n_ubatch      = 512
0.00.343.620 I llama_new_context_with_model: flash_attn    = 0
0.00.343.622 I llama_new_context_with_model: freq_base     = 10000.0
0.00.343.623 I llama_new_context_with_model: freq_scale    = 1
0.00.343.624 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.358.337 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.358.352 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.358.445 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.359.696 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.359.702 I llama_new_context_with_model: graph nodes  = 601
0.00.359.703 I llama_new_context_with_model: graph splits = 1
0.00.359.705 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.435.984 I main: llama threadpool init, n_threads = 4
0.00.436.002 I 
0.00.436.079 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.436.083 I 
0.00.436.127 I sampler seed: 655440968
0.00.436.137 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.436.142 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.436.142 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.436.143 I 
 squaRED text, the following text appears:

"The text is surrounded by a frame, and the text itself is enclosed within quotation marks."

Provide an

0.02.050.729 I llama_perf_sampler_print:    sampling time =       5.74 ms /    33 runs   (    0.17 ms per token,  5748.13 tokens per second)
0.02.050.733 I llama_perf_context_print:        load time =     435.24 ms
0.02.050.735 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.050.737 I llama_perf_context_print:        eval time =    1594.06 ms /    32 runs   (   49.81 ms per token,    20.07 tokens per second)
0.02.050.738 I llama_perf_context_print:       total time =    1614.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4294 (c37fb4cf)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40206.13 ms
main:    total time = 40206.13 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.558 I build: 4294 (c37fb4cf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.750 I main: llama backend init
0.00.000.756 I main: load the model and apply lora adapter, if any
0.00.021.284 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.300 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.311 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.314 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.318 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.319 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.319 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.320 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.321 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.322 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.325 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.325 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.326 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.326 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.327 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.794 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.351 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.202 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.210 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.210 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.211 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.212 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.212 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.213 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.216 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.217 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.220 I llama_model_loader: - type  f32:   37 tensors
0.00.131.222 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.222 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.807 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.922 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.518 I llm_load_vocab: special tokens cache size = 5
0.00.265.250 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.268 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.269 I llm_load_print_meta: arch             = gemma
0.00.265.269 I llm_load_print_meta: vocab type       = SPM
0.00.265.270 I llm_load_print_meta: n_vocab          = 256000
0.00.265.270 I llm_load_print_meta: n_merges         = 0
0.00.265.270 I llm_load_print_meta: vocab_only       = 0
0.00.265.271 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.271 I llm_load_print_meta: n_embd           = 2048
0.00.265.272 I llm_load_print_meta: n_layer          = 18
0.00.265.283 I llm_load_print_meta: n_head           = 8
0.00.265.284 I llm_load_print_meta: n_head_kv        = 1
0.00.265.284 I llm_load_print_meta: n_rot            = 256
0.00.265.284 I llm_load_print_meta: n_swa            = 0
0.00.265.284 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.285 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.286 I llm_load_print_meta: n_gqa            = 8
0.00.265.287 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.288 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.288 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.290 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.290 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.290 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.291 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.292 I llm_load_print_meta: n_ff             = 16384
0.00.265.292 I llm_load_print_meta: n_expert         = 0
0.00.265.292 I llm_load_print_meta: n_expert_used    = 0
0.00.265.292 I llm_load_print_meta: causal attn      = 1
0.00.265.293 I llm_load_print_meta: pooling type     = 0
0.00.265.293 I llm_load_print_meta: rope type        = 2
0.00.265.293 I llm_load_print_meta: rope scaling     = linear
0.00.265.295 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.295 I llm_load_print_meta: freq_scale_train = 1
0.00.265.296 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.296 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.296 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.297 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.297 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.297 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.297 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.298 I llm_load_print_meta: model type       = 2B
0.00.265.298 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.299 I llm_load_print_meta: model params     = 2.51 B
0.00.265.300 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.300 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.301 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.301 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.301 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.302 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.302 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.302 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.303 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.303 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.303 I llm_load_print_meta: max token length = 93
0.00.322.262 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.328.313 I llama_new_context_with_model: n_seq_max     = 1
0.00.328.320 I llama_new_context_with_model: n_ctx         = 4096
0.00.328.320 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.328.321 I llama_new_context_with_model: n_batch       = 2048
0.00.328.321 I llama_new_context_with_model: n_ubatch      = 512
0.00.328.322 I llama_new_context_with_model: flash_attn    = 0
0.00.328.325 I llama_new_context_with_model: freq_base     = 10000.0
0.00.328.325 I llama_new_context_with_model: freq_scale    = 1
0.00.328.326 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.342.596 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.342.610 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.342.700 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.343.951 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.343.958 I llama_new_context_with_model: graph nodes  = 601
0.00.343.958 I llama_new_context_with_model: graph splits = 1
0.00.343.960 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.418.521 I main: llama threadpool init, n_threads = 4
0.00.418.537 I 
0.00.418.614 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.418.618 I 
0.00.418.662 I sampler seed: 1738643531
0.00.418.675 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.418.681 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.418.682 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.418.683 I 
 seconal.

**Answer:** Secondary.

**Explanation:** Secondary branching occurs when a plant produces new branches from the existing main stem. This occurs as a

0.02.010.058 I llama_perf_sampler_print:    sampling time =       5.85 ms /    33 runs   (    0.18 ms per token,  5640.06 tokens per second)
0.02.010.061 I llama_perf_context_print:        load time =     417.75 ms
0.02.010.062 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.010.063 I llama_perf_context_print:        eval time =    1570.53 ms /    32 runs   (   49.08 ms per token,    20.38 tokens per second)
0.02.010.064 I llama_perf_context_print:       total time =    1591.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.318s
user	10m24.804s
sys	0m6.864s
