+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.668 I build: 3971 (c39665f5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.866 I main: llama backend init
0.00.002.803 I main: load the model and apply lora adapter, if any
0.00.025.045 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.256 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.354 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.367 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.368 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.374 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.375 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.376 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.377 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.379 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.380 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.388 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.389 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.390 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.391 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.406 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.911 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.598 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.851 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.858 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.859 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.860 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.861 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.863 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.863 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.867 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.868 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.869 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.870 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.871 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.879 I llama_model_loader: - type  f32:   37 tensors
0.00.269.884 I llama_model_loader: - type q8_0:  127 tensors
0.00.443.236 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.502.010 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.502.897 I llm_load_vocab: special tokens cache size = 5
0.00.597.771 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.597.845 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.597.849 I llm_load_print_meta: arch             = gemma
0.00.597.850 I llm_load_print_meta: vocab type       = SPM
0.00.597.851 I llm_load_print_meta: n_vocab          = 256000
0.00.597.853 I llm_load_print_meta: n_merges         = 0
0.00.597.853 I llm_load_print_meta: vocab_only       = 0
0.00.597.854 I llm_load_print_meta: n_ctx_train      = 8192
0.00.597.854 I llm_load_print_meta: n_embd           = 2048
0.00.597.855 I llm_load_print_meta: n_layer          = 18
0.00.597.917 I llm_load_print_meta: n_head           = 8
0.00.597.927 I llm_load_print_meta: n_head_kv        = 1
0.00.597.928 I llm_load_print_meta: n_rot            = 256
0.00.597.929 I llm_load_print_meta: n_swa            = 0
0.00.597.930 I llm_load_print_meta: n_embd_head_k    = 256
0.00.597.931 I llm_load_print_meta: n_embd_head_v    = 256
0.00.597.935 I llm_load_print_meta: n_gqa            = 8
0.00.597.940 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.597.948 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.597.949 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.597.950 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.597.950 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.597.950 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.597.952 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.597.957 I llm_load_print_meta: n_ff             = 16384
0.00.597.957 I llm_load_print_meta: n_expert         = 0
0.00.597.958 I llm_load_print_meta: n_expert_used    = 0
0.00.597.958 I llm_load_print_meta: causal attn      = 1
0.00.597.959 I llm_load_print_meta: pooling type     = 0
0.00.597.959 I llm_load_print_meta: rope type        = 2
0.00.597.960 I llm_load_print_meta: rope scaling     = linear
0.00.597.962 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.597.963 I llm_load_print_meta: freq_scale_train = 1
0.00.597.963 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.597.964 I llm_load_print_meta: rope_finetuned   = unknown
0.00.597.964 I llm_load_print_meta: ssm_d_conv       = 0
0.00.597.964 I llm_load_print_meta: ssm_d_inner      = 0
0.00.597.965 I llm_load_print_meta: ssm_d_state      = 0
0.00.597.965 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.597.965 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.597.966 I llm_load_print_meta: model type       = 2B
0.00.597.967 I llm_load_print_meta: model ftype      = Q8_0
0.00.597.970 I llm_load_print_meta: model params     = 2.51 B
0.00.597.971 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.597.971 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.597.972 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.597.972 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.597.973 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.597.973 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.597.973 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.597.976 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.597.981 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.597.983 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.597.983 I llm_load_print_meta: max token length = 93
0.00.598.151 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.699.622 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.699.632 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.699.633 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.699.633 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.699.634 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.699.634 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.705.294 I llama_new_context_with_model: n_ctx      = 8192
0.00.705.299 I llama_new_context_with_model: n_batch    = 2048
0.00.705.300 I llama_new_context_with_model: n_ubatch   = 512
0.00.705.300 I llama_new_context_with_model: flash_attn = 0
0.00.705.302 I llama_new_context_with_model: freq_base  = 10000.0
0.00.705.303 I llama_new_context_with_model: freq_scale = 1
0.00.733.851 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.733.893 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.734.012 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.735.422 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.735.427 I llama_new_context_with_model: graph nodes  = 601
0.00.735.427 I llama_new_context_with_model: graph splits = 1
0.00.735.443 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.347.089 I main: llama threadpool init, n_threads = 4
0.01.347.102 I 
0.01.347.216 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.347.220 I 
0.01.347.408 I sampler seed: 506259799
0.01.347.419 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.347.427 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.347.428 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.347.428 I 
 increasities. [end of text]


0.03.024.463 I llama_perf_sampler_print:    sampling time =       6.22 ms /     5 runs   (    1.24 ms per token,   803.47 tokens per second)
0.03.024.476 I llama_perf_context_print:        load time =    1344.18 ms
0.03.024.478 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.024.480 I llama_perf_context_print:        eval time =    1663.70 ms /     4 runs   (  415.93 ms per token,     2.40 tokens per second)
0.03.024.481 I llama_perf_context_print:       total time =    1677.38 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.682 I build: 3971 (c39665f5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.872 I main: llama backend init
0.00.002.844 I main: load the model and apply lora adapter, if any
0.00.024.783 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.874 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.887 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.889 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.893 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.897 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.898 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.899 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.900 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.901 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.907 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.908 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.909 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.911 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.913 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.807 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.735 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.961 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.969 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.970 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.971 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.973 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.974 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.975 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.978 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.979 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.980 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.981 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.269.982 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.991 I llama_model_loader: - type  f32:   37 tensors
0.00.269.995 I llama_model_loader: - type q8_0:  127 tensors
0.00.443.458 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.503.177 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.504.125 I llm_load_vocab: special tokens cache size = 5
0.00.599.252 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.599.327 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.599.328 I llm_load_print_meta: arch             = gemma
0.00.599.329 I llm_load_print_meta: vocab type       = SPM
0.00.599.330 I llm_load_print_meta: n_vocab          = 256000
0.00.599.332 I llm_load_print_meta: n_merges         = 0
0.00.599.332 I llm_load_print_meta: vocab_only       = 0
0.00.599.333 I llm_load_print_meta: n_ctx_train      = 8192
0.00.599.333 I llm_load_print_meta: n_embd           = 2048
0.00.599.334 I llm_load_print_meta: n_layer          = 18
0.00.599.397 I llm_load_print_meta: n_head           = 8
0.00.599.404 I llm_load_print_meta: n_head_kv        = 1
0.00.599.406 I llm_load_print_meta: n_rot            = 256
0.00.599.407 I llm_load_print_meta: n_swa            = 0
0.00.599.408 I llm_load_print_meta: n_embd_head_k    = 256
0.00.599.408 I llm_load_print_meta: n_embd_head_v    = 256
0.00.599.413 I llm_load_print_meta: n_gqa            = 8
0.00.599.418 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.599.423 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.599.425 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.599.442 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.599.449 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.599.450 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.599.450 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.599.457 I llm_load_print_meta: n_ff             = 16384
0.00.599.458 I llm_load_print_meta: n_expert         = 0
0.00.599.458 I llm_load_print_meta: n_expert_used    = 0
0.00.599.458 I llm_load_print_meta: causal attn      = 1
0.00.599.459 I llm_load_print_meta: pooling type     = 0
0.00.599.459 I llm_load_print_meta: rope type        = 2
0.00.599.462 I llm_load_print_meta: rope scaling     = linear
0.00.599.464 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.599.464 I llm_load_print_meta: freq_scale_train = 1
0.00.599.465 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.599.466 I llm_load_print_meta: rope_finetuned   = unknown
0.00.599.466 I llm_load_print_meta: ssm_d_conv       = 0
0.00.599.467 I llm_load_print_meta: ssm_d_inner      = 0
0.00.599.467 I llm_load_print_meta: ssm_d_state      = 0
0.00.599.479 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.599.480 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.599.481 I llm_load_print_meta: model type       = 2B
0.00.599.482 I llm_load_print_meta: model ftype      = Q8_0
0.00.599.483 I llm_load_print_meta: model params     = 2.51 B
0.00.599.484 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.599.485 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.599.486 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.599.486 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.599.486 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.599.487 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.599.487 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.599.488 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.599.494 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.599.495 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.599.496 I llm_load_print_meta: max token length = 93
0.00.599.662 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.693.786 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.699.529 I llama_new_context_with_model: n_ctx      = 8192
0.00.699.537 I llama_new_context_with_model: n_batch    = 2048
0.00.699.537 I llama_new_context_with_model: n_ubatch   = 512
0.00.699.538 I llama_new_context_with_model: flash_attn = 0
0.00.699.540 I llama_new_context_with_model: freq_base  = 10000.0
0.00.699.541 I llama_new_context_with_model: freq_scale = 1
0.00.729.616 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.729.662 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.729.785 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.731.171 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.731.175 I llama_new_context_with_model: graph nodes  = 601
0.00.731.176 I llama_new_context_with_model: graph splits = 1
0.00.731.190 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.345.391 I main: llama threadpool init, n_threads = 4
0.01.345.403 I 
0.01.345.512 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.345.516 I 
0.01.345.695 I sampler seed: 2641623739
0.01.345.706 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.345.713 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.345.714 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.345.714 I 
 maneuvously. [end of text]


0.03.457.019 I llama_perf_sampler_print:    sampling time =       7.83 ms /     6 runs   (    1.31 ms per token,   766.19 tokens per second)
0.03.457.040 I llama_perf_context_print:        load time =    1342.46 ms
0.03.457.042 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.457.044 I llama_perf_context_print:        eval time =    2095.50 ms /     5 runs   (  419.10 ms per token,     2.39 tokens per second)
0.03.457.045 I llama_perf_context_print:       total time =    2111.64 ms /     6 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 3971 (c39665f5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.842 I main: llama backend init
0.00.002.789 I main: load the model and apply lora adapter, if any
0.00.024.874 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.094 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.189 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.201 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.203 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.207 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.211 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.212 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.213 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.214 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.215 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.222 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.224 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.226 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.235 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.237 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.776 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.353 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.611 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.619 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.621 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.622 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.623 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.624 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.625 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.629 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.630 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.631 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.632 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.270.633 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.643 I llama_model_loader: - type  f32:   37 tensors
0.00.270.647 I llama_model_loader: - type q8_0:  127 tensors
0.00.464.115 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.528.027 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.529.010 I llm_load_vocab: special tokens cache size = 5
0.00.636.175 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.636.251 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.636.251 I llm_load_print_meta: arch             = gemma
0.00.636.252 I llm_load_print_meta: vocab type       = SPM
0.00.636.253 I llm_load_print_meta: n_vocab          = 256000
0.00.636.255 I llm_load_print_meta: n_merges         = 0
0.00.636.256 I llm_load_print_meta: vocab_only       = 0
0.00.636.256 I llm_load_print_meta: n_ctx_train      = 8192
0.00.636.256 I llm_load_print_meta: n_embd           = 2048
0.00.636.257 I llm_load_print_meta: n_layer          = 18
0.00.636.320 I llm_load_print_meta: n_head           = 8
0.00.636.327 I llm_load_print_meta: n_head_kv        = 1
0.00.636.328 I llm_load_print_meta: n_rot            = 256
0.00.636.329 I llm_load_print_meta: n_swa            = 0
0.00.636.330 I llm_load_print_meta: n_embd_head_k    = 256
0.00.636.330 I llm_load_print_meta: n_embd_head_v    = 256
0.00.636.334 I llm_load_print_meta: n_gqa            = 8
0.00.636.339 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.636.344 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.636.345 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.636.348 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.636.348 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.636.349 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.636.358 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.636.370 I llm_load_print_meta: n_ff             = 16384
0.00.636.371 I llm_load_print_meta: n_expert         = 0
0.00.636.372 I llm_load_print_meta: n_expert_used    = 0
0.00.636.372 I llm_load_print_meta: causal attn      = 1
0.00.636.373 I llm_load_print_meta: pooling type     = 0
0.00.636.373 I llm_load_print_meta: rope type        = 2
0.00.636.373 I llm_load_print_meta: rope scaling     = linear
0.00.636.375 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.636.376 I llm_load_print_meta: freq_scale_train = 1
0.00.636.376 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.636.377 I llm_load_print_meta: rope_finetuned   = unknown
0.00.636.377 I llm_load_print_meta: ssm_d_conv       = 0
0.00.636.377 I llm_load_print_meta: ssm_d_inner      = 0
0.00.636.378 I llm_load_print_meta: ssm_d_state      = 0
0.00.636.379 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.636.379 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.636.380 I llm_load_print_meta: model type       = 2B
0.00.636.382 I llm_load_print_meta: model ftype      = Q8_0
0.00.636.382 I llm_load_print_meta: model params     = 2.51 B
0.00.636.383 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.636.396 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.636.397 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.636.398 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.636.398 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.636.399 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.636.399 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.636.403 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.636.409 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.636.410 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.636.419 I llm_load_print_meta: max token length = 93
0.00.636.588 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.714.017 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.714.027 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.714.028 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.714.028 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.714.029 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.714.030 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.719.655 I llama_new_context_with_model: n_ctx      = 8192
0.00.719.661 I llama_new_context_with_model: n_batch    = 2048
0.00.719.662 I llama_new_context_with_model: n_ubatch   = 512
0.00.719.662 I llama_new_context_with_model: flash_attn = 0
0.00.719.664 I llama_new_context_with_model: freq_base  = 10000.0
0.00.719.665 I llama_new_context_with_model: freq_scale = 1
0.00.748.617 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.748.659 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.748.779 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.750.190 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.750.195 I llama_new_context_with_model: graph nodes  = 601
0.00.750.195 I llama_new_context_with_model: graph splits = 1
0.00.750.212 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.364.988 I main: llama threadpool init, n_threads = 4
0.01.365.001 I 
0.01.365.115 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.365.120 I 
0.01.365.305 I sampler seed: 2595875883
0.01.365.318 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.365.324 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.365.327 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.365.327 I 
 seconormal.

I am unable to find any information on this term. Could you please provide any information you have on it? [end of text]


0.12.831.388 I llama_perf_sampler_print:    sampling time =      41.55 ms /    28 runs   (    1.48 ms per token,   673.95 tokens per second)
0.12.831.392 I llama_perf_context_print:        load time =    1362.11 ms
0.12.831.394 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.831.408 I llama_perf_context_print:        eval time =   11386.05 ms /    27 runs   (  421.71 ms per token,     2.37 tokens per second)
0.12.831.409 I llama_perf_context_print:       total time =   11466.41 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.645 I build: 3971 (c39665f5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.856 I main: llama backend init
0.00.002.802 I main: load the model and apply lora adapter, if any
0.00.024.469 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.666 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.753 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.764 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.766 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.770 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.771 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.773 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.782 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.783 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.784 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.790 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.791 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.792 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.793 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.794 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.865 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.369 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.568 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.576 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.577 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.578 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.579 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.580 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.582 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.586 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.587 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.588 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.590 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.269.592 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.599 I llama_model_loader: - type  f32:   37 tensors
0.00.269.602 I llama_model_loader: - type q8_0:  127 tensors
0.00.442.718 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.505.082 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.506.092 I llm_load_vocab: special tokens cache size = 5
0.00.601.298 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.601.367 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.601.368 I llm_load_print_meta: arch             = gemma
0.00.601.369 I llm_load_print_meta: vocab type       = SPM
0.00.601.369 I llm_load_print_meta: n_vocab          = 256000
0.00.601.372 I llm_load_print_meta: n_merges         = 0
0.00.601.373 I llm_load_print_meta: vocab_only       = 0
0.00.601.373 I llm_load_print_meta: n_ctx_train      = 8192
0.00.601.373 I llm_load_print_meta: n_embd           = 2048
0.00.601.374 I llm_load_print_meta: n_layer          = 18
0.00.601.435 I llm_load_print_meta: n_head           = 8
0.00.601.444 I llm_load_print_meta: n_head_kv        = 1
0.00.601.444 I llm_load_print_meta: n_rot            = 256
0.00.601.445 I llm_load_print_meta: n_swa            = 0
0.00.601.446 I llm_load_print_meta: n_embd_head_k    = 256
0.00.601.446 I llm_load_print_meta: n_embd_head_v    = 256
0.00.601.451 I llm_load_print_meta: n_gqa            = 8
0.00.601.456 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.601.461 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.601.462 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.601.464 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.601.464 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.601.465 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.601.465 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.601.470 I llm_load_print_meta: n_ff             = 16384
0.00.601.471 I llm_load_print_meta: n_expert         = 0
0.00.601.472 I llm_load_print_meta: n_expert_used    = 0
0.00.601.472 I llm_load_print_meta: causal attn      = 1
0.00.601.473 I llm_load_print_meta: pooling type     = 0
0.00.601.473 I llm_load_print_meta: rope type        = 2
0.00.601.484 I llm_load_print_meta: rope scaling     = linear
0.00.601.485 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.601.486 I llm_load_print_meta: freq_scale_train = 1
0.00.601.487 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.601.487 I llm_load_print_meta: rope_finetuned   = unknown
0.00.601.488 I llm_load_print_meta: ssm_d_conv       = 0
0.00.601.488 I llm_load_print_meta: ssm_d_inner      = 0
0.00.601.488 I llm_load_print_meta: ssm_d_state      = 0
0.00.601.489 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.601.489 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.601.490 I llm_load_print_meta: model type       = 2B
0.00.601.491 I llm_load_print_meta: model ftype      = Q8_0
0.00.601.492 I llm_load_print_meta: model params     = 2.51 B
0.00.601.492 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.601.500 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.601.501 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.601.507 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.601.508 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.601.509 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.601.509 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.601.510 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.601.516 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.601.517 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.601.522 I llm_load_print_meta: max token length = 93
0.00.601.689 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.673.202 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.673.212 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.678.835 I llama_new_context_with_model: n_ctx      = 8192
0.00.678.840 I llama_new_context_with_model: n_batch    = 2048
0.00.678.841 I llama_new_context_with_model: n_ubatch   = 512
0.00.678.841 I llama_new_context_with_model: flash_attn = 0
0.00.678.843 I llama_new_context_with_model: freq_base  = 10000.0
0.00.678.844 I llama_new_context_with_model: freq_scale = 1
0.00.707.474 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.707.516 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.707.632 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.708.987 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.708.991 I llama_new_context_with_model: graph nodes  = 601
0.00.708.992 I llama_new_context_with_model: graph splits = 1
0.00.709.007 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.323.300 I main: llama threadpool init, n_threads = 4
0.01.323.312 I 
0.01.323.421 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.323.425 I 
0.01.323.605 I sampler seed: 1448700632
0.01.323.617 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.323.623 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.323.624 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.323.625 I 
 increably, a mischievous grin spreading across his face.

The mischievous grin vanished as quickly as it appeared, replaced by a thoughtful frown. A flicker of curiosity

0.14.755.715 I llama_perf_sampler_print:    sampling time =      49.31 ms /    33 runs   (    1.49 ms per token,   669.19 tokens per second)
0.14.755.719 I llama_perf_context_print:        load time =    1320.41 ms
0.14.755.720 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.755.732 I llama_perf_context_print:        eval time =   13337.36 ms /    32 runs   (  416.79 ms per token,     2.40 tokens per second)
0.14.755.733 I llama_perf_context_print:       total time =   13432.43 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m43.694s
user	2m7.402s
sys	0m9.430s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3971 (c39665f5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200242.31 ms
main:    total time = 200242.31 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.692 I build: 3971 (c39665f5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.891 I main: llama backend init
0.00.002.862 I main: load the model and apply lora adapter, if any
0.00.024.853 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.085 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.177 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.196 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.198 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.203 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.204 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.206 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.207 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.208 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.209 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.216 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.217 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.218 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.220 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.221 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.221 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.142 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.501 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.511 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.512 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.514 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.515 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.516 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.517 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.521 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.522 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.523 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.524 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.270.525 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.534 I llama_model_loader: - type  f32:   37 tensors
0.00.270.538 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.538 I llama_model_loader: - type q6_K:   19 tensors
0.00.446.181 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.505.795 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.506.814 I llm_load_vocab: special tokens cache size = 5
0.00.602.060 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.602.127 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.602.128 I llm_load_print_meta: arch             = gemma
0.00.602.129 I llm_load_print_meta: vocab type       = SPM
0.00.602.129 I llm_load_print_meta: n_vocab          = 256000
0.00.602.132 I llm_load_print_meta: n_merges         = 0
0.00.602.133 I llm_load_print_meta: vocab_only       = 0
0.00.602.133 I llm_load_print_meta: n_ctx_train      = 8192
0.00.602.133 I llm_load_print_meta: n_embd           = 2048
0.00.602.134 I llm_load_print_meta: n_layer          = 18
0.00.602.197 I llm_load_print_meta: n_head           = 8
0.00.602.205 I llm_load_print_meta: n_head_kv        = 1
0.00.602.206 I llm_load_print_meta: n_rot            = 256
0.00.602.217 I llm_load_print_meta: n_swa            = 0
0.00.602.217 I llm_load_print_meta: n_embd_head_k    = 256
0.00.602.218 I llm_load_print_meta: n_embd_head_v    = 256
0.00.602.223 I llm_load_print_meta: n_gqa            = 8
0.00.602.227 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.602.232 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.602.233 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.602.235 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.602.235 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.602.236 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.602.236 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.602.241 I llm_load_print_meta: n_ff             = 16384
0.00.602.241 I llm_load_print_meta: n_expert         = 0
0.00.602.245 I llm_load_print_meta: n_expert_used    = 0
0.00.602.246 I llm_load_print_meta: causal attn      = 1
0.00.602.246 I llm_load_print_meta: pooling type     = 0
0.00.602.246 I llm_load_print_meta: rope type        = 2
0.00.602.247 I llm_load_print_meta: rope scaling     = linear
0.00.602.248 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.602.249 I llm_load_print_meta: freq_scale_train = 1
0.00.602.249 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.602.250 I llm_load_print_meta: rope_finetuned   = unknown
0.00.602.253 I llm_load_print_meta: ssm_d_conv       = 0
0.00.602.254 I llm_load_print_meta: ssm_d_inner      = 0
0.00.602.254 I llm_load_print_meta: ssm_d_state      = 0
0.00.602.254 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.602.255 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.602.255 I llm_load_print_meta: model type       = 2B
0.00.602.256 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.602.257 I llm_load_print_meta: model params     = 2.51 B
0.00.602.258 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.602.258 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.602.259 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.602.259 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.602.259 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.602.260 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.602.260 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.602.260 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.602.266 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.602.268 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.602.268 I llm_load_print_meta: max token length = 93
0.00.602.432 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.666.377 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.666.386 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.666.387 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.666.388 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.666.389 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.666.389 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.672.220 I llama_new_context_with_model: n_ctx      = 8192
0.00.672.225 I llama_new_context_with_model: n_batch    = 2048
0.00.672.226 I llama_new_context_with_model: n_ubatch   = 512
0.00.672.226 I llama_new_context_with_model: flash_attn = 0
0.00.672.229 I llama_new_context_with_model: freq_base  = 10000.0
0.00.672.230 I llama_new_context_with_model: freq_scale = 1
0.00.701.168 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.701.213 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.701.325 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.702.714 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.702.719 I llama_new_context_with_model: graph nodes  = 601
0.00.702.719 I llama_new_context_with_model: graph splits = 1
0.00.702.734 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.284.420 I main: llama threadpool init, n_threads = 4
0.01.284.432 I 
0.01.284.537 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.284.541 I 
0.01.284.716 I sampler seed: 190466957
0.01.284.728 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.284.735 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.284.738 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.284.739 I 
 increasities? [end of text]


0.02.653.551 I llama_perf_sampler_print:    sampling time =       6.22 ms /     5 runs   (    1.24 ms per token,   803.86 tokens per second)
0.02.653.554 I llama_perf_context_print:        load time =    1281.47 ms
0.02.653.556 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.653.557 I llama_perf_context_print:        eval time =    1355.55 ms /     4 runs   (  338.89 ms per token,     2.95 tokens per second)
0.02.653.558 I llama_perf_context_print:       total time =    1369.14 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3971 (c39665f5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199929.96 ms
main:    total time = 199929.96 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 3971 (c39665f5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.839 I main: llama backend init
0.00.002.779 I main: load the model and apply lora adapter, if any
0.00.024.628 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.720 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.733 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.735 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.739 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.740 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.741 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.743 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.744 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.745 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.751 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.753 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.761 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.763 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.764 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.032 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.090 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.273 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.280 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.281 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.282 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.283 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.285 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.286 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.290 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.291 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.299 I llama_model_loader: - type  f32:   37 tensors
0.00.270.303 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.304 I llama_model_loader: - type q6_K:   19 tensors
0.00.452.343 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.813 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.767 I llm_load_vocab: special tokens cache size = 5
0.00.610.853 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.610.924 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.610.925 I llm_load_print_meta: arch             = gemma
0.00.610.925 I llm_load_print_meta: vocab type       = SPM
0.00.610.926 I llm_load_print_meta: n_vocab          = 256000
0.00.610.929 I llm_load_print_meta: n_merges         = 0
0.00.610.929 I llm_load_print_meta: vocab_only       = 0
0.00.610.930 I llm_load_print_meta: n_ctx_train      = 8192
0.00.610.930 I llm_load_print_meta: n_embd           = 2048
0.00.610.930 I llm_load_print_meta: n_layer          = 18
0.00.610.997 I llm_load_print_meta: n_head           = 8
0.00.611.004 I llm_load_print_meta: n_head_kv        = 1
0.00.611.005 I llm_load_print_meta: n_rot            = 256
0.00.611.006 I llm_load_print_meta: n_swa            = 0
0.00.611.016 I llm_load_print_meta: n_embd_head_k    = 256
0.00.611.017 I llm_load_print_meta: n_embd_head_v    = 256
0.00.611.024 I llm_load_print_meta: n_gqa            = 8
0.00.611.043 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.611.048 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.611.049 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.611.051 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.611.051 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.611.051 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.611.052 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.611.057 I llm_load_print_meta: n_ff             = 16384
0.00.611.057 I llm_load_print_meta: n_expert         = 0
0.00.611.057 I llm_load_print_meta: n_expert_used    = 0
0.00.611.058 I llm_load_print_meta: causal attn      = 1
0.00.611.058 I llm_load_print_meta: pooling type     = 0
0.00.611.069 I llm_load_print_meta: rope type        = 2
0.00.611.070 I llm_load_print_meta: rope scaling     = linear
0.00.611.072 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.611.073 I llm_load_print_meta: freq_scale_train = 1
0.00.611.073 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.611.073 I llm_load_print_meta: rope_finetuned   = unknown
0.00.611.074 I llm_load_print_meta: ssm_d_conv       = 0
0.00.611.074 I llm_load_print_meta: ssm_d_inner      = 0
0.00.611.074 I llm_load_print_meta: ssm_d_state      = 0
0.00.611.075 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.611.077 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.611.078 I llm_load_print_meta: model type       = 2B
0.00.611.079 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.611.080 I llm_load_print_meta: model params     = 2.51 B
0.00.611.081 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.611.081 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.611.081 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.611.082 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.611.082 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.611.083 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.611.083 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.611.083 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.611.089 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.611.091 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.611.091 I llm_load_print_meta: max token length = 93
0.00.611.261 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.671.322 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.676.929 I llama_new_context_with_model: n_ctx      = 8192
0.00.676.937 I llama_new_context_with_model: n_batch    = 2048
0.00.676.937 I llama_new_context_with_model: n_ubatch   = 512
0.00.676.938 I llama_new_context_with_model: flash_attn = 0
0.00.676.940 I llama_new_context_with_model: freq_base  = 10000.0
0.00.676.941 I llama_new_context_with_model: freq_scale = 1
0.00.706.726 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.706.769 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.706.886 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.708.236 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.708.241 I llama_new_context_with_model: graph nodes  = 601
0.00.708.242 I llama_new_context_with_model: graph splits = 1
0.00.708.259 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.288.263 I main: llama threadpool init, n_threads = 4
0.01.288.276 I 
0.01.288.388 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.288.392 I 
0.01.288.574 I sampler seed: 2401210726
0.01.288.586 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.288.593 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.288.596 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.288.597 I 
 maneuvously!

I apologize for any inconvenience caused by my previous message.

I am eager to get back to you on this matter. I will ensure

0.12.189.150 I llama_perf_sampler_print:    sampling time =      49.10 ms /    33 runs   (    1.49 ms per token,   672.07 tokens per second)
0.12.189.166 I llama_perf_context_print:        load time =    1285.40 ms
0.12.189.168 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.189.170 I llama_perf_context_print:        eval time =   10806.34 ms /    32 runs   (  337.70 ms per token,     2.96 tokens per second)
0.12.189.172 I llama_perf_context_print:       total time =   10900.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m57.920s
user	49m47.491s
sys	0m6.308s
