+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.537 I build: 4196 (c31ed2ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.729 I main: llama backend init
0.00.000.736 I main: load the model and apply lora adapter, if any
0.00.021.495 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.505 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.512 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.517 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.518 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.521 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.521 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.522 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.523 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.523 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.524 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.528 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.529 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.530 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.531 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.532 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.271 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.383 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.206 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.212 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.213 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.213 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.214 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.215 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.215 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.219 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.220 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.221 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.221 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.222 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.224 I llama_model_loader: - type  f32:   37 tensors
0.00.132.226 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.261 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.017 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.526 I llm_load_vocab: special tokens cache size = 5
0.00.263.231 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.247 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.247 I llm_load_print_meta: arch             = gemma
0.00.263.248 I llm_load_print_meta: vocab type       = SPM
0.00.263.248 I llm_load_print_meta: n_vocab          = 256000
0.00.263.248 I llm_load_print_meta: n_merges         = 0
0.00.263.249 I llm_load_print_meta: vocab_only       = 0
0.00.263.249 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.249 I llm_load_print_meta: n_embd           = 2048
0.00.263.250 I llm_load_print_meta: n_layer          = 18
0.00.263.260 I llm_load_print_meta: n_head           = 8
0.00.263.261 I llm_load_print_meta: n_head_kv        = 1
0.00.263.261 I llm_load_print_meta: n_rot            = 256
0.00.263.262 I llm_load_print_meta: n_swa            = 0
0.00.263.262 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.263 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.264 I llm_load_print_meta: n_gqa            = 8
0.00.263.265 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.265 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.266 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.268 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.268 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.268 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.269 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.270 I llm_load_print_meta: n_ff             = 16384
0.00.263.270 I llm_load_print_meta: n_expert         = 0
0.00.263.270 I llm_load_print_meta: n_expert_used    = 0
0.00.263.271 I llm_load_print_meta: causal attn      = 1
0.00.263.271 I llm_load_print_meta: pooling type     = 0
0.00.263.271 I llm_load_print_meta: rope type        = 2
0.00.263.272 I llm_load_print_meta: rope scaling     = linear
0.00.263.273 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.273 I llm_load_print_meta: freq_scale_train = 1
0.00.263.274 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.274 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.274 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.275 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.275 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.275 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.275 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.276 I llm_load_print_meta: model type       = 2B
0.00.263.276 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.277 I llm_load_print_meta: model params     = 2.51 B
0.00.263.278 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.278 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.279 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.279 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.279 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.280 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.280 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.280 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.281 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.281 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.282 I llm_load_print_meta: max token length = 93
0.00.363.569 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.363.575 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.363.576 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.363.577 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.363.578 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.363.578 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.368.890 I llama_new_context_with_model: n_seq_max     = 1
0.00.368.898 I llama_new_context_with_model: n_ctx         = 4096
0.00.368.898 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.368.898 I llama_new_context_with_model: n_batch       = 2048
0.00.368.898 I llama_new_context_with_model: n_ubatch      = 512
0.00.368.899 I llama_new_context_with_model: flash_attn    = 0
0.00.368.901 I llama_new_context_with_model: freq_base     = 10000.0
0.00.368.901 I llama_new_context_with_model: freq_scale    = 1
0.00.368.902 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.383.257 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.383.272 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.383.358 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.384.656 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.384.664 I llama_new_context_with_model: graph nodes  = 601
0.00.384.664 I llama_new_context_with_model: graph splits = 1
0.00.384.667 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.471.221 I main: llama threadpool init, n_threads = 4
0.00.471.237 I 
0.00.471.335 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.471.341 I 
0.00.471.407 I sampler seed: 2099592053
0.00.471.422 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.471.427 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.471.428 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.471.430 I 
 increasities with a hint of absurdity.

**Verse 1:**

I woke up this mornin', my eyes all blurry,
Dreams of aliens,

0.02.712.646 I llama_perf_sampler_print:    sampling time =       4.66 ms /    33 runs   (    0.14 ms per token,  7084.59 tokens per second)
0.02.712.648 I llama_perf_context_print:        load time =     470.46 ms
0.02.712.650 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.712.652 I llama_perf_context_print:        eval time =    2222.94 ms /    32 runs   (   69.47 ms per token,    14.40 tokens per second)
0.02.712.653 I llama_perf_context_print:       total time =    2241.43 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.474 I build: 4196 (c31ed2ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.679 I main: llama backend init
0.00.000.686 I main: load the model and apply lora adapter, if any
0.00.021.151 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.165 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.176 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.180 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.185 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.186 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.186 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.187 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.188 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.189 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.193 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.194 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.195 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.196 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.196 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.146 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.869 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.728 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.734 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.734 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.735 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.735 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.736 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.737 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.740 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.740 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.741 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.742 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.743 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.747 I llama_model_loader: - type  f32:   37 tensors
0.00.132.748 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.867 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.133 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.641 I llm_load_vocab: special tokens cache size = 5
0.00.266.522 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.538 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.538 I llm_load_print_meta: arch             = gemma
0.00.266.539 I llm_load_print_meta: vocab type       = SPM
0.00.266.540 I llm_load_print_meta: n_vocab          = 256000
0.00.266.540 I llm_load_print_meta: n_merges         = 0
0.00.266.541 I llm_load_print_meta: vocab_only       = 0
0.00.266.541 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.541 I llm_load_print_meta: n_embd           = 2048
0.00.266.541 I llm_load_print_meta: n_layer          = 18
0.00.266.554 I llm_load_print_meta: n_head           = 8
0.00.266.555 I llm_load_print_meta: n_head_kv        = 1
0.00.266.555 I llm_load_print_meta: n_rot            = 256
0.00.266.555 I llm_load_print_meta: n_swa            = 0
0.00.266.556 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.556 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.557 I llm_load_print_meta: n_gqa            = 8
0.00.266.558 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.559 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.560 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.561 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.562 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.562 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.562 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.563 I llm_load_print_meta: n_ff             = 16384
0.00.266.564 I llm_load_print_meta: n_expert         = 0
0.00.266.564 I llm_load_print_meta: n_expert_used    = 0
0.00.266.564 I llm_load_print_meta: causal attn      = 1
0.00.266.564 I llm_load_print_meta: pooling type     = 0
0.00.266.565 I llm_load_print_meta: rope type        = 2
0.00.266.565 I llm_load_print_meta: rope scaling     = linear
0.00.266.566 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.567 I llm_load_print_meta: freq_scale_train = 1
0.00.266.567 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.567 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.568 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.568 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.568 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.569 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.569 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.569 I llm_load_print_meta: model type       = 2B
0.00.266.570 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.571 I llm_load_print_meta: model params     = 2.51 B
0.00.266.572 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.572 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.572 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.573 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.573 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.573 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.574 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.574 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.574 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.575 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.575 I llm_load_print_meta: max token length = 93
0.00.360.739 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.366.005 I llama_new_context_with_model: n_seq_max     = 1
0.00.366.012 I llama_new_context_with_model: n_ctx         = 4096
0.00.366.012 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.366.013 I llama_new_context_with_model: n_batch       = 2048
0.00.366.013 I llama_new_context_with_model: n_ubatch      = 512
0.00.366.013 I llama_new_context_with_model: flash_attn    = 0
0.00.366.016 I llama_new_context_with_model: freq_base     = 10000.0
0.00.366.017 I llama_new_context_with_model: freq_scale    = 1
0.00.366.018 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.380.751 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.380.766 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.380.860 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.382.157 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.382.164 I llama_new_context_with_model: graph nodes  = 601
0.00.382.164 I llama_new_context_with_model: graph splits = 1
0.00.382.166 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.462.487 I main: llama threadpool init, n_threads = 4
0.00.462.505 I 
0.00.462.576 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.462.579 I 
0.00.462.621 I sampler seed: 1264593049
0.00.462.632 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.462.645 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.462.649 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.462.649 I 
 increasities, and other forms of sexual harassment in the workplace. [end of text]


0.01.409.004 I llama_perf_sampler_print:    sampling time =       2.15 ms /    15 runs   (    0.14 ms per token,  6989.75 tokens per second)
0.01.409.006 I llama_perf_context_print:        load time =     461.78 ms
0.01.409.007 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.409.008 I llama_perf_context_print:        eval time =     937.86 ms /    14 runs   (   66.99 ms per token,    14.93 tokens per second)
0.01.409.009 I llama_perf_context_print:       total time =     946.52 ms /    15 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.590 I build: 4196 (c31ed2ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.808 I main: llama backend init
0.00.000.814 I main: load the model and apply lora adapter, if any
0.00.021.312 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.322 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.329 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.334 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.335 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.338 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.339 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.339 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.340 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.340 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.341 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.344 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.345 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.345 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.346 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.346 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.142 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.015 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.923 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.929 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.930 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.930 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.931 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.931 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.932 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.934 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.935 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.937 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.937 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.938 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.941 I llama_model_loader: - type  f32:   37 tensors
0.00.132.942 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.175 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.505 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.031 I llm_load_vocab: special tokens cache size = 5
0.00.263.797 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.814 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.815 I llm_load_print_meta: arch             = gemma
0.00.263.815 I llm_load_print_meta: vocab type       = SPM
0.00.263.816 I llm_load_print_meta: n_vocab          = 256000
0.00.263.817 I llm_load_print_meta: n_merges         = 0
0.00.263.817 I llm_load_print_meta: vocab_only       = 0
0.00.263.817 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.818 I llm_load_print_meta: n_embd           = 2048
0.00.263.818 I llm_load_print_meta: n_layer          = 18
0.00.263.830 I llm_load_print_meta: n_head           = 8
0.00.263.831 I llm_load_print_meta: n_head_kv        = 1
0.00.263.832 I llm_load_print_meta: n_rot            = 256
0.00.263.832 I llm_load_print_meta: n_swa            = 0
0.00.263.833 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.833 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.834 I llm_load_print_meta: n_gqa            = 8
0.00.263.835 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.836 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.837 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.838 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.838 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.839 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.839 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.840 I llm_load_print_meta: n_ff             = 16384
0.00.263.840 I llm_load_print_meta: n_expert         = 0
0.00.263.841 I llm_load_print_meta: n_expert_used    = 0
0.00.263.841 I llm_load_print_meta: causal attn      = 1
0.00.263.841 I llm_load_print_meta: pooling type     = 0
0.00.263.842 I llm_load_print_meta: rope type        = 2
0.00.263.842 I llm_load_print_meta: rope scaling     = linear
0.00.263.843 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.844 I llm_load_print_meta: freq_scale_train = 1
0.00.263.844 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.845 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.845 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.845 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.846 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.846 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.846 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.847 I llm_load_print_meta: model type       = 2B
0.00.263.847 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.848 I llm_load_print_meta: model params     = 2.51 B
0.00.263.849 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.849 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.850 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.850 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.851 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.851 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.852 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.852 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.853 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.853 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.854 I llm_load_print_meta: max token length = 93
0.00.339.288 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.339.294 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.339.295 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.339.296 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.339.296 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.339.297 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.344.532 I llama_new_context_with_model: n_seq_max     = 1
0.00.344.537 I llama_new_context_with_model: n_ctx         = 4096
0.00.344.537 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.344.538 I llama_new_context_with_model: n_batch       = 2048
0.00.344.538 I llama_new_context_with_model: n_ubatch      = 512
0.00.344.538 I llama_new_context_with_model: flash_attn    = 0
0.00.344.541 I llama_new_context_with_model: freq_base     = 10000.0
0.00.344.542 I llama_new_context_with_model: freq_scale    = 1
0.00.344.542 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.358.956 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.358.970 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.359.061 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.360.293 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.360.299 I llama_new_context_with_model: graph nodes  = 601
0.00.360.299 I llama_new_context_with_model: graph splits = 1
0.00.360.302 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.448.232 I main: llama threadpool init, n_threads = 4
0.00.448.250 I 
0.00.448.328 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.448.332 I 
0.00.448.379 I sampler seed: 3146475266
0.00.448.390 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.448.393 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.448.394 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.448.394 I 
 increasities in the medieval period:

**a) Feudalism**
**b) Chivalry**
**c) Monasteries**
**

0.02.705.595 I llama_perf_sampler_print:    sampling time =       5.06 ms /    33 runs   (    0.15 ms per token,  6516.59 tokens per second)
0.02.705.598 I llama_perf_context_print:        load time =     447.40 ms
0.02.705.599 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.705.600 I llama_perf_context_print:        eval time =    2237.33 ms /    32 runs   (   69.92 ms per token,    14.30 tokens per second)
0.02.705.601 I llama_perf_context_print:       total time =    2257.37 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.551 I build: 4196 (c31ed2ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.741 I main: llama backend init
0.00.000.748 I main: load the model and apply lora adapter, if any
0.00.021.022 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.032 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.039 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.044 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.046 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.050 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.050 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.051 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.051 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.052 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.052 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.057 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.057 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.057 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.058 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.058 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.575 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.957 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.759 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.765 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.766 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.766 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.767 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.768 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.769 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.771 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.772 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.773 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.774 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.774 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.777 I llama_model_loader: - type  f32:   37 tensors
0.00.131.778 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.660 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.291 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.822 I llm_load_vocab: special tokens cache size = 5
0.00.264.979 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.993 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.994 I llm_load_print_meta: arch             = gemma
0.00.264.994 I llm_load_print_meta: vocab type       = SPM
0.00.264.995 I llm_load_print_meta: n_vocab          = 256000
0.00.264.996 I llm_load_print_meta: n_merges         = 0
0.00.264.996 I llm_load_print_meta: vocab_only       = 0
0.00.264.996 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.997 I llm_load_print_meta: n_embd           = 2048
0.00.264.997 I llm_load_print_meta: n_layer          = 18
0.00.265.007 I llm_load_print_meta: n_head           = 8
0.00.265.007 I llm_load_print_meta: n_head_kv        = 1
0.00.265.008 I llm_load_print_meta: n_rot            = 256
0.00.265.008 I llm_load_print_meta: n_swa            = 0
0.00.265.009 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.009 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.010 I llm_load_print_meta: n_gqa            = 8
0.00.265.011 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.012 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.012 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.014 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.014 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.015 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.015 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.016 I llm_load_print_meta: n_ff             = 16384
0.00.265.016 I llm_load_print_meta: n_expert         = 0
0.00.265.017 I llm_load_print_meta: n_expert_used    = 0
0.00.265.017 I llm_load_print_meta: causal attn      = 1
0.00.265.017 I llm_load_print_meta: pooling type     = 0
0.00.265.017 I llm_load_print_meta: rope type        = 2
0.00.265.018 I llm_load_print_meta: rope scaling     = linear
0.00.265.019 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.020 I llm_load_print_meta: freq_scale_train = 1
0.00.265.020 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.021 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.021 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.021 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.021 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.021 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.022 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.022 I llm_load_print_meta: model type       = 2B
0.00.265.023 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.024 I llm_load_print_meta: model params     = 2.51 B
0.00.265.024 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.025 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.025 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.026 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.026 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.026 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.027 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.027 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.027 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.028 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.028 I llm_load_print_meta: max token length = 93
0.00.336.226 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.336.231 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.341.352 I llama_new_context_with_model: n_seq_max     = 1
0.00.341.358 I llama_new_context_with_model: n_ctx         = 4096
0.00.341.358 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.341.359 I llama_new_context_with_model: n_batch       = 2048
0.00.341.359 I llama_new_context_with_model: n_ubatch      = 512
0.00.341.360 I llama_new_context_with_model: flash_attn    = 0
0.00.341.362 I llama_new_context_with_model: freq_base     = 10000.0
0.00.341.363 I llama_new_context_with_model: freq_scale    = 1
0.00.341.364 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.355.559 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.355.572 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.355.661 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.356.962 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.356.969 I llama_new_context_with_model: graph nodes  = 601
0.00.356.969 I llama_new_context_with_model: graph splits = 1
0.00.356.971 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.444.387 I main: llama threadpool init, n_threads = 4
0.00.444.403 I 
0.00.444.479 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.444.482 I 
0.00.444.530 I sampler seed: 1347784338
0.00.444.541 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.444.545 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.444.546 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.444.547 I 
 increasities and anxieties. 

**Anxiety**

Anxiety is a common and pervasive emotion that can manifest in various ways, including physical symptoms, cognitive distortions,

0.02.863.717 I llama_perf_sampler_print:    sampling time =       5.20 ms /    33 runs   (    0.16 ms per token,  6342.49 tokens per second)
0.02.863.719 I llama_perf_context_print:        load time =     443.62 ms
0.02.863.720 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.863.722 I llama_perf_context_print:        eval time =    2399.88 ms /    32 runs   (   75.00 ms per token,    13.33 tokens per second)
0.02.863.723 I llama_perf_context_print:       total time =    2419.34 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.149s
user	0m34.254s
sys	0m9.312s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4196 (c31ed2ab)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40194.07 ms
main:    total time = 40194.07 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.171 I build: 4196 (c31ed2ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.361 I main: llama backend init
0.00.000.367 I main: load the model and apply lora adapter, if any
0.00.020.943 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.952 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.961 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.981 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.986 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.997 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.001 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.002 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.002 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.003 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.003 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.007 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.007 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.008 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.008 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.009 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.596 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.730 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.586 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.592 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.593 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.593 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.594 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.595 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.596 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.598 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.600 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.601 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.601 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.602 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.607 I llama_model_loader: - type  f32:   37 tensors
0.00.131.608 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.608 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.734 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.008 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.545 I llm_load_vocab: special tokens cache size = 5
0.00.264.783 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.802 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.803 I llm_load_print_meta: arch             = gemma
0.00.264.803 I llm_load_print_meta: vocab type       = SPM
0.00.264.804 I llm_load_print_meta: n_vocab          = 256000
0.00.264.804 I llm_load_print_meta: n_merges         = 0
0.00.264.805 I llm_load_print_meta: vocab_only       = 0
0.00.264.805 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.806 I llm_load_print_meta: n_embd           = 2048
0.00.264.806 I llm_load_print_meta: n_layer          = 18
0.00.264.819 I llm_load_print_meta: n_head           = 8
0.00.264.820 I llm_load_print_meta: n_head_kv        = 1
0.00.264.820 I llm_load_print_meta: n_rot            = 256
0.00.264.820 I llm_load_print_meta: n_swa            = 0
0.00.264.821 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.821 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.822 I llm_load_print_meta: n_gqa            = 8
0.00.264.823 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.824 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.825 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.826 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.826 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.827 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.827 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.828 I llm_load_print_meta: n_ff             = 16384
0.00.264.828 I llm_load_print_meta: n_expert         = 0
0.00.264.828 I llm_load_print_meta: n_expert_used    = 0
0.00.264.829 I llm_load_print_meta: causal attn      = 1
0.00.264.829 I llm_load_print_meta: pooling type     = 0
0.00.264.829 I llm_load_print_meta: rope type        = 2
0.00.264.830 I llm_load_print_meta: rope scaling     = linear
0.00.264.831 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.832 I llm_load_print_meta: freq_scale_train = 1
0.00.264.832 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.833 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.833 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.833 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.834 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.834 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.834 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.834 I llm_load_print_meta: model type       = 2B
0.00.264.835 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.264.836 I llm_load_print_meta: model params     = 2.51 B
0.00.264.836 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.264.837 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.837 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.838 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.838 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.838 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.839 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.839 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.839 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.840 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.840 I llm_load_print_meta: max token length = 93
0.00.324.686 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.324.693 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.324.694 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.324.694 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.324.695 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.324.696 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.329.770 I llama_new_context_with_model: n_seq_max     = 1
0.00.329.776 I llama_new_context_with_model: n_ctx         = 4096
0.00.329.776 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.329.776 I llama_new_context_with_model: n_batch       = 2048
0.00.329.777 I llama_new_context_with_model: n_ubatch      = 512
0.00.329.777 I llama_new_context_with_model: flash_attn    = 0
0.00.329.780 I llama_new_context_with_model: freq_base     = 10000.0
0.00.329.780 I llama_new_context_with_model: freq_scale    = 1
0.00.329.781 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.344.085 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.344.098 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.344.195 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.345.482 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.345.487 I llama_new_context_with_model: graph nodes  = 601
0.00.345.488 I llama_new_context_with_model: graph splits = 1
0.00.345.490 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.420.366 I main: llama threadpool init, n_threads = 4
0.00.420.383 I 
0.00.420.456 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.420.459 I 
0.00.420.504 I sampler seed: 74159301
0.00.420.516 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.420.519 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.420.520 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.420.520 I 
 increasities in the workplace.

**Answer the following questions based on the provided text:**

1. What is the main topic of the passage?


2

0.01.993.053 I llama_perf_sampler_print:    sampling time =       5.08 ms /    33 runs   (    0.15 ms per token,  6498.62 tokens per second)
0.01.993.056 I llama_perf_context_print:        load time =     419.98 ms
0.01.993.059 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.993.061 I llama_perf_context_print:        eval time =    1554.29 ms /    32 runs   (   48.57 ms per token,    20.59 tokens per second)
0.01.993.062 I llama_perf_context_print:       total time =    1572.70 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4196 (c31ed2ab)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40163.38 ms
main:    total time = 40163.38 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.188 I build: 4196 (c31ed2ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.377 I main: llama backend init
0.00.000.384 I main: load the model and apply lora adapter, if any
0.00.020.653 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.666 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.674 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.678 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.682 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.683 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.683 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.684 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.684 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.685 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.688 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.688 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.689 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.690 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.690 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.036 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.728 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.602 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.609 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.609 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.610 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.610 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.611 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.612 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.614 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.615 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.617 I llama_model_loader: - type  f32:   37 tensors
0.00.130.618 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.618 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.814 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.237.168 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.237.647 I llm_load_vocab: special tokens cache size = 5
0.00.258.824 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.258.839 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.258.839 I llm_load_print_meta: arch             = gemma
0.00.258.840 I llm_load_print_meta: vocab type       = SPM
0.00.258.841 I llm_load_print_meta: n_vocab          = 256000
0.00.258.841 I llm_load_print_meta: n_merges         = 0
0.00.258.842 I llm_load_print_meta: vocab_only       = 0
0.00.258.842 I llm_load_print_meta: n_ctx_train      = 8192
0.00.258.842 I llm_load_print_meta: n_embd           = 2048
0.00.258.843 I llm_load_print_meta: n_layer          = 18
0.00.258.853 I llm_load_print_meta: n_head           = 8
0.00.258.854 I llm_load_print_meta: n_head_kv        = 1
0.00.258.854 I llm_load_print_meta: n_rot            = 256
0.00.258.854 I llm_load_print_meta: n_swa            = 0
0.00.258.854 I llm_load_print_meta: n_embd_head_k    = 256
0.00.258.855 I llm_load_print_meta: n_embd_head_v    = 256
0.00.258.856 I llm_load_print_meta: n_gqa            = 8
0.00.258.857 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.258.858 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.258.859 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.258.860 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.258.860 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.258.861 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.258.861 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.258.862 I llm_load_print_meta: n_ff             = 16384
0.00.258.862 I llm_load_print_meta: n_expert         = 0
0.00.258.862 I llm_load_print_meta: n_expert_used    = 0
0.00.258.863 I llm_load_print_meta: causal attn      = 1
0.00.258.863 I llm_load_print_meta: pooling type     = 0
0.00.258.863 I llm_load_print_meta: rope type        = 2
0.00.258.863 I llm_load_print_meta: rope scaling     = linear
0.00.258.865 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.258.866 I llm_load_print_meta: freq_scale_train = 1
0.00.258.866 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.258.867 I llm_load_print_meta: rope_finetuned   = unknown
0.00.258.867 I llm_load_print_meta: ssm_d_conv       = 0
0.00.258.867 I llm_load_print_meta: ssm_d_inner      = 0
0.00.258.868 I llm_load_print_meta: ssm_d_state      = 0
0.00.258.868 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.258.868 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.258.869 I llm_load_print_meta: model type       = 2B
0.00.258.870 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.258.870 I llm_load_print_meta: model params     = 2.51 B
0.00.258.871 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.258.871 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.258.872 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.258.872 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.258.872 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.258.873 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.258.873 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.258.873 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.258.874 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.258.874 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.258.875 I llm_load_print_meta: max token length = 93
0.00.315.464 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.320.502 I llama_new_context_with_model: n_seq_max     = 1
0.00.320.508 I llama_new_context_with_model: n_ctx         = 4096
0.00.320.508 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.320.509 I llama_new_context_with_model: n_batch       = 2048
0.00.320.509 I llama_new_context_with_model: n_ubatch      = 512
0.00.320.510 I llama_new_context_with_model: flash_attn    = 0
0.00.320.512 I llama_new_context_with_model: freq_base     = 10000.0
0.00.320.513 I llama_new_context_with_model: freq_scale    = 1
0.00.320.514 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.334.981 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.334.994 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.335.086 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.336.326 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.336.332 I llama_new_context_with_model: graph nodes  = 601
0.00.336.332 I llama_new_context_with_model: graph splits = 1
0.00.336.334 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.410.335 I main: llama threadpool init, n_threads = 4
0.00.410.351 I 
0.00.410.424 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.410.427 I 
0.00.410.469 I sampler seed: 2306926288
0.00.410.481 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.410.491 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.410.495 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.410.495 I 
 seconary, or secondary endoscopy is a procedure in which a thin, flexible tube with a camera on the end is inserted into the rectum and colon to visualize

0.01.960.772 I llama_perf_sampler_print:    sampling time =       5.11 ms /    33 runs   (    0.15 ms per token,  6456.66 tokens per second)
0.01.960.776 I llama_perf_context_print:        load time =     409.93 ms
0.01.960.778 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.960.780 I llama_perf_context_print:        eval time =    1531.87 ms /    32 runs   (   47.87 ms per token,    20.89 tokens per second)
0.01.960.782 I llama_perf_context_print:       total time =    1550.45 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.080s
user	10m23.692s
sys	0m7.097s
