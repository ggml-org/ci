+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.558 I build: 3804 (c35e586e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.743 I main: llama backend init
0.00.001.863 I main: load the model and apply lora adapter, if any
0.00.021.848 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.894 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.909 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.916 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.917 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.921 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.921 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.922 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.923 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.923 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.924 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.927 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.928 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.928 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.929 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.930 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.484 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.611 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.349 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.355 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.355 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.356 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.357 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.357 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.358 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.360 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.361 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.361 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.362 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.363 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.365 I llama_model_loader: - type  f32:   37 tensors
0.00.131.368 I llama_model_loader: - type q8_0:  127 tensors
0.00.193.116 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.193.648 I llm_load_vocab: special tokens cache size = 5
0.00.211.775 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.211.787 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.211.787 I llm_load_print_meta: arch             = gemma
0.00.211.788 I llm_load_print_meta: vocab type       = SPM
0.00.211.789 I llm_load_print_meta: n_vocab          = 256000
0.00.211.789 I llm_load_print_meta: n_merges         = 0
0.00.211.789 I llm_load_print_meta: vocab_only       = 0
0.00.211.790 I llm_load_print_meta: n_ctx_train      = 8192
0.00.211.790 I llm_load_print_meta: n_embd           = 2048
0.00.211.790 I llm_load_print_meta: n_layer          = 18
0.00.211.800 I llm_load_print_meta: n_head           = 8
0.00.211.801 I llm_load_print_meta: n_head_kv        = 1
0.00.211.801 I llm_load_print_meta: n_rot            = 256
0.00.211.802 I llm_load_print_meta: n_swa            = 0
0.00.211.802 I llm_load_print_meta: n_embd_head_k    = 256
0.00.211.802 I llm_load_print_meta: n_embd_head_v    = 256
0.00.211.803 I llm_load_print_meta: n_gqa            = 8
0.00.211.804 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.211.805 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.211.806 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.211.807 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.211.808 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.211.808 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.211.809 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.211.809 I llm_load_print_meta: n_ff             = 16384
0.00.211.810 I llm_load_print_meta: n_expert         = 0
0.00.211.810 I llm_load_print_meta: n_expert_used    = 0
0.00.211.810 I llm_load_print_meta: causal attn      = 1
0.00.211.811 I llm_load_print_meta: pooling type     = 0
0.00.211.811 I llm_load_print_meta: rope type        = 2
0.00.211.811 I llm_load_print_meta: rope scaling     = linear
0.00.211.813 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.211.813 I llm_load_print_meta: freq_scale_train = 1
0.00.211.814 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.211.814 I llm_load_print_meta: rope_finetuned   = unknown
0.00.211.814 I llm_load_print_meta: ssm_d_conv       = 0
0.00.211.814 I llm_load_print_meta: ssm_d_inner      = 0
0.00.211.815 I llm_load_print_meta: ssm_d_state      = 0
0.00.211.815 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.211.815 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.211.816 I llm_load_print_meta: model type       = 2B
0.00.211.816 I llm_load_print_meta: model ftype      = Q8_0
0.00.211.817 I llm_load_print_meta: model params     = 2.51 B
0.00.211.818 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.211.818 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.211.819 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.211.819 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.211.820 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.211.820 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.211.820 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.211.821 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.211.821 I llm_load_print_meta: max token length = 93
0.00.211.836 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.310.153 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.310.161 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.310.161 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.310.162 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.310.163 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.310.163 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.315.230 I llama_new_context_with_model: n_ctx      = 8192
0.00.315.237 I llama_new_context_with_model: n_batch    = 2048
0.00.315.237 I llama_new_context_with_model: n_ubatch   = 512
0.00.315.238 I llama_new_context_with_model: flash_attn = 0
0.00.315.240 I llama_new_context_with_model: freq_base  = 10000.0
0.00.315.241 I llama_new_context_with_model: freq_scale = 1
0.00.343.497 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.343.512 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.343.604 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.495 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.344.502 I llama_new_context_with_model: graph nodes  = 601
0.00.344.502 I llama_new_context_with_model: graph splits = 1
0.00.344.504 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.446.288 I main: llama threadpool init, n_threads = 4
0.00.446.300 I 
0.00.446.377 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.446.380 I 
0.00.446.415 I sampler seed: 1276053862
0.00.446.424 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.446.426 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.446.427 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities in the game. 

**Challenge:**

- Identify the specific interactions or events in the game that trigger the occurrence of these increasities.


0.02.671.455 I llama_perf_sampler_print:    sampling time =       4.71 ms /    33 runs   (    0.14 ms per token,  7006.37 tokens per second)
0.02.671.458 I llama_perf_context_print:        load time =     444.41 ms
0.02.671.459 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.671.460 I llama_perf_context_print:        eval time =    2207.24 ms /    32 runs   (   68.98 ms per token,    14.50 tokens per second)
0.02.671.461 I llama_perf_context_print:       total time =    2225.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.479 I build: 3804 (c35e586e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.700 I main: llama backend init
0.00.001.828 I main: load the model and apply lora adapter, if any
0.00.021.903 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.921 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.929 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.931 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.935 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.936 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.936 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.937 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.937 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.938 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.942 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.943 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.944 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.945 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.956 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.995 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.999 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.840 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.846 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.847 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.847 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.848 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.849 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.849 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.852 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.852 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.853 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.854 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.855 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.859 I llama_model_loader: - type  f32:   37 tensors
0.00.132.863 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.708 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.206.473 I llm_load_vocab: special tokens cache size = 5
0.00.224.943 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.224.958 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.224.958 I llm_load_print_meta: arch             = gemma
0.00.224.959 I llm_load_print_meta: vocab type       = SPM
0.00.224.960 I llm_load_print_meta: n_vocab          = 256000
0.00.224.961 I llm_load_print_meta: n_merges         = 0
0.00.224.961 I llm_load_print_meta: vocab_only       = 0
0.00.224.961 I llm_load_print_meta: n_ctx_train      = 8192
0.00.224.962 I llm_load_print_meta: n_embd           = 2048
0.00.224.962 I llm_load_print_meta: n_layer          = 18
0.00.224.974 I llm_load_print_meta: n_head           = 8
0.00.224.975 I llm_load_print_meta: n_head_kv        = 1
0.00.224.975 I llm_load_print_meta: n_rot            = 256
0.00.224.975 I llm_load_print_meta: n_swa            = 0
0.00.224.976 I llm_load_print_meta: n_embd_head_k    = 256
0.00.224.976 I llm_load_print_meta: n_embd_head_v    = 256
0.00.224.977 I llm_load_print_meta: n_gqa            = 8
0.00.224.978 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.224.979 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.224.980 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.224.981 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.224.981 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.224.982 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.224.982 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.224.983 I llm_load_print_meta: n_ff             = 16384
0.00.224.983 I llm_load_print_meta: n_expert         = 0
0.00.224.983 I llm_load_print_meta: n_expert_used    = 0
0.00.224.984 I llm_load_print_meta: causal attn      = 1
0.00.224.984 I llm_load_print_meta: pooling type     = 0
0.00.224.985 I llm_load_print_meta: rope type        = 2
0.00.224.985 I llm_load_print_meta: rope scaling     = linear
0.00.224.986 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.224.987 I llm_load_print_meta: freq_scale_train = 1
0.00.224.987 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.224.988 I llm_load_print_meta: rope_finetuned   = unknown
0.00.224.988 I llm_load_print_meta: ssm_d_conv       = 0
0.00.224.988 I llm_load_print_meta: ssm_d_inner      = 0
0.00.224.988 I llm_load_print_meta: ssm_d_state      = 0
0.00.224.988 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.224.989 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.224.989 I llm_load_print_meta: model type       = 2B
0.00.224.990 I llm_load_print_meta: model ftype      = Q8_0
0.00.224.991 I llm_load_print_meta: model params     = 2.51 B
0.00.224.991 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.224.992 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.224.993 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.224.993 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.224.993 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.224.994 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.224.994 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.224.994 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.224.995 I llm_load_print_meta: max token length = 93
0.00.225.013 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.318.861 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.323.873 I llama_new_context_with_model: n_ctx      = 8192
0.00.323.880 I llama_new_context_with_model: n_batch    = 2048
0.00.323.880 I llama_new_context_with_model: n_ubatch   = 512
0.00.323.881 I llama_new_context_with_model: flash_attn = 0
0.00.323.884 I llama_new_context_with_model: freq_base  = 10000.0
0.00.323.885 I llama_new_context_with_model: freq_scale = 1
0.00.353.947 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.353.963 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.354.058 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.354.944 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.354.952 I llama_new_context_with_model: graph nodes  = 601
0.00.354.953 I llama_new_context_with_model: graph splits = 1
0.00.354.955 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.441.276 I main: llama threadpool init, n_threads = 4
0.00.441.288 I 
0.00.441.361 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.441.365 I 
0.00.441.402 I sampler seed: 1638229759
0.00.441.411 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.441.414 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.441.414 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities in the process, leading to the formation of the Milky Way galaxy.

This scenario seems plausible, but it is important to note that the formation of

0.02.625.603 I llama_perf_sampler_print:    sampling time =       4.66 ms /    33 runs   (    0.14 ms per token,  7087.63 tokens per second)
0.02.625.605 I llama_perf_context_print:        load time =     439.43 ms
0.02.625.606 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.625.607 I llama_perf_context_print:        eval time =    2165.91 ms /    32 runs   (   67.68 ms per token,    14.77 tokens per second)
0.02.625.608 I llama_perf_context_print:       total time =    2184.33 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.559 I build: 3804 (c35e586e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.747 I main: llama backend init
0.00.001.831 I main: load the model and apply lora adapter, if any
0.00.021.823 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.873 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.889 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.895 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.896 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.900 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.901 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.902 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.902 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.903 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.903 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.908 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.909 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.910 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.911 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.912 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.243 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.186 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.103 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.109 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.110 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.110 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.111 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.112 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.112 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.115 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.116 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.118 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.119 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.119 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.123 I llama_model_loader: - type  f32:   37 tensors
0.00.133.127 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.702 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.204.466 I llm_load_vocab: special tokens cache size = 5
0.00.222.739 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.222.754 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.222.755 I llm_load_print_meta: arch             = gemma
0.00.222.755 I llm_load_print_meta: vocab type       = SPM
0.00.222.756 I llm_load_print_meta: n_vocab          = 256000
0.00.222.757 I llm_load_print_meta: n_merges         = 0
0.00.222.757 I llm_load_print_meta: vocab_only       = 0
0.00.222.757 I llm_load_print_meta: n_ctx_train      = 8192
0.00.222.758 I llm_load_print_meta: n_embd           = 2048
0.00.222.758 I llm_load_print_meta: n_layer          = 18
0.00.222.770 I llm_load_print_meta: n_head           = 8
0.00.222.771 I llm_load_print_meta: n_head_kv        = 1
0.00.222.772 I llm_load_print_meta: n_rot            = 256
0.00.222.772 I llm_load_print_meta: n_swa            = 0
0.00.222.772 I llm_load_print_meta: n_embd_head_k    = 256
0.00.222.772 I llm_load_print_meta: n_embd_head_v    = 256
0.00.222.773 I llm_load_print_meta: n_gqa            = 8
0.00.222.774 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.222.775 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.222.776 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.222.778 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.222.778 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.222.779 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.222.779 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.222.780 I llm_load_print_meta: n_ff             = 16384
0.00.222.780 I llm_load_print_meta: n_expert         = 0
0.00.222.781 I llm_load_print_meta: n_expert_used    = 0
0.00.222.781 I llm_load_print_meta: causal attn      = 1
0.00.222.781 I llm_load_print_meta: pooling type     = 0
0.00.222.782 I llm_load_print_meta: rope type        = 2
0.00.222.782 I llm_load_print_meta: rope scaling     = linear
0.00.222.783 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.222.784 I llm_load_print_meta: freq_scale_train = 1
0.00.222.784 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.222.785 I llm_load_print_meta: rope_finetuned   = unknown
0.00.222.785 I llm_load_print_meta: ssm_d_conv       = 0
0.00.222.785 I llm_load_print_meta: ssm_d_inner      = 0
0.00.222.785 I llm_load_print_meta: ssm_d_state      = 0
0.00.222.785 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.222.786 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.222.786 I llm_load_print_meta: model type       = 2B
0.00.222.787 I llm_load_print_meta: model ftype      = Q8_0
0.00.222.787 I llm_load_print_meta: model params     = 2.51 B
0.00.222.788 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.222.789 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.222.790 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.222.791 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.222.791 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.222.792 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.222.792 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.222.793 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.222.793 I llm_load_print_meta: max token length = 93
0.00.222.812 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.297.052 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.297.059 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.297.060 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.297.061 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.297.062 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.297.062 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.302.022 I llama_new_context_with_model: n_ctx      = 8192
0.00.302.028 I llama_new_context_with_model: n_batch    = 2048
0.00.302.029 I llama_new_context_with_model: n_ubatch   = 512
0.00.302.029 I llama_new_context_with_model: flash_attn = 0
0.00.302.032 I llama_new_context_with_model: freq_base  = 10000.0
0.00.302.032 I llama_new_context_with_model: freq_scale = 1
0.00.331.077 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.331.091 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.331.183 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.332.100 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.332.105 I llama_new_context_with_model: graph nodes  = 601
0.00.332.105 I llama_new_context_with_model: graph splits = 1
0.00.332.107 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.422.216 I main: llama threadpool init, n_threads = 4
0.00.422.227 I 
0.00.422.299 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.422.302 I 
0.00.422.338 I sampler seed: 4177708907
0.00.422.348 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.422.350 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.422.351 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increabling.

The provided text contains a misspelling. The correct spelling is "incredibly".

**Incredibly, the student's performance in class

0.02.710.512 I llama_perf_sampler_print:    sampling time =       5.05 ms /    33 runs   (    0.15 ms per token,  6538.54 tokens per second)
0.02.710.515 I llama_perf_context_print:        load time =     420.37 ms
0.02.710.516 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.710.517 I llama_perf_context_print:        eval time =    2269.40 ms /    32 runs   (   70.92 ms per token,    14.10 tokens per second)
0.02.710.518 I llama_perf_context_print:       total time =    2288.30 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.534 I build: 3804 (c35e586e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.726 I main: llama backend init
0.00.001.804 I main: load the model and apply lora adapter, if any
0.00.021.709 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.754 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.765 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.770 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.771 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.775 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.776 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.776 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.777 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.778 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.778 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.783 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.784 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.784 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.785 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.786 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.563 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.214 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.066 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.073 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.074 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.075 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.075 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.076 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.077 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.079 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.080 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.081 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.082 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.083 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.087 I llama_model_loader: - type  f32:   37 tensors
0.00.132.089 I llama_model_loader: - type q8_0:  127 tensors
0.00.196.178 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.196.814 I llm_load_vocab: special tokens cache size = 5
0.00.215.036 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.215.048 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.215.049 I llm_load_print_meta: arch             = gemma
0.00.215.049 I llm_load_print_meta: vocab type       = SPM
0.00.215.050 I llm_load_print_meta: n_vocab          = 256000
0.00.215.050 I llm_load_print_meta: n_merges         = 0
0.00.215.051 I llm_load_print_meta: vocab_only       = 0
0.00.215.052 I llm_load_print_meta: n_ctx_train      = 8192
0.00.215.052 I llm_load_print_meta: n_embd           = 2048
0.00.215.053 I llm_load_print_meta: n_layer          = 18
0.00.215.064 I llm_load_print_meta: n_head           = 8
0.00.215.065 I llm_load_print_meta: n_head_kv        = 1
0.00.215.065 I llm_load_print_meta: n_rot            = 256
0.00.215.066 I llm_load_print_meta: n_swa            = 0
0.00.215.066 I llm_load_print_meta: n_embd_head_k    = 256
0.00.215.067 I llm_load_print_meta: n_embd_head_v    = 256
0.00.215.068 I llm_load_print_meta: n_gqa            = 8
0.00.215.069 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.215.070 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.215.071 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.215.072 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.215.072 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.215.073 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.215.073 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.215.074 I llm_load_print_meta: n_ff             = 16384
0.00.215.075 I llm_load_print_meta: n_expert         = 0
0.00.215.076 I llm_load_print_meta: n_expert_used    = 0
0.00.215.076 I llm_load_print_meta: causal attn      = 1
0.00.215.076 I llm_load_print_meta: pooling type     = 0
0.00.215.077 I llm_load_print_meta: rope type        = 2
0.00.215.077 I llm_load_print_meta: rope scaling     = linear
0.00.215.080 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.215.081 I llm_load_print_meta: freq_scale_train = 1
0.00.215.081 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.215.081 I llm_load_print_meta: rope_finetuned   = unknown
0.00.215.082 I llm_load_print_meta: ssm_d_conv       = 0
0.00.215.082 I llm_load_print_meta: ssm_d_inner      = 0
0.00.215.082 I llm_load_print_meta: ssm_d_state      = 0
0.00.215.082 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.215.083 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.215.083 I llm_load_print_meta: model type       = 2B
0.00.215.084 I llm_load_print_meta: model ftype      = Q8_0
0.00.215.085 I llm_load_print_meta: model params     = 2.51 B
0.00.215.086 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.215.086 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.215.087 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.215.087 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.215.087 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.215.087 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.215.088 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.215.088 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.215.089 I llm_load_print_meta: max token length = 93
0.00.215.106 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.286.303 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.286.314 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.291.528 I llama_new_context_with_model: n_ctx      = 8192
0.00.291.534 I llama_new_context_with_model: n_batch    = 2048
0.00.291.534 I llama_new_context_with_model: n_ubatch   = 512
0.00.291.535 I llama_new_context_with_model: flash_attn = 0
0.00.291.537 I llama_new_context_with_model: freq_base  = 10000.0
0.00.291.538 I llama_new_context_with_model: freq_scale = 1
0.00.320.879 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.320.893 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.320.985 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.321.802 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.321.808 I llama_new_context_with_model: graph nodes  = 601
0.00.321.809 I llama_new_context_with_model: graph splits = 1
0.00.321.811 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.415.581 I main: llama threadpool init, n_threads = 4
0.00.415.592 I 
0.00.415.668 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.415.671 I 
0.00.415.706 I sampler seed: 1668472380
0.00.415.716 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.415.719 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.415.719 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasively, but the cumulative effect is only 60%.

What is the missing percentage?

The answer should be 40%.

Explanation:

0.02.835.605 I llama_perf_sampler_print:    sampling time =       4.71 ms /    33 runs   (    0.14 ms per token,  7010.83 tokens per second)
0.02.835.608 I llama_perf_context_print:        load time =     413.76 ms
0.02.835.609 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.835.611 I llama_perf_context_print:        eval time =    2402.09 ms /    32 runs   (   75.07 ms per token,    13.32 tokens per second)
0.02.835.611 I llama_perf_context_print:       total time =    2420.03 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.297s
user	0m39.182s
sys	0m9.395s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3804 (c35e586e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31966.24 ms
main:    total time = 31966.24 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.529 I build: 3804 (c35e586e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.722 I main: llama backend init
0.00.001.854 I main: load the model and apply lora adapter, if any
0.00.023.183 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.234 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.245 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.250 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.251 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.255 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.258 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.259 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.259 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.260 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.260 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.263 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.264 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.265 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.265 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.266 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.246 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.541 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.344 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.350 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.351 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.352 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.352 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.353 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.353 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.356 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.356 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.357 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.358 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.359 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.362 I llama_model_loader: - type  f32:   37 tensors
0.00.133.364 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.364 I llama_model_loader: - type q6_K:   19 tensors
0.00.195.907 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.196.420 I llm_load_vocab: special tokens cache size = 5
0.00.214.459 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.214.470 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.214.471 I llm_load_print_meta: arch             = gemma
0.00.214.471 I llm_load_print_meta: vocab type       = SPM
0.00.214.472 I llm_load_print_meta: n_vocab          = 256000
0.00.214.472 I llm_load_print_meta: n_merges         = 0
0.00.214.473 I llm_load_print_meta: vocab_only       = 0
0.00.214.473 I llm_load_print_meta: n_ctx_train      = 8192
0.00.214.473 I llm_load_print_meta: n_embd           = 2048
0.00.214.474 I llm_load_print_meta: n_layer          = 18
0.00.214.484 I llm_load_print_meta: n_head           = 8
0.00.214.485 I llm_load_print_meta: n_head_kv        = 1
0.00.214.486 I llm_load_print_meta: n_rot            = 256
0.00.214.486 I llm_load_print_meta: n_swa            = 0
0.00.214.486 I llm_load_print_meta: n_embd_head_k    = 256
0.00.214.487 I llm_load_print_meta: n_embd_head_v    = 256
0.00.214.488 I llm_load_print_meta: n_gqa            = 8
0.00.214.489 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.214.490 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.214.491 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.214.492 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.214.492 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.214.492 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.214.493 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.214.494 I llm_load_print_meta: n_ff             = 16384
0.00.214.496 I llm_load_print_meta: n_expert         = 0
0.00.214.496 I llm_load_print_meta: n_expert_used    = 0
0.00.214.496 I llm_load_print_meta: causal attn      = 1
0.00.214.497 I llm_load_print_meta: pooling type     = 0
0.00.214.498 I llm_load_print_meta: rope type        = 2
0.00.214.498 I llm_load_print_meta: rope scaling     = linear
0.00.214.499 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.214.500 I llm_load_print_meta: freq_scale_train = 1
0.00.214.500 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.214.501 I llm_load_print_meta: rope_finetuned   = unknown
0.00.214.502 I llm_load_print_meta: ssm_d_conv       = 0
0.00.214.502 I llm_load_print_meta: ssm_d_inner      = 0
0.00.214.502 I llm_load_print_meta: ssm_d_state      = 0
0.00.214.502 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.214.503 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.214.504 I llm_load_print_meta: model type       = 2B
0.00.214.504 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.214.505 I llm_load_print_meta: model params     = 2.51 B
0.00.214.506 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.214.506 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.214.507 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.214.507 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.214.507 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.214.508 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.214.508 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.214.509 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.214.509 I llm_load_print_meta: max token length = 93
0.00.214.524 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.273.575 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.273.581 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.273.582 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.273.583 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.273.583 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.273.584 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.278.766 I llama_new_context_with_model: n_ctx      = 8192
0.00.278.773 I llama_new_context_with_model: n_batch    = 2048
0.00.278.773 I llama_new_context_with_model: n_ubatch   = 512
0.00.278.774 I llama_new_context_with_model: flash_attn = 0
0.00.278.776 I llama_new_context_with_model: freq_base  = 10000.0
0.00.278.777 I llama_new_context_with_model: freq_scale = 1
0.00.308.460 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.308.476 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.308.568 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.309.469 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.309.475 I llama_new_context_with_model: graph nodes  = 601
0.00.309.475 I llama_new_context_with_model: graph splits = 1
0.00.309.477 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.390.922 I main: llama threadpool init, n_threads = 4
0.00.390.935 I 
0.00.391.010 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.391.013 I 
0.00.391.050 I sampler seed: 3103956576
0.00.391.059 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.391.062 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.391.063 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconally.

A man is standing in the middle of a circular garden. He walks 3 rounds around the garden. How many gardens does the man walk

0.01.974.810 I llama_perf_sampler_print:    sampling time =       4.97 ms /    33 runs   (    0.15 ms per token,  6643.85 tokens per second)
0.01.974.812 I llama_perf_context_print:        load time =     389.05 ms
0.01.974.813 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.974.815 I llama_perf_context_print:        eval time =    1566.04 ms /    32 runs   (   48.94 ms per token,    20.43 tokens per second)
0.01.974.815 I llama_perf_context_print:       total time =    1583.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3804 (c35e586e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32056.24 ms
main:    total time = 32056.24 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.528 I build: 3804 (c35e586e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.731 I main: llama backend init
0.00.001.825 I main: load the model and apply lora adapter, if any
0.00.022.110 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.121 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.128 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.129 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.132 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.133 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.134 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.135 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.135 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.136 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.139 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.140 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.140 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.141 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.142 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.918 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.348 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.205 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.211 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.212 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.213 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.213 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.214 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.215 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.217 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.217 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.220 I llama_model_loader: - type  f32:   37 tensors
0.00.132.223 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.224 I llama_model_loader: - type q6_K:   19 tensors
0.00.195.421 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.195.985 I llm_load_vocab: special tokens cache size = 5
0.00.213.963 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.213.976 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.213.977 I llm_load_print_meta: arch             = gemma
0.00.213.977 I llm_load_print_meta: vocab type       = SPM
0.00.213.978 I llm_load_print_meta: n_vocab          = 256000
0.00.213.978 I llm_load_print_meta: n_merges         = 0
0.00.213.979 I llm_load_print_meta: vocab_only       = 0
0.00.213.981 I llm_load_print_meta: n_ctx_train      = 8192
0.00.213.981 I llm_load_print_meta: n_embd           = 2048
0.00.213.981 I llm_load_print_meta: n_layer          = 18
0.00.213.993 I llm_load_print_meta: n_head           = 8
0.00.213.994 I llm_load_print_meta: n_head_kv        = 1
0.00.213.994 I llm_load_print_meta: n_rot            = 256
0.00.213.994 I llm_load_print_meta: n_swa            = 0
0.00.213.995 I llm_load_print_meta: n_embd_head_k    = 256
0.00.213.995 I llm_load_print_meta: n_embd_head_v    = 256
0.00.213.996 I llm_load_print_meta: n_gqa            = 8
0.00.213.998 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.213.999 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.214.001 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.214.003 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.214.003 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.214.004 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.214.004 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.214.005 I llm_load_print_meta: n_ff             = 16384
0.00.214.006 I llm_load_print_meta: n_expert         = 0
0.00.214.007 I llm_load_print_meta: n_expert_used    = 0
0.00.214.007 I llm_load_print_meta: causal attn      = 1
0.00.214.007 I llm_load_print_meta: pooling type     = 0
0.00.214.007 I llm_load_print_meta: rope type        = 2
0.00.214.008 I llm_load_print_meta: rope scaling     = linear
0.00.214.009 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.214.010 I llm_load_print_meta: freq_scale_train = 1
0.00.214.011 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.214.011 I llm_load_print_meta: rope_finetuned   = unknown
0.00.214.012 I llm_load_print_meta: ssm_d_conv       = 0
0.00.214.012 I llm_load_print_meta: ssm_d_inner      = 0
0.00.214.012 I llm_load_print_meta: ssm_d_state      = 0
0.00.214.013 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.214.013 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.214.014 I llm_load_print_meta: model type       = 2B
0.00.214.015 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.214.016 I llm_load_print_meta: model params     = 2.51 B
0.00.214.017 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.214.017 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.214.017 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.214.018 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.214.018 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.214.018 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.214.019 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.214.019 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.214.019 I llm_load_print_meta: max token length = 93
0.00.214.050 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.270.301 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.275.308 I llama_new_context_with_model: n_ctx      = 8192
0.00.275.313 I llama_new_context_with_model: n_batch    = 2048
0.00.275.313 I llama_new_context_with_model: n_ubatch   = 512
0.00.275.313 I llama_new_context_with_model: flash_attn = 0
0.00.275.315 I llama_new_context_with_model: freq_base  = 10000.0
0.00.275.316 I llama_new_context_with_model: freq_scale = 1
0.00.304.568 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.304.586 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.304.694 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.305.598 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.305.605 I llama_new_context_with_model: graph nodes  = 601
0.00.305.605 I llama_new_context_with_model: graph splits = 1
0.00.305.607 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.385.941 I main: llama threadpool init, n_threads = 4
0.00.385.953 I 
0.00.386.021 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.386.025 I 
0.00.386.055 I sampler seed: 1862998251
0.00.386.064 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.386.067 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.386.068 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasively.

I'm not sure I understand. Could you please provide a more detailed explanation? [end of text]


0.01.464.035 I llama_perf_sampler_print:    sampling time =       3.25 ms /    23 runs   (    0.14 ms per token,  7076.92 tokens per second)
0.01.464.039 I llama_perf_context_print:        load time =     384.10 ms
0.01.464.041 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.464.042 I llama_perf_context_print:        eval time =    1065.36 ms /    22 runs   (   48.43 ms per token,    20.65 tokens per second)
0.01.464.043 I llama_perf_context_print:       total time =    1078.10 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.744s
user	8m11.853s
sys	0m6.887s
