+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.686 I build: 4114 (c3ea58ac) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.890 I main: llama backend init
0.00.000.898 I main: load the model and apply lora adapter, if any
0.00.023.341 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.354 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.449 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.461 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.463 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.472 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.474 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.475 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.476 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.477 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.478 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.485 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.489 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.491 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.492 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.493 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.457 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.668 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.884 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.894 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.895 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.896 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.898 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.899 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.900 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.904 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.905 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.906 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.907 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.270.909 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.918 I llama_model_loader: - type  f32:   37 tensors
0.00.270.920 I llama_model_loader: - type q8_0:  127 tensors
0.00.452.538 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.300 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.281 I llm_load_vocab: special tokens cache size = 5
0.00.619.221 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.619.291 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.619.296 I llm_load_print_meta: arch             = gemma
0.00.619.296 I llm_load_print_meta: vocab type       = SPM
0.00.619.297 I llm_load_print_meta: n_vocab          = 256000
0.00.619.299 I llm_load_print_meta: n_merges         = 0
0.00.619.300 I llm_load_print_meta: vocab_only       = 0
0.00.619.300 I llm_load_print_meta: n_ctx_train      = 8192
0.00.619.300 I llm_load_print_meta: n_embd           = 2048
0.00.619.301 I llm_load_print_meta: n_layer          = 18
0.00.619.364 I llm_load_print_meta: n_head           = 8
0.00.619.374 I llm_load_print_meta: n_head_kv        = 1
0.00.619.375 I llm_load_print_meta: n_rot            = 256
0.00.619.376 I llm_load_print_meta: n_swa            = 0
0.00.619.376 I llm_load_print_meta: n_embd_head_k    = 256
0.00.619.377 I llm_load_print_meta: n_embd_head_v    = 256
0.00.619.381 I llm_load_print_meta: n_gqa            = 8
0.00.619.386 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.619.392 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.619.393 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.619.395 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.619.395 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.619.396 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.619.396 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.619.402 I llm_load_print_meta: n_ff             = 16384
0.00.619.403 I llm_load_print_meta: n_expert         = 0
0.00.619.403 I llm_load_print_meta: n_expert_used    = 0
0.00.619.404 I llm_load_print_meta: causal attn      = 1
0.00.619.404 I llm_load_print_meta: pooling type     = 0
0.00.619.405 I llm_load_print_meta: rope type        = 2
0.00.619.405 I llm_load_print_meta: rope scaling     = linear
0.00.619.406 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.619.407 I llm_load_print_meta: freq_scale_train = 1
0.00.619.407 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.619.408 I llm_load_print_meta: rope_finetuned   = unknown
0.00.619.411 I llm_load_print_meta: ssm_d_conv       = 0
0.00.619.411 I llm_load_print_meta: ssm_d_inner      = 0
0.00.619.411 I llm_load_print_meta: ssm_d_state      = 0
0.00.619.412 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.619.412 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.619.413 I llm_load_print_meta: model type       = 2B
0.00.619.414 I llm_load_print_meta: model ftype      = Q8_0
0.00.619.424 I llm_load_print_meta: model params     = 2.51 B
0.00.619.425 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.619.425 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.619.426 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.619.427 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.619.428 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.619.428 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.619.429 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.619.429 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.619.435 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.619.436 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.619.437 I llm_load_print_meta: max token length = 93
0.00.721.857 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.721.867 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.721.868 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.721.869 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.721.869 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.721.870 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.727.606 I llama_new_context_with_model: n_seq_max     = 1
0.00.727.613 I llama_new_context_with_model: n_ctx         = 4096
0.00.727.614 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.727.614 I llama_new_context_with_model: n_batch       = 2048
0.00.727.614 I llama_new_context_with_model: n_ubatch      = 512
0.00.727.615 I llama_new_context_with_model: flash_attn    = 0
0.00.727.617 I llama_new_context_with_model: freq_base     = 10000.0
0.00.727.618 I llama_new_context_with_model: freq_scale    = 1
0.00.727.619 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.742.367 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.742.408 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.742.534 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.745.170 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.745.174 I llama_new_context_with_model: graph nodes  = 601
0.00.745.175 I llama_new_context_with_model: graph splits = 1
0.00.745.199 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.354.941 I main: llama threadpool init, n_threads = 4
0.01.354.957 I 
0.01.355.072 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.355.076 I 
0.01.355.308 I sampler seed: 189703146
0.01.355.321 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.355.327 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.355.330 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.355.330 I 
 increasities. [end of text]


0.03.057.221 I llama_perf_sampler_print:    sampling time =       6.25 ms /     5 runs   (    1.25 ms per token,   800.51 tokens per second)
0.03.057.224 I llama_perf_context_print:        load time =    1353.94 ms
0.03.057.225 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.057.227 I llama_perf_context_print:        eval time =    1689.71 ms /     4 runs   (  422.43 ms per token,     2.37 tokens per second)
0.03.057.228 I llama_perf_context_print:       total time =    1702.29 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.653 I build: 4114 (c3ea58ac) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.862 I main: llama backend init
0.00.000.870 I main: load the model and apply lora adapter, if any
0.00.023.458 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.561 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.577 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.581 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.587 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.588 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.589 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.591 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.593 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.594 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.603 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.607 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.608 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.609 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.610 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.527 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.689 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.971 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.981 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.982 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.983 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.984 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.985 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.986 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.990 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.991 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.993 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.994 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.269.995 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.003 I llama_model_loader: - type  f32:   37 tensors
0.00.270.005 I llama_model_loader: - type q8_0:  127 tensors
0.00.445.516 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.510.326 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.511.298 I llm_load_vocab: special tokens cache size = 5
0.00.607.621 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.607.697 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.607.698 I llm_load_print_meta: arch             = gemma
0.00.607.699 I llm_load_print_meta: vocab type       = SPM
0.00.607.700 I llm_load_print_meta: n_vocab          = 256000
0.00.607.702 I llm_load_print_meta: n_merges         = 0
0.00.607.702 I llm_load_print_meta: vocab_only       = 0
0.00.607.703 I llm_load_print_meta: n_ctx_train      = 8192
0.00.607.703 I llm_load_print_meta: n_embd           = 2048
0.00.607.703 I llm_load_print_meta: n_layer          = 18
0.00.607.768 I llm_load_print_meta: n_head           = 8
0.00.607.775 I llm_load_print_meta: n_head_kv        = 1
0.00.607.775 I llm_load_print_meta: n_rot            = 256
0.00.607.776 I llm_load_print_meta: n_swa            = 0
0.00.607.776 I llm_load_print_meta: n_embd_head_k    = 256
0.00.607.777 I llm_load_print_meta: n_embd_head_v    = 256
0.00.607.781 I llm_load_print_meta: n_gqa            = 8
0.00.607.786 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.607.791 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.607.792 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.607.793 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.607.794 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.607.795 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.607.795 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.607.814 I llm_load_print_meta: n_ff             = 16384
0.00.607.815 I llm_load_print_meta: n_expert         = 0
0.00.607.816 I llm_load_print_meta: n_expert_used    = 0
0.00.607.816 I llm_load_print_meta: causal attn      = 1
0.00.607.816 I llm_load_print_meta: pooling type     = 0
0.00.607.817 I llm_load_print_meta: rope type        = 2
0.00.607.817 I llm_load_print_meta: rope scaling     = linear
0.00.607.819 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.607.820 I llm_load_print_meta: freq_scale_train = 1
0.00.607.820 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.607.820 I llm_load_print_meta: rope_finetuned   = unknown
0.00.607.821 I llm_load_print_meta: ssm_d_conv       = 0
0.00.607.821 I llm_load_print_meta: ssm_d_inner      = 0
0.00.607.821 I llm_load_print_meta: ssm_d_state      = 0
0.00.607.821 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.607.822 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.607.822 I llm_load_print_meta: model type       = 2B
0.00.607.823 I llm_load_print_meta: model ftype      = Q8_0
0.00.607.833 I llm_load_print_meta: model params     = 2.51 B
0.00.607.834 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.607.835 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.607.835 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.607.836 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.607.837 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.607.838 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.607.838 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.607.839 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.607.845 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.607.846 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.607.847 I llm_load_print_meta: max token length = 93
0.00.704.996 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.710.987 I llama_new_context_with_model: n_seq_max     = 1
0.00.710.995 I llama_new_context_with_model: n_ctx         = 4096
0.00.710.995 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.710.995 I llama_new_context_with_model: n_batch       = 2048
0.00.710.996 I llama_new_context_with_model: n_ubatch      = 512
0.00.710.997 I llama_new_context_with_model: flash_attn    = 0
0.00.710.999 I llama_new_context_with_model: freq_base     = 10000.0
0.00.711.000 I llama_new_context_with_model: freq_scale    = 1
0.00.711.001 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.725.954 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.725.993 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.726.120 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.728.648 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.728.652 I llama_new_context_with_model: graph nodes  = 601
0.00.728.652 I llama_new_context_with_model: graph splits = 1
0.00.728.676 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.336.851 I main: llama threadpool init, n_threads = 4
0.01.336.867 I 
0.01.336.982 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.336.986 I 
0.01.337.215 I sampler seed: 4005932644
0.01.337.227 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.337.234 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.337.237 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.337.237 I 
 increasels, and all the other mythical creatures of the sea. [end of text]


0.07.274.170 I llama_perf_sampler_print:    sampling time =      21.66 ms /    15 runs   (    1.44 ms per token,   692.68 tokens per second)
0.07.274.172 I llama_perf_context_print:        load time =    1335.87 ms
0.07.274.174 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.274.175 I llama_perf_context_print:        eval time =    5897.44 ms /    14 runs   (  421.25 ms per token,     2.37 tokens per second)
0.07.274.176 I llama_perf_context_print:       total time =    5937.33 ms /    15 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.641 I build: 4114 (c3ea58ac) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.842 I main: llama backend init
0.00.000.850 I main: load the model and apply lora adapter, if any
0.00.023.278 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.287 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.378 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.389 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.392 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.398 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.402 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.403 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.404 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.405 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.406 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.412 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.413 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.414 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.415 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.417 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.452 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.191 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.717 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.729 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.730 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.731 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.732 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.733 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.734 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.739 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.763 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.766 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.774 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.270.776 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.795 I llama_model_loader: - type  f32:   37 tensors
0.00.270.798 I llama_model_loader: - type q8_0:  127 tensors
0.00.453.162 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.518.254 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.519.134 I llm_load_vocab: special tokens cache size = 5
0.00.621.402 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.621.471 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.621.475 I llm_load_print_meta: arch             = gemma
0.00.621.476 I llm_load_print_meta: vocab type       = SPM
0.00.621.477 I llm_load_print_meta: n_vocab          = 256000
0.00.621.479 I llm_load_print_meta: n_merges         = 0
0.00.621.480 I llm_load_print_meta: vocab_only       = 0
0.00.621.480 I llm_load_print_meta: n_ctx_train      = 8192
0.00.621.481 I llm_load_print_meta: n_embd           = 2048
0.00.621.481 I llm_load_print_meta: n_layer          = 18
0.00.621.545 I llm_load_print_meta: n_head           = 8
0.00.621.556 I llm_load_print_meta: n_head_kv        = 1
0.00.621.557 I llm_load_print_meta: n_rot            = 256
0.00.621.557 I llm_load_print_meta: n_swa            = 0
0.00.621.557 I llm_load_print_meta: n_embd_head_k    = 256
0.00.621.558 I llm_load_print_meta: n_embd_head_v    = 256
0.00.621.563 I llm_load_print_meta: n_gqa            = 8
0.00.621.567 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.621.572 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.621.574 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.621.575 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.621.592 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.621.596 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.621.596 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.621.602 I llm_load_print_meta: n_ff             = 16384
0.00.621.603 I llm_load_print_meta: n_expert         = 0
0.00.621.603 I llm_load_print_meta: n_expert_used    = 0
0.00.621.604 I llm_load_print_meta: causal attn      = 1
0.00.621.604 I llm_load_print_meta: pooling type     = 0
0.00.621.604 I llm_load_print_meta: rope type        = 2
0.00.621.605 I llm_load_print_meta: rope scaling     = linear
0.00.621.607 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.621.607 I llm_load_print_meta: freq_scale_train = 1
0.00.621.608 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.621.608 I llm_load_print_meta: rope_finetuned   = unknown
0.00.621.608 I llm_load_print_meta: ssm_d_conv       = 0
0.00.621.608 I llm_load_print_meta: ssm_d_inner      = 0
0.00.621.609 I llm_load_print_meta: ssm_d_state      = 0
0.00.621.609 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.621.609 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.621.610 I llm_load_print_meta: model type       = 2B
0.00.621.611 I llm_load_print_meta: model ftype      = Q8_0
0.00.621.619 I llm_load_print_meta: model params     = 2.51 B
0.00.621.619 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.621.620 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.621.621 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.621.621 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.621.622 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.621.623 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.621.623 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.621.624 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.621.630 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.621.631 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.621.632 I llm_load_print_meta: max token length = 93
0.00.699.384 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.699.394 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.699.395 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.699.395 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.699.396 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.699.397 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.705.215 I llama_new_context_with_model: n_seq_max     = 1
0.00.705.223 I llama_new_context_with_model: n_ctx         = 4096
0.00.705.223 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.705.224 I llama_new_context_with_model: n_batch       = 2048
0.00.705.224 I llama_new_context_with_model: n_ubatch      = 512
0.00.705.225 I llama_new_context_with_model: flash_attn    = 0
0.00.705.227 I llama_new_context_with_model: freq_base     = 10000.0
0.00.705.228 I llama_new_context_with_model: freq_scale    = 1
0.00.705.229 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.720.873 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.720.912 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.721.042 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.723.713 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.723.717 I llama_new_context_with_model: graph nodes  = 601
0.00.723.718 I llama_new_context_with_model: graph splits = 1
0.00.723.742 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.333.781 I main: llama threadpool init, n_threads = 4
0.01.333.796 I 
0.01.333.901 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.333.905 I 
0.01.334.133 I sampler seed: 3303298960
0.01.334.146 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.334.152 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.334.156 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.334.156 I 
 increasities:

$$\frac{dy}{dx}=\frac{y}{x}$$

**Solution:**

$$\int\frac{dy}{y}=\int

0.14.994.737 I llama_perf_sampler_print:    sampling time =      49.20 ms /    33 runs   (    1.49 ms per token,   670.76 tokens per second)
0.14.994.754 I llama_perf_context_print:        load time =    1332.84 ms
0.14.994.756 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.994.757 I llama_perf_context_print:        eval time =   13571.48 ms /    32 runs   (  424.11 ms per token,     2.36 tokens per second)
0.14.994.758 I llama_perf_context_print:       total time =   13660.97 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.662 I build: 4114 (c3ea58ac) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.861 I main: llama backend init
0.00.000.868 I main: load the model and apply lora adapter, if any
0.00.024.774 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.786 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.873 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.885 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.887 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.892 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.894 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.896 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.897 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.898 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.899 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.907 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.908 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.909 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.910 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.911 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.492 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.181 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.339 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.347 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.349 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.350 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.351 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.352 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.354 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.357 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.359 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.360 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.361 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.272.362 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.371 I llama_model_loader: - type  f32:   37 tensors
0.00.272.374 I llama_model_loader: - type q8_0:  127 tensors
0.00.463.869 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.528.495 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.529.452 I llm_load_vocab: special tokens cache size = 5
0.00.626.720 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.626.791 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.626.792 I llm_load_print_meta: arch             = gemma
0.00.626.793 I llm_load_print_meta: vocab type       = SPM
0.00.626.794 I llm_load_print_meta: n_vocab          = 256000
0.00.626.796 I llm_load_print_meta: n_merges         = 0
0.00.626.796 I llm_load_print_meta: vocab_only       = 0
0.00.626.796 I llm_load_print_meta: n_ctx_train      = 8192
0.00.626.797 I llm_load_print_meta: n_embd           = 2048
0.00.626.797 I llm_load_print_meta: n_layer          = 18
0.00.626.860 I llm_load_print_meta: n_head           = 8
0.00.626.867 I llm_load_print_meta: n_head_kv        = 1
0.00.626.867 I llm_load_print_meta: n_rot            = 256
0.00.626.868 I llm_load_print_meta: n_swa            = 0
0.00.626.868 I llm_load_print_meta: n_embd_head_k    = 256
0.00.626.868 I llm_load_print_meta: n_embd_head_v    = 256
0.00.626.873 I llm_load_print_meta: n_gqa            = 8
0.00.626.877 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.626.882 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.626.884 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.626.885 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.626.886 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.626.886 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.626.888 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.626.894 I llm_load_print_meta: n_ff             = 16384
0.00.626.894 I llm_load_print_meta: n_expert         = 0
0.00.626.895 I llm_load_print_meta: n_expert_used    = 0
0.00.626.895 I llm_load_print_meta: causal attn      = 1
0.00.626.907 I llm_load_print_meta: pooling type     = 0
0.00.626.908 I llm_load_print_meta: rope type        = 2
0.00.626.909 I llm_load_print_meta: rope scaling     = linear
0.00.626.910 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.626.911 I llm_load_print_meta: freq_scale_train = 1
0.00.626.911 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.626.911 I llm_load_print_meta: rope_finetuned   = unknown
0.00.626.912 I llm_load_print_meta: ssm_d_conv       = 0
0.00.626.913 I llm_load_print_meta: ssm_d_inner      = 0
0.00.626.913 I llm_load_print_meta: ssm_d_state      = 0
0.00.626.913 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.626.914 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.626.915 I llm_load_print_meta: model type       = 2B
0.00.626.916 I llm_load_print_meta: model ftype      = Q8_0
0.00.626.925 I llm_load_print_meta: model params     = 2.51 B
0.00.626.926 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.626.927 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.626.928 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.626.928 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.626.928 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.626.929 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.626.930 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.626.931 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.626.936 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.626.938 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.626.939 I llm_load_print_meta: max token length = 93
0.00.699.532 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.699.541 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.705.314 I llama_new_context_with_model: n_seq_max     = 1
0.00.705.321 I llama_new_context_with_model: n_ctx         = 4096
0.00.705.321 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.705.322 I llama_new_context_with_model: n_batch       = 2048
0.00.705.322 I llama_new_context_with_model: n_ubatch      = 512
0.00.705.323 I llama_new_context_with_model: flash_attn    = 0
0.00.705.325 I llama_new_context_with_model: freq_base     = 10000.0
0.00.705.326 I llama_new_context_with_model: freq_scale    = 1
0.00.705.326 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.719.773 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.719.809 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.719.942 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.722.736 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.722.739 I llama_new_context_with_model: graph nodes  = 601
0.00.722.740 I llama_new_context_with_model: graph splits = 1
0.00.722.763 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.335.290 I main: llama threadpool init, n_threads = 4
0.01.335.304 I 
0.01.335.415 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.335.419 I 
0.01.335.661 I sampler seed: 255295886
0.01.335.675 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.335.681 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.335.685 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.335.685 I 
 increasities and the consequences of these relationships on individuals and communities.

## **The Complexities of Sexual Relationships**

Sexual relationships are intricate and multifaceted, involving

0.14.971.764 I llama_perf_sampler_print:    sampling time =      49.49 ms /    33 runs   (    1.50 ms per token,   666.80 tokens per second)
0.14.971.768 I llama_perf_context_print:        load time =    1334.33 ms
0.14.971.770 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.971.772 I llama_perf_context_print:        eval time =   13546.63 ms /    32 runs   (  423.33 ms per token,     2.36 tokens per second)
0.14.971.773 I llama_perf_context_print:       total time =   13636.49 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m49.827s
user	2m32.502s
sys	0m9.332s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4114 (c3ea58ac)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186888.61 ms
main:    total time = 186888.61 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.613 I build: 4114 (c3ea58ac) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.815 I main: llama backend init
0.00.000.823 I main: load the model and apply lora adapter, if any
0.00.023.460 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.471 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.567 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.578 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.580 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.585 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.587 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.588 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.589 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.591 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.592 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.601 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.605 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.606 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.608 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.609 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.747 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.488 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.923 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.932 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.934 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.935 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.936 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.937 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.938 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.942 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.943 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.944 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.945 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.271.946 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.955 I llama_model_loader: - type  f32:   37 tensors
0.00.271.958 I llama_model_loader: - type q4_K:  108 tensors
0.00.271.959 I llama_model_loader: - type q6_K:   19 tensors
0.00.462.832 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.526.418 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.527.335 I llm_load_vocab: special tokens cache size = 5
0.00.633.579 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.633.654 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.633.655 I llm_load_print_meta: arch             = gemma
0.00.633.656 I llm_load_print_meta: vocab type       = SPM
0.00.633.657 I llm_load_print_meta: n_vocab          = 256000
0.00.633.659 I llm_load_print_meta: n_merges         = 0
0.00.633.659 I llm_load_print_meta: vocab_only       = 0
0.00.633.660 I llm_load_print_meta: n_ctx_train      = 8192
0.00.633.660 I llm_load_print_meta: n_embd           = 2048
0.00.633.660 I llm_load_print_meta: n_layer          = 18
0.00.633.723 I llm_load_print_meta: n_head           = 8
0.00.633.730 I llm_load_print_meta: n_head_kv        = 1
0.00.633.732 I llm_load_print_meta: n_rot            = 256
0.00.633.733 I llm_load_print_meta: n_swa            = 0
0.00.633.733 I llm_load_print_meta: n_embd_head_k    = 256
0.00.633.734 I llm_load_print_meta: n_embd_head_v    = 256
0.00.633.739 I llm_load_print_meta: n_gqa            = 8
0.00.633.744 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.633.750 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.633.752 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.633.753 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.633.753 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.633.753 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.633.754 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.633.759 I llm_load_print_meta: n_ff             = 16384
0.00.633.759 I llm_load_print_meta: n_expert         = 0
0.00.633.760 I llm_load_print_meta: n_expert_used    = 0
0.00.633.764 I llm_load_print_meta: causal attn      = 1
0.00.633.765 I llm_load_print_meta: pooling type     = 0
0.00.633.765 I llm_load_print_meta: rope type        = 2
0.00.633.766 I llm_load_print_meta: rope scaling     = linear
0.00.633.767 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.633.768 I llm_load_print_meta: freq_scale_train = 1
0.00.633.768 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.633.771 I llm_load_print_meta: rope_finetuned   = unknown
0.00.633.772 I llm_load_print_meta: ssm_d_conv       = 0
0.00.633.772 I llm_load_print_meta: ssm_d_inner      = 0
0.00.633.772 I llm_load_print_meta: ssm_d_state      = 0
0.00.633.773 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.633.773 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.633.774 I llm_load_print_meta: model type       = 2B
0.00.633.775 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.633.793 I llm_load_print_meta: model params     = 2.51 B
0.00.633.795 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.633.796 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.633.797 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.633.797 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.633.798 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.633.798 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.633.798 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.633.799 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.633.805 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.633.807 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.633.807 I llm_load_print_meta: max token length = 93
0.00.696.286 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.696.298 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.696.299 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.696.300 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.696.300 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.696.301 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.702.264 I llama_new_context_with_model: n_seq_max     = 1
0.00.702.273 I llama_new_context_with_model: n_ctx         = 4096
0.00.702.273 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.702.273 I llama_new_context_with_model: n_batch       = 2048
0.00.702.274 I llama_new_context_with_model: n_ubatch      = 512
0.00.702.274 I llama_new_context_with_model: flash_attn    = 0
0.00.702.278 I llama_new_context_with_model: freq_base     = 10000.0
0.00.702.279 I llama_new_context_with_model: freq_scale    = 1
0.00.702.279 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.718.091 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.718.131 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.718.256 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.720.882 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.720.886 I llama_new_context_with_model: graph nodes  = 601
0.00.720.886 I llama_new_context_with_model: graph splits = 1
0.00.720.910 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.306.010 I main: llama threadpool init, n_threads = 4
0.01.306.026 I 
0.01.306.132 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.306.136 I 
0.01.306.365 I sampler seed: 3019428874
0.01.306.378 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.306.384 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.306.387 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.306.387 I 
 seconading.

I understand that "seconading" can be used as a noun or a verb. Could you please explain how it is used in the provided

0.12.418.763 I llama_perf_sampler_print:    sampling time =      49.31 ms /    33 runs   (    1.49 ms per token,   669.22 tokens per second)
0.12.418.767 I llama_perf_context_print:        load time =    1305.10 ms
0.12.418.768 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.418.770 I llama_perf_context_print:        eval time =   11023.67 ms /    32 runs   (  344.49 ms per token,     2.90 tokens per second)
0.12.418.772 I llama_perf_context_print:       total time =   11112.76 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4114 (c3ea58ac)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 187063.78 ms
main:    total time = 187063.78 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.680 I build: 4114 (c3ea58ac) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.887 I main: llama backend init
0.00.000.896 I main: load the model and apply lora adapter, if any
0.00.023.690 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.802 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.818 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.822 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.829 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.831 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.832 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.834 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.836 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.846 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.854 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.856 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.857 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.858 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.859 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.154.690 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.999 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.277.436 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.277.445 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.277.446 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.277.447 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.277.448 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.277.449 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.277.450 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.277.454 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.277.455 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.277.463 I llama_model_loader: - type  f32:   37 tensors
0.00.277.466 I llama_model_loader: - type q4_K:  108 tensors
0.00.277.466 I llama_model_loader: - type q6_K:   19 tensors
0.00.453.006 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.519.538 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.520.547 I llm_load_vocab: special tokens cache size = 5
0.00.625.686 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.625.753 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.625.754 I llm_load_print_meta: arch             = gemma
0.00.625.755 I llm_load_print_meta: vocab type       = SPM
0.00.625.756 I llm_load_print_meta: n_vocab          = 256000
0.00.625.758 I llm_load_print_meta: n_merges         = 0
0.00.625.759 I llm_load_print_meta: vocab_only       = 0
0.00.625.760 I llm_load_print_meta: n_ctx_train      = 8192
0.00.625.760 I llm_load_print_meta: n_embd           = 2048
0.00.625.760 I llm_load_print_meta: n_layer          = 18
0.00.625.827 I llm_load_print_meta: n_head           = 8
0.00.625.834 I llm_load_print_meta: n_head_kv        = 1
0.00.625.834 I llm_load_print_meta: n_rot            = 256
0.00.625.835 I llm_load_print_meta: n_swa            = 0
0.00.625.836 I llm_load_print_meta: n_embd_head_k    = 256
0.00.625.837 I llm_load_print_meta: n_embd_head_v    = 256
0.00.625.842 I llm_load_print_meta: n_gqa            = 8
0.00.625.846 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.625.851 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.625.852 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.625.854 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.625.855 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.625.856 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.625.857 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.625.862 I llm_load_print_meta: n_ff             = 16384
0.00.625.870 I llm_load_print_meta: n_expert         = 0
0.00.625.871 I llm_load_print_meta: n_expert_used    = 0
0.00.625.884 I llm_load_print_meta: causal attn      = 1
0.00.625.886 I llm_load_print_meta: pooling type     = 0
0.00.625.886 I llm_load_print_meta: rope type        = 2
0.00.625.887 I llm_load_print_meta: rope scaling     = linear
0.00.625.888 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.625.889 I llm_load_print_meta: freq_scale_train = 1
0.00.625.889 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.625.897 I llm_load_print_meta: rope_finetuned   = unknown
0.00.625.898 I llm_load_print_meta: ssm_d_conv       = 0
0.00.625.898 I llm_load_print_meta: ssm_d_inner      = 0
0.00.625.906 I llm_load_print_meta: ssm_d_state      = 0
0.00.625.907 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.625.908 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.625.908 I llm_load_print_meta: model type       = 2B
0.00.625.910 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.625.918 I llm_load_print_meta: model params     = 2.51 B
0.00.625.920 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.625.920 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.625.921 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.625.921 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.625.922 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.625.930 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.625.930 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.625.931 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.625.937 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.625.939 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.625.939 I llm_load_print_meta: max token length = 93
0.00.684.019 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.690.388 I llama_new_context_with_model: n_seq_max     = 1
0.00.690.395 I llama_new_context_with_model: n_ctx         = 4096
0.00.690.395 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.690.396 I llama_new_context_with_model: n_batch       = 2048
0.00.690.396 I llama_new_context_with_model: n_ubatch      = 512
0.00.690.397 I llama_new_context_with_model: flash_attn    = 0
0.00.690.399 I llama_new_context_with_model: freq_base     = 10000.0
0.00.690.400 I llama_new_context_with_model: freq_scale    = 1
0.00.690.400 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.705.054 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.705.097 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.705.228 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.707.891 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.707.894 I llama_new_context_with_model: graph nodes  = 601
0.00.707.895 I llama_new_context_with_model: graph splits = 1
0.00.707.918 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.294.054 I main: llama threadpool init, n_threads = 4
0.01.294.071 I 
0.01.294.178 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.294.181 I 
0.01.294.432 I sampler seed: 1358284361
0.01.294.444 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.294.460 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.294.462 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.294.462 I 
 seconded branches of a towering oak tree.

**Questions:**
1. What is the purpose of the branches?
2. What is the significance of

0.12.403.262 I llama_perf_sampler_print:    sampling time =      49.70 ms /    33 runs   (    1.51 ms per token,   663.93 tokens per second)
0.12.403.277 I llama_perf_context_print:        load time =    1293.07 ms
0.12.403.280 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.403.282 I llama_perf_context_print:        eval time =   11019.40 ms /    32 runs   (  344.36 ms per token,     2.90 tokens per second)
0.12.403.289 I llama_perf_context_print:       total time =   11109.22 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m41.616s
user	46m55.594s
sys	0m6.373s
