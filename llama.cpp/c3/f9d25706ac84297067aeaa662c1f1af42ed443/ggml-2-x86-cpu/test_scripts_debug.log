+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.622 I build: 4458 (c3f9d257) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.825 I main: llama backend init
0.00.000.833 I main: load the model and apply lora adapter, if any
0.00.085.390 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.085.401 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.085.493 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.510 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.512 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.517 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.519 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.521 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.522 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.524 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.525 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.533 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.534 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.548 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.551 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.553 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.289.335 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.397.574 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.421.921 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.421.933 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.421.935 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.421.936 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.421.938 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.421.940 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.421.942 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.421.946 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.421.948 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.421.950 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.421.951 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.421.953 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.421.960 I llama_model_loader: - type  f32:   37 tensors
0.00.421.962 I llama_model_loader: - type q8_0:  127 tensors
0.00.676.608 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.800.827 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.801.991 I llm_load_vocab: special tokens cache size = 5
0.01.023.830 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.023.906 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.023.914 I llm_load_print_meta: arch             = gemma
0.01.023.915 I llm_load_print_meta: vocab type       = SPM
0.01.023.916 I llm_load_print_meta: n_vocab          = 256000
0.01.023.919 I llm_load_print_meta: n_merges         = 0
0.01.023.919 I llm_load_print_meta: vocab_only       = 0
0.01.023.920 I llm_load_print_meta: n_ctx_train      = 8192
0.01.023.921 I llm_load_print_meta: n_embd           = 2048
0.01.023.921 I llm_load_print_meta: n_layer          = 18
0.01.024.000 I llm_load_print_meta: n_head           = 8
0.01.024.011 I llm_load_print_meta: n_head_kv        = 1
0.01.024.012 I llm_load_print_meta: n_rot            = 256
0.01.024.012 I llm_load_print_meta: n_swa            = 0
0.01.024.013 I llm_load_print_meta: n_embd_head_k    = 256
0.01.024.014 I llm_load_print_meta: n_embd_head_v    = 256
0.01.024.022 I llm_load_print_meta: n_gqa            = 8
0.01.024.030 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.024.041 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.024.043 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.024.044 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.024.045 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.024.046 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.024.047 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.024.055 I llm_load_print_meta: n_ff             = 16384
0.01.024.056 I llm_load_print_meta: n_expert         = 0
0.01.024.057 I llm_load_print_meta: n_expert_used    = 0
0.01.024.058 I llm_load_print_meta: causal attn      = 1
0.01.024.060 I llm_load_print_meta: pooling type     = 0
0.01.024.060 I llm_load_print_meta: rope type        = 2
0.01.024.061 I llm_load_print_meta: rope scaling     = linear
0.01.024.063 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.024.064 I llm_load_print_meta: freq_scale_train = 1
0.01.024.065 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.024.065 I llm_load_print_meta: rope_finetuned   = unknown
0.01.024.066 I llm_load_print_meta: ssm_d_conv       = 0
0.01.024.066 I llm_load_print_meta: ssm_d_inner      = 0
0.01.024.067 I llm_load_print_meta: ssm_d_state      = 0
0.01.024.068 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.024.069 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.024.073 I llm_load_print_meta: model type       = 2B
0.01.024.077 I llm_load_print_meta: model ftype      = Q8_0
0.01.024.081 I llm_load_print_meta: model params     = 2.51 B
0.01.024.083 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.024.083 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.024.084 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.024.085 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.024.088 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.024.089 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.024.090 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.024.090 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.024.098 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.024.100 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.024.101 I llm_load_print_meta: max token length = 93
0.01.127.771 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.127.780 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.127.781 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.127.782 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.127.783 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.127.783 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.135.063 I llama_new_context_with_model: n_seq_max     = 1
0.01.135.068 I llama_new_context_with_model: n_ctx         = 4096
0.01.135.069 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.135.069 I llama_new_context_with_model: n_batch       = 2048
0.01.135.069 I llama_new_context_with_model: n_ubatch      = 512
0.01.135.070 I llama_new_context_with_model: flash_attn    = 0
0.01.135.072 I llama_new_context_with_model: freq_base     = 10000.0
0.01.135.073 I llama_new_context_with_model: freq_scale    = 1
0.01.135.073 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.135.160 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.149.138 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.149.181 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.149.299 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.152.494 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.152.498 I llama_new_context_with_model: graph nodes  = 601
0.01.152.498 I llama_new_context_with_model: graph splits = 1
0.01.152.527 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.152.531 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.759.654 I main: llama threadpool init, n_threads = 4
0.01.759.670 I 
0.01.759.792 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.759.796 I 
0.01.760.044 I sampler seed: 3581302721
0.01.760.059 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.760.069 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.760.073 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.760.073 I 
 increasities and their consequences in the context of healthcare.

**Introduction:**

The healthcare landscape is constantly evolving, with new challenges and opportunities emerging at an unprecedented

0.15.322.965 I llama_perf_sampler_print:    sampling time =      49.55 ms /    33 runs   (    1.50 ms per token,   665.93 tokens per second)
0.15.322.968 I llama_perf_context_print:        load time =    1758.73 ms
0.15.322.970 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.322.971 I llama_perf_context_print:        eval time =   13478.22 ms /    32 runs   (  421.19 ms per token,     2.37 tokens per second)
0.15.322.972 I llama_perf_context_print:       total time =   13563.32 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.629 I build: 4458 (c3f9d257) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.863 I main: llama backend init
0.00.000.872 I main: load the model and apply lora adapter, if any
0.00.085.721 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.085.842 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.872 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.878 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.887 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.893 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.898 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.901 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.904 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.907 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.922 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.929 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.932 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.935 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.937 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.291.351 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.393.846 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.418.351 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.418.365 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.418.366 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.418.368 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.418.370 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.418.372 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.418.374 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.418.379 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.418.380 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.418.382 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.418.384 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.418.385 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.418.394 I llama_model_loader: - type  f32:   37 tensors
0.00.418.396 I llama_model_loader: - type q8_0:  127 tensors
0.00.666.074 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.784.235 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.785.247 I llm_load_vocab: special tokens cache size = 5
0.00.998.558 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.998.638 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.998.643 I llm_load_print_meta: arch             = gemma
0.00.998.644 I llm_load_print_meta: vocab type       = SPM
0.00.998.645 I llm_load_print_meta: n_vocab          = 256000
0.00.998.647 I llm_load_print_meta: n_merges         = 0
0.00.998.647 I llm_load_print_meta: vocab_only       = 0
0.00.998.648 I llm_load_print_meta: n_ctx_train      = 8192
0.00.998.648 I llm_load_print_meta: n_embd           = 2048
0.00.998.649 I llm_load_print_meta: n_layer          = 18
0.00.998.724 I llm_load_print_meta: n_head           = 8
0.00.998.731 I llm_load_print_meta: n_head_kv        = 1
0.00.998.733 I llm_load_print_meta: n_rot            = 256
0.00.998.733 I llm_load_print_meta: n_swa            = 0
0.00.998.733 I llm_load_print_meta: n_embd_head_k    = 256
0.00.998.734 I llm_load_print_meta: n_embd_head_v    = 256
0.00.998.739 I llm_load_print_meta: n_gqa            = 8
0.00.998.743 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.998.752 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.998.753 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.998.754 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.998.754 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.998.755 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.998.755 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.998.760 I llm_load_print_meta: n_ff             = 16384
0.00.998.760 I llm_load_print_meta: n_expert         = 0
0.00.998.761 I llm_load_print_meta: n_expert_used    = 0
0.00.998.762 I llm_load_print_meta: causal attn      = 1
0.00.998.763 I llm_load_print_meta: pooling type     = 0
0.00.998.773 I llm_load_print_meta: rope type        = 2
0.00.998.774 I llm_load_print_meta: rope scaling     = linear
0.00.998.775 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.998.776 I llm_load_print_meta: freq_scale_train = 1
0.00.998.787 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.998.788 I llm_load_print_meta: rope_finetuned   = unknown
0.00.998.789 I llm_load_print_meta: ssm_d_conv       = 0
0.00.998.790 I llm_load_print_meta: ssm_d_inner      = 0
0.00.998.790 I llm_load_print_meta: ssm_d_state      = 0
0.00.998.798 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.998.799 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.998.803 I llm_load_print_meta: model type       = 2B
0.00.998.805 I llm_load_print_meta: model ftype      = Q8_0
0.00.998.806 I llm_load_print_meta: model params     = 2.51 B
0.00.998.807 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.998.807 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.998.808 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.998.808 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.998.809 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.998.809 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.998.810 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.998.810 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.998.817 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.998.818 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.998.818 I llm_load_print_meta: max token length = 93
0.01.096.306 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.103.702 I llama_new_context_with_model: n_seq_max     = 1
0.01.103.709 I llama_new_context_with_model: n_ctx         = 4096
0.01.103.709 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.103.710 I llama_new_context_with_model: n_batch       = 2048
0.01.103.710 I llama_new_context_with_model: n_ubatch      = 512
0.01.103.710 I llama_new_context_with_model: flash_attn    = 0
0.01.103.714 I llama_new_context_with_model: freq_base     = 10000.0
0.01.103.714 I llama_new_context_with_model: freq_scale    = 1
0.01.103.715 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.103.812 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.119.382 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.119.427 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.119.553 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.122.806 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.122.810 I llama_new_context_with_model: graph nodes  = 601
0.01.122.810 I llama_new_context_with_model: graph splits = 1
0.01.122.836 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.122.841 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.730.073 I main: llama threadpool init, n_threads = 4
0.01.730.090 I 
0.01.730.225 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.730.230 I 
0.01.730.469 I sampler seed: 2313098026
0.01.730.483 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.730.495 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.730.496 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.730.496 I 
 increamentalism, and the concept of "political order." [end of text]


0.07.281.428 I llama_perf_sampler_print:    sampling time =      20.35 ms /    14 runs   (    1.45 ms per token,   688.06 tokens per second)
0.07.281.431 I llama_perf_context_print:        load time =    1729.11 ms
0.07.281.433 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.281.434 I llama_perf_context_print:        eval time =    5515.32 ms /    13 runs   (  424.26 ms per token,     2.36 tokens per second)
0.07.281.435 I llama_perf_context_print:       total time =    5551.37 ms /    14 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.691 I build: 4458 (c3f9d257) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.911 I main: llama backend init
0.00.000.919 I main: load the model and apply lora adapter, if any
0.00.085.707 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.085.719 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.085.815 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.836 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.838 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.844 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.847 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.850 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.855 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.857 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.861 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.874 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.877 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.880 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.883 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.886 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.292.135 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.394.731 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.419.137 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.419.156 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.419.157 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.419.159 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.419.161 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.419.163 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.419.164 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.419.170 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.419.171 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.419.174 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.419.175 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.419.177 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.419.185 I llama_model_loader: - type  f32:   37 tensors
0.00.419.187 I llama_model_loader: - type q8_0:  127 tensors
0.00.685.323 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.806.403 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.807.440 I llm_load_vocab: special tokens cache size = 5
0.01.028.900 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.028.985 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.028.999 I llm_load_print_meta: arch             = gemma
0.01.029.000 I llm_load_print_meta: vocab type       = SPM
0.01.029.001 I llm_load_print_meta: n_vocab          = 256000
0.01.029.003 I llm_load_print_meta: n_merges         = 0
0.01.029.004 I llm_load_print_meta: vocab_only       = 0
0.01.029.005 I llm_load_print_meta: n_ctx_train      = 8192
0.01.029.005 I llm_load_print_meta: n_embd           = 2048
0.01.029.006 I llm_load_print_meta: n_layer          = 18
0.01.029.097 I llm_load_print_meta: n_head           = 8
0.01.029.108 I llm_load_print_meta: n_head_kv        = 1
0.01.029.109 I llm_load_print_meta: n_rot            = 256
0.01.029.110 I llm_load_print_meta: n_swa            = 0
0.01.029.110 I llm_load_print_meta: n_embd_head_k    = 256
0.01.029.110 I llm_load_print_meta: n_embd_head_v    = 256
0.01.029.118 I llm_load_print_meta: n_gqa            = 8
0.01.029.126 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.029.137 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.029.140 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.029.141 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.029.142 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.029.142 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.029.143 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.029.148 I llm_load_print_meta: n_ff             = 16384
0.01.029.149 I llm_load_print_meta: n_expert         = 0
0.01.029.150 I llm_load_print_meta: n_expert_used    = 0
0.01.029.151 I llm_load_print_meta: causal attn      = 1
0.01.029.152 I llm_load_print_meta: pooling type     = 0
0.01.029.153 I llm_load_print_meta: rope type        = 2
0.01.029.154 I llm_load_print_meta: rope scaling     = linear
0.01.029.156 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.029.157 I llm_load_print_meta: freq_scale_train = 1
0.01.029.158 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.029.158 I llm_load_print_meta: rope_finetuned   = unknown
0.01.029.159 I llm_load_print_meta: ssm_d_conv       = 0
0.01.029.159 I llm_load_print_meta: ssm_d_inner      = 0
0.01.029.163 I llm_load_print_meta: ssm_d_state      = 0
0.01.029.164 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.029.164 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.029.169 I llm_load_print_meta: model type       = 2B
0.01.029.171 I llm_load_print_meta: model ftype      = Q8_0
0.01.029.172 I llm_load_print_meta: model params     = 2.51 B
0.01.029.175 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.029.176 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.029.177 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.029.178 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.029.179 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.029.180 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.029.180 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.029.190 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.029.199 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.029.200 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.029.204 I llm_load_print_meta: max token length = 93
0.01.109.536 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.109.543 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.109.544 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.109.545 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.109.545 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.109.546 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.116.849 I llama_new_context_with_model: n_seq_max     = 1
0.01.116.853 I llama_new_context_with_model: n_ctx         = 4096
0.01.116.854 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.116.854 I llama_new_context_with_model: n_batch       = 2048
0.01.116.854 I llama_new_context_with_model: n_ubatch      = 512
0.01.116.855 I llama_new_context_with_model: flash_attn    = 0
0.01.116.857 I llama_new_context_with_model: freq_base     = 10000.0
0.01.116.858 I llama_new_context_with_model: freq_scale    = 1
0.01.116.858 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.116.947 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.131.369 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.131.407 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.131.524 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.135.051 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.135.055 I llama_new_context_with_model: graph nodes  = 601
0.01.135.056 I llama_new_context_with_model: graph splits = 1
0.01.135.083 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.135.087 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.774.918 I main: llama threadpool init, n_threads = 4
0.01.774.934 I 
0.01.775.076 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.775.081 I 
0.01.775.343 I sampler seed: 621515011
0.01.775.362 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.775.386 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.775.388 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.775.388 I 
 increamically. [end of text]


0.03.508.619 I llama_perf_sampler_print:    sampling time =       6.36 ms /     5 runs   (    1.27 ms per token,   786.16 tokens per second)
0.03.508.621 I llama_perf_context_print:        load time =    1773.91 ms
0.03.508.622 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.508.624 I llama_perf_context_print:        eval time =    1721.35 ms /     4 runs   (  430.34 ms per token,     2.32 tokens per second)
0.03.508.638 I llama_perf_context_print:       total time =    1733.71 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.626 I build: 4458 (c3f9d257) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.823 I main: llama backend init
0.00.000.831 I main: load the model and apply lora adapter, if any
0.00.085.516 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.085.525 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.085.620 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.640 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.645 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.650 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.652 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.657 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.658 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.660 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.663 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.671 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.673 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.675 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.677 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.678 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.290.109 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.391.979 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.416.328 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.416.338 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.416.340 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.416.342 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.416.343 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.416.345 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.416.347 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.416.352 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.416.353 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.416.355 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.416.357 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.416.359 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.416.367 I llama_model_loader: - type  f32:   37 tensors
0.00.416.369 I llama_model_loader: - type q8_0:  127 tensors
0.00.685.136 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.804.254 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.805.101 I llm_load_vocab: special tokens cache size = 5
0.01.019.439 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.019.520 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.019.525 I llm_load_print_meta: arch             = gemma
0.01.019.526 I llm_load_print_meta: vocab type       = SPM
0.01.019.527 I llm_load_print_meta: n_vocab          = 256000
0.01.019.530 I llm_load_print_meta: n_merges         = 0
0.01.019.530 I llm_load_print_meta: vocab_only       = 0
0.01.019.531 I llm_load_print_meta: n_ctx_train      = 8192
0.01.019.531 I llm_load_print_meta: n_embd           = 2048
0.01.019.532 I llm_load_print_meta: n_layer          = 18
0.01.019.612 I llm_load_print_meta: n_head           = 8
0.01.019.623 I llm_load_print_meta: n_head_kv        = 1
0.01.019.624 I llm_load_print_meta: n_rot            = 256
0.01.019.625 I llm_load_print_meta: n_swa            = 0
0.01.019.625 I llm_load_print_meta: n_embd_head_k    = 256
0.01.019.626 I llm_load_print_meta: n_embd_head_v    = 256
0.01.019.631 I llm_load_print_meta: n_gqa            = 8
0.01.019.636 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.019.643 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.019.645 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.019.647 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.019.647 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.019.647 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.019.648 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.019.653 I llm_load_print_meta: n_ff             = 16384
0.01.019.654 I llm_load_print_meta: n_expert         = 0
0.01.019.654 I llm_load_print_meta: n_expert_used    = 0
0.01.019.655 I llm_load_print_meta: causal attn      = 1
0.01.019.658 I llm_load_print_meta: pooling type     = 0
0.01.019.658 I llm_load_print_meta: rope type        = 2
0.01.019.658 I llm_load_print_meta: rope scaling     = linear
0.01.019.660 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.019.661 I llm_load_print_meta: freq_scale_train = 1
0.01.019.661 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.019.661 I llm_load_print_meta: rope_finetuned   = unknown
0.01.019.661 I llm_load_print_meta: ssm_d_conv       = 0
0.01.019.662 I llm_load_print_meta: ssm_d_inner      = 0
0.01.019.662 I llm_load_print_meta: ssm_d_state      = 0
0.01.019.662 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.019.663 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.019.665 I llm_load_print_meta: model type       = 2B
0.01.019.667 I llm_load_print_meta: model ftype      = Q8_0
0.01.019.667 I llm_load_print_meta: model params     = 2.51 B
0.01.019.669 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.019.670 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.019.670 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.019.682 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.019.683 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.019.683 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.019.684 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.019.685 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.019.691 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.019.693 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.019.693 I llm_load_print_meta: max token length = 93
0.01.092.354 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.092.364 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.099.524 I llama_new_context_with_model: n_seq_max     = 1
0.01.099.530 I llama_new_context_with_model: n_ctx         = 4096
0.01.099.530 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.099.531 I llama_new_context_with_model: n_batch       = 2048
0.01.099.531 I llama_new_context_with_model: n_ubatch      = 512
0.01.099.531 I llama_new_context_with_model: flash_attn    = 0
0.01.099.534 I llama_new_context_with_model: freq_base     = 10000.0
0.01.099.535 I llama_new_context_with_model: freq_scale    = 1
0.01.099.536 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.099.616 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.113.624 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.113.665 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.113.786 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.117.359 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.117.363 I llama_new_context_with_model: graph nodes  = 601
0.01.117.363 I llama_new_context_with_model: graph splits = 1
0.01.117.389 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.117.392 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.724.530 I main: llama threadpool init, n_threads = 4
0.01.724.547 I 
0.01.724.686 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.724.692 I 
0.01.724.940 I sampler seed: 3811032086
0.01.724.955 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.724.965 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.724.969 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.724.969 I 
 increadibly, and in a manner that's bound to perplex the very notion of reason. [end of text]


0.10.178.028 I llama_perf_sampler_print:    sampling time =      31.10 ms /    21 runs   (    1.48 ms per token,   675.22 tokens per second)
0.10.178.031 I llama_perf_context_print:        load time =    1723.62 ms
0.10.178.032 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.178.034 I llama_perf_context_print:        eval time =    8399.95 ms /    20 runs   (  420.00 ms per token,     2.38 tokens per second)
0.10.178.035 I llama_perf_context_print:       total time =    8453.51 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m47.351s
user	2m13.056s
sys	0m9.376s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4458 (c3f9d257)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186750.36 ms
main:    total time = 186750.36 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.680 I build: 4458 (c3f9d257) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.877 I main: llama backend init
0.00.000.884 I main: load the model and apply lora adapter, if any
0.00.085.646 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.085.659 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.085.759 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.782 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.788 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.794 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.796 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.798 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.800 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.801 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.803 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.810 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.814 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.816 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.818 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.297.253 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.399.890 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.424.521 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.424.537 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.424.539 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.424.541 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.424.542 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.424.544 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.424.546 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.424.551 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.424.553 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.424.554 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.424.556 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.424.558 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.424.560 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.424.568 I llama_model_loader: - type  f32:   37 tensors
0.00.424.570 I llama_model_loader: - type q4_K:  108 tensors
0.00.424.571 I llama_model_loader: - type q6_K:   19 tensors
0.00.689.444 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.810.515 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.811.466 I llm_load_vocab: special tokens cache size = 5
0.01.025.118 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.025.192 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.025.197 I llm_load_print_meta: arch             = gemma
0.01.025.197 I llm_load_print_meta: vocab type       = SPM
0.01.025.198 I llm_load_print_meta: n_vocab          = 256000
0.01.025.200 I llm_load_print_meta: n_merges         = 0
0.01.025.201 I llm_load_print_meta: vocab_only       = 0
0.01.025.201 I llm_load_print_meta: n_ctx_train      = 8192
0.01.025.202 I llm_load_print_meta: n_embd           = 2048
0.01.025.202 I llm_load_print_meta: n_layer          = 18
0.01.025.281 I llm_load_print_meta: n_head           = 8
0.01.025.288 I llm_load_print_meta: n_head_kv        = 1
0.01.025.289 I llm_load_print_meta: n_rot            = 256
0.01.025.289 I llm_load_print_meta: n_swa            = 0
0.01.025.290 I llm_load_print_meta: n_embd_head_k    = 256
0.01.025.290 I llm_load_print_meta: n_embd_head_v    = 256
0.01.025.295 I llm_load_print_meta: n_gqa            = 8
0.01.025.300 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.025.305 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.025.308 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.025.309 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.025.310 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.025.310 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.025.311 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.025.316 I llm_load_print_meta: n_ff             = 16384
0.01.025.317 I llm_load_print_meta: n_expert         = 0
0.01.025.317 I llm_load_print_meta: n_expert_used    = 0
0.01.025.318 I llm_load_print_meta: causal attn      = 1
0.01.025.318 I llm_load_print_meta: pooling type     = 0
0.01.025.319 I llm_load_print_meta: rope type        = 2
0.01.025.319 I llm_load_print_meta: rope scaling     = linear
0.01.025.321 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.025.322 I llm_load_print_meta: freq_scale_train = 1
0.01.025.322 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.025.323 I llm_load_print_meta: rope_finetuned   = unknown
0.01.025.323 I llm_load_print_meta: ssm_d_conv       = 0
0.01.025.323 I llm_load_print_meta: ssm_d_inner      = 0
0.01.025.325 I llm_load_print_meta: ssm_d_state      = 0
0.01.025.325 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.025.325 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.025.336 I llm_load_print_meta: model type       = 2B
0.01.025.357 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.01.025.358 I llm_load_print_meta: model params     = 2.51 B
0.01.025.359 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.01.025.364 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.025.365 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.025.365 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.025.373 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.025.376 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.025.377 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.025.378 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.025.384 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.025.393 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.025.394 I llm_load_print_meta: max token length = 93
0.01.088.847 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.088.855 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.088.856 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.088.857 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.088.858 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.088.858 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.095.641 I llama_new_context_with_model: n_seq_max     = 1
0.01.095.647 I llama_new_context_with_model: n_ctx         = 4096
0.01.095.647 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.095.648 I llama_new_context_with_model: n_batch       = 2048
0.01.095.648 I llama_new_context_with_model: n_ubatch      = 512
0.01.095.649 I llama_new_context_with_model: flash_attn    = 0
0.01.095.651 I llama_new_context_with_model: freq_base     = 10000.0
0.01.095.651 I llama_new_context_with_model: freq_scale    = 1
0.01.095.652 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.095.732 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.110.490 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.110.527 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.110.647 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.113.941 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.113.946 I llama_new_context_with_model: graph nodes  = 601
0.01.113.946 I llama_new_context_with_model: graph splits = 1
0.01.113.971 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.113.975 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.695.057 I main: llama threadpool init, n_threads = 4
0.01.695.074 I 
0.01.695.197 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.695.201 I 
0.01.695.433 I sampler seed: 1117657823
0.01.695.447 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.695.457 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.695.460 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.695.461 I 
 squaRE.

## Question

Write a function that reverses a list recursively.

**Requirements:**

- The function should accept a list of elements as its

0.12.785.841 I llama_perf_sampler_print:    sampling time =      49.50 ms /    33 runs   (    1.50 ms per token,   666.72 tokens per second)
0.12.785.845 I llama_perf_context_print:        load time =    1694.08 ms
0.12.785.847 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.785.849 I llama_perf_context_print:        eval time =   11006.07 ms /    32 runs   (  343.94 ms per token,     2.91 tokens per second)
0.12.785.850 I llama_perf_context_print:       total time =   11090.79 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4458 (c3f9d257)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186394.54 ms
main:    total time = 186394.54 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 4458 (c3f9d257) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.856 I main: llama backend init
0.00.000.865 I main: load the model and apply lora adapter, if any
0.00.085.405 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.085.525 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.552 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.557 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.563 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.565 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.567 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.569 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.571 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.573 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.582 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.586 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.588 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.589 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.295.281 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.397.881 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.422.387 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.422.403 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.422.405 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.422.407 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.422.409 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.422.411 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.422.413 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.422.418 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.422.419 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.422.421 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.422.430 I llama_model_loader: - type  f32:   37 tensors
0.00.422.433 I llama_model_loader: - type q4_K:  108 tensors
0.00.422.434 I llama_model_loader: - type q6_K:   19 tensors
0.00.688.126 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.807.991 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.808.963 I llm_load_vocab: special tokens cache size = 5
0.01.027.393 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.027.471 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.027.478 I llm_load_print_meta: arch             = gemma
0.01.027.479 I llm_load_print_meta: vocab type       = SPM
0.01.027.480 I llm_load_print_meta: n_vocab          = 256000
0.01.027.483 I llm_load_print_meta: n_merges         = 0
0.01.027.484 I llm_load_print_meta: vocab_only       = 0
0.01.027.484 I llm_load_print_meta: n_ctx_train      = 8192
0.01.027.484 I llm_load_print_meta: n_embd           = 2048
0.01.027.485 I llm_load_print_meta: n_layer          = 18
0.01.027.565 I llm_load_print_meta: n_head           = 8
0.01.027.575 I llm_load_print_meta: n_head_kv        = 1
0.01.027.576 I llm_load_print_meta: n_rot            = 256
0.01.027.576 I llm_load_print_meta: n_swa            = 0
0.01.027.577 I llm_load_print_meta: n_embd_head_k    = 256
0.01.027.578 I llm_load_print_meta: n_embd_head_v    = 256
0.01.027.583 I llm_load_print_meta: n_gqa            = 8
0.01.027.588 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.027.593 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.027.597 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.027.598 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.027.598 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.027.599 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.027.599 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.027.604 I llm_load_print_meta: n_ff             = 16384
0.01.027.604 I llm_load_print_meta: n_expert         = 0
0.01.027.605 I llm_load_print_meta: n_expert_used    = 0
0.01.027.606 I llm_load_print_meta: causal attn      = 1
0.01.027.607 I llm_load_print_meta: pooling type     = 0
0.01.027.607 I llm_load_print_meta: rope type        = 2
0.01.027.608 I llm_load_print_meta: rope scaling     = linear
0.01.027.618 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.027.619 I llm_load_print_meta: freq_scale_train = 1
0.01.027.620 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.027.620 I llm_load_print_meta: rope_finetuned   = unknown
0.01.027.635 I llm_load_print_meta: ssm_d_conv       = 0
0.01.027.636 I llm_load_print_meta: ssm_d_inner      = 0
0.01.027.637 I llm_load_print_meta: ssm_d_state      = 0
0.01.027.637 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.027.638 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.027.641 I llm_load_print_meta: model type       = 2B
0.01.027.643 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.01.027.644 I llm_load_print_meta: model params     = 2.51 B
0.01.027.645 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.01.027.645 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.027.646 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.027.646 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.027.647 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.027.648 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.027.648 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.027.651 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.027.657 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.027.658 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.027.659 I llm_load_print_meta: max token length = 93
0.01.089.956 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.01.097.037 I llama_new_context_with_model: n_seq_max     = 1
0.01.097.042 I llama_new_context_with_model: n_ctx         = 4096
0.01.097.043 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.097.043 I llama_new_context_with_model: n_batch       = 2048
0.01.097.043 I llama_new_context_with_model: n_ubatch      = 512
0.01.097.044 I llama_new_context_with_model: flash_attn    = 0
0.01.097.046 I llama_new_context_with_model: freq_base     = 10000.0
0.01.097.047 I llama_new_context_with_model: freq_scale    = 1
0.01.097.047 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.097.143 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.112.643 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.112.686 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.112.802 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.116.482 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.116.487 I llama_new_context_with_model: graph nodes  = 601
0.01.116.487 I llama_new_context_with_model: graph splits = 1
0.01.116.511 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.116.514 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.697.685 I main: llama threadpool init, n_threads = 4
0.01.697.703 I 
0.01.697.828 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.697.832 I 
0.01.698.064 I sampler seed: 2167195351
0.01.698.078 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.698.089 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.698.090 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.698.091 I 
 squaRED 2018

## Squashed: A Game of Power and Corruption

Squashed is a game of power, corruption, and manipulation that

0.12.815.416 I llama_perf_sampler_print:    sampling time =      49.56 ms /    33 runs   (    1.50 ms per token,   665.90 tokens per second)
0.12.815.419 I llama_perf_context_print:        load time =    1696.74 ms
0.12.815.420 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.815.435 I llama_perf_context_print:        eval time =   11032.82 ms /    32 runs   (  344.78 ms per token,     2.90 tokens per second)
0.12.815.436 I llama_perf_context_print:       total time =   11117.74 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m42.010s
user	46m44.151s
sys	0m6.313s
