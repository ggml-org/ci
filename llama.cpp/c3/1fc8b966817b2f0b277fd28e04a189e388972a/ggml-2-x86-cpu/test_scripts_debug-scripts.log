+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.667 I build: 4411 (c31fc8b9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.872 I main: llama backend init
0.00.000.880 I main: load the model and apply lora adapter, if any
0.00.023.718 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.731 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.826 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.840 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.842 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.847 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.851 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.852 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.853 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.855 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.856 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.863 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.864 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.866 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.867 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.870 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.599 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.195 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.496 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.508 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.509 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.510 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.512 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.513 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.516 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.521 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.522 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.524 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.525 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.349.527 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.538 I llama_model_loader: - type  f32:   37 tensors
0.00.349.541 I llama_model_loader: - type q8_0:  127 tensors
0.00.590.471 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.656.424 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.657.364 I llm_load_vocab: special tokens cache size = 5
0.00.863.650 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.863.728 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.863.733 I llm_load_print_meta: arch             = gemma
0.00.863.734 I llm_load_print_meta: vocab type       = SPM
0.00.863.735 I llm_load_print_meta: n_vocab          = 256000
0.00.863.738 I llm_load_print_meta: n_merges         = 0
0.00.863.738 I llm_load_print_meta: vocab_only       = 0
0.00.863.739 I llm_load_print_meta: n_ctx_train      = 8192
0.00.863.739 I llm_load_print_meta: n_embd           = 2048
0.00.863.740 I llm_load_print_meta: n_layer          = 18
0.00.863.818 I llm_load_print_meta: n_head           = 8
0.00.863.826 I llm_load_print_meta: n_head_kv        = 1
0.00.863.827 I llm_load_print_meta: n_rot            = 256
0.00.863.829 I llm_load_print_meta: n_swa            = 0
0.00.863.829 I llm_load_print_meta: n_embd_head_k    = 256
0.00.863.840 I llm_load_print_meta: n_embd_head_v    = 256
0.00.863.846 I llm_load_print_meta: n_gqa            = 8
0.00.863.853 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.863.858 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.863.859 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.863.861 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.863.862 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.863.875 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.863.876 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.863.881 I llm_load_print_meta: n_ff             = 16384
0.00.863.882 I llm_load_print_meta: n_expert         = 0
0.00.863.882 I llm_load_print_meta: n_expert_used    = 0
0.00.863.882 I llm_load_print_meta: causal attn      = 1
0.00.863.883 I llm_load_print_meta: pooling type     = 0
0.00.863.883 I llm_load_print_meta: rope type        = 2
0.00.863.884 I llm_load_print_meta: rope scaling     = linear
0.00.863.888 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.863.888 I llm_load_print_meta: freq_scale_train = 1
0.00.863.889 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.863.889 I llm_load_print_meta: rope_finetuned   = unknown
0.00.863.889 I llm_load_print_meta: ssm_d_conv       = 0
0.00.863.890 I llm_load_print_meta: ssm_d_inner      = 0
0.00.863.890 I llm_load_print_meta: ssm_d_state      = 0
0.00.863.890 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.863.890 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.863.893 I llm_load_print_meta: model type       = 2B
0.00.863.895 I llm_load_print_meta: model ftype      = Q8_0
0.00.863.896 I llm_load_print_meta: model params     = 2.51 B
0.00.863.897 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.863.898 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.863.899 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.863.899 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.863.900 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.863.900 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.863.901 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.863.902 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.863.909 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.863.910 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.863.910 I llm_load_print_meta: max token length = 93
0.00.967.185 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.967.195 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.967.196 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.967.197 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.967.198 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.967.198 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.973.199 I llama_new_context_with_model: n_seq_max     = 1
0.00.973.207 I llama_new_context_with_model: n_ctx         = 4096
0.00.973.207 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.973.208 I llama_new_context_with_model: n_batch       = 2048
0.00.973.208 I llama_new_context_with_model: n_ubatch      = 512
0.00.973.209 I llama_new_context_with_model: flash_attn    = 0
0.00.973.211 I llama_new_context_with_model: freq_base     = 10000.0
0.00.973.212 I llama_new_context_with_model: freq_scale    = 1
0.00.973.212 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.973.297 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.988.005 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.988.045 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.988.191 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.990.874 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.990.878 I llama_new_context_with_model: graph nodes  = 601
0.00.990.879 I llama_new_context_with_model: graph splits = 1
0.00.990.904 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.990.907 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.598.623 I main: llama threadpool init, n_threads = 4
0.01.598.640 I 
0.01.598.759 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.598.764 I 
0.01.599.001 I sampler seed: 3182536426
0.01.599.015 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.599.026 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.599.029 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.599.029 I 
 maneuvring, a colloquial expression used to describe something that is unclear or incomplete. [end of text]


0.09.192.325 I llama_perf_sampler_print:    sampling time =      27.94 ms /    19 runs   (    1.47 ms per token,   680.08 tokens per second)
0.09.192.329 I llama_perf_context_print:        load time =    1597.65 ms
0.09.192.341 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.192.343 I llama_perf_context_print:        eval time =    7545.00 ms /    18 runs   (  419.17 ms per token,     2.39 tokens per second)
0.09.192.345 I llama_perf_context_print:       total time =    7593.71 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.681 I build: 4411 (c31fc8b9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.878 I main: llama backend init
0.00.000.886 I main: load the model and apply lora adapter, if any
0.00.023.369 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.472 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.488 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.493 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.498 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.509 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.513 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.514 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.522 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.524 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.530 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.534 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.535 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.536 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.538 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.241.169 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.342.304 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.366.492 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.366.504 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.366.505 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.366.506 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.366.508 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.366.509 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.366.510 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.366.515 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.366.516 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.366.517 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.366.518 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.366.520 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.366.529 I llama_model_loader: - type  f32:   37 tensors
0.00.366.532 I llama_model_loader: - type q8_0:  127 tensors
0.00.591.586 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.656.432 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.657.377 I llm_load_vocab: special tokens cache size = 5
0.00.859.856 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.859.932 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.859.937 I llm_load_print_meta: arch             = gemma
0.00.859.938 I llm_load_print_meta: vocab type       = SPM
0.00.859.939 I llm_load_print_meta: n_vocab          = 256000
0.00.859.941 I llm_load_print_meta: n_merges         = 0
0.00.859.942 I llm_load_print_meta: vocab_only       = 0
0.00.859.942 I llm_load_print_meta: n_ctx_train      = 8192
0.00.859.943 I llm_load_print_meta: n_embd           = 2048
0.00.859.943 I llm_load_print_meta: n_layer          = 18
0.00.860.016 I llm_load_print_meta: n_head           = 8
0.00.860.024 I llm_load_print_meta: n_head_kv        = 1
0.00.860.029 I llm_load_print_meta: n_rot            = 256
0.00.860.029 I llm_load_print_meta: n_swa            = 0
0.00.860.030 I llm_load_print_meta: n_embd_head_k    = 256
0.00.860.030 I llm_load_print_meta: n_embd_head_v    = 256
0.00.860.035 I llm_load_print_meta: n_gqa            = 8
0.00.860.041 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.860.046 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.860.048 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.860.050 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.860.050 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.860.051 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.860.051 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.860.057 I llm_load_print_meta: n_ff             = 16384
0.00.860.058 I llm_load_print_meta: n_expert         = 0
0.00.860.058 I llm_load_print_meta: n_expert_used    = 0
0.00.860.068 I llm_load_print_meta: causal attn      = 1
0.00.860.069 I llm_load_print_meta: pooling type     = 0
0.00.860.069 I llm_load_print_meta: rope type        = 2
0.00.860.070 I llm_load_print_meta: rope scaling     = linear
0.00.860.072 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.860.072 I llm_load_print_meta: freq_scale_train = 1
0.00.860.073 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.860.073 I llm_load_print_meta: rope_finetuned   = unknown
0.00.860.074 I llm_load_print_meta: ssm_d_conv       = 0
0.00.860.075 I llm_load_print_meta: ssm_d_inner      = 0
0.00.860.075 I llm_load_print_meta: ssm_d_state      = 0
0.00.860.075 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.860.076 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.860.079 I llm_load_print_meta: model type       = 2B
0.00.860.081 I llm_load_print_meta: model ftype      = Q8_0
0.00.860.082 I llm_load_print_meta: model params     = 2.51 B
0.00.860.083 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.860.083 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.860.084 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.860.084 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.860.085 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.860.086 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.860.087 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.860.098 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.860.106 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.860.107 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.860.108 I llm_load_print_meta: max token length = 93
0.00.956.848 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.962.674 I llama_new_context_with_model: n_seq_max     = 1
0.00.962.681 I llama_new_context_with_model: n_ctx         = 4096
0.00.962.682 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.962.682 I llama_new_context_with_model: n_batch       = 2048
0.00.962.682 I llama_new_context_with_model: n_ubatch      = 512
0.00.962.683 I llama_new_context_with_model: flash_attn    = 0
0.00.962.685 I llama_new_context_with_model: freq_base     = 10000.0
0.00.962.686 I llama_new_context_with_model: freq_scale    = 1
0.00.962.687 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.962.772 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.977.907 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.977.950 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.978.090 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.980.701 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.980.705 I llama_new_context_with_model: graph nodes  = 601
0.00.980.705 I llama_new_context_with_model: graph splits = 1
0.00.980.729 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.980.732 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.590.325 I main: llama threadpool init, n_threads = 4
0.01.590.340 I 
0.01.590.464 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.590.468 I 
0.01.590.712 I sampler seed: 3403790597
0.01.590.727 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.590.739 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.590.740 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.590.740 I 
 increabling?

I am unable to find the requested information in the context provided. Please provide additional context or specify your query so I can assist you better.

0.15.186.781 I llama_perf_sampler_print:    sampling time =      49.26 ms /    33 runs   (    1.49 ms per token,   669.90 tokens per second)
0.15.186.785 I llama_perf_context_print:        load time =    1589.35 ms
0.15.186.787 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.186.789 I llama_perf_context_print:        eval time =   13511.49 ms /    32 runs   (  422.23 ms per token,     2.37 tokens per second)
0.15.186.790 I llama_perf_context_print:       total time =   13596.47 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.719 I build: 4411 (c31fc8b9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.916 I main: llama backend init
0.00.000.925 I main: load the model and apply lora adapter, if any
0.00.023.930 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.944 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.040 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.056 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.060 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.066 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.068 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.069 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.072 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.073 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.075 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.083 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.087 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.088 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.090 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.091 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.245.067 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.346.280 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.370.446 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.370.455 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.370.456 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.370.457 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.370.458 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.370.460 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.370.461 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.370.466 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.370.467 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.370.469 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.370.470 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.370.471 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.370.479 I llama_model_loader: - type  f32:   37 tensors
0.00.370.482 I llama_model_loader: - type q8_0:  127 tensors
0.00.590.881 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.654.008 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.654.943 I llm_load_vocab: special tokens cache size = 5
0.00.880.809 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.880.883 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.880.889 I llm_load_print_meta: arch             = gemma
0.00.880.889 I llm_load_print_meta: vocab type       = SPM
0.00.880.890 I llm_load_print_meta: n_vocab          = 256000
0.00.880.892 I llm_load_print_meta: n_merges         = 0
0.00.880.893 I llm_load_print_meta: vocab_only       = 0
0.00.880.893 I llm_load_print_meta: n_ctx_train      = 8192
0.00.880.894 I llm_load_print_meta: n_embd           = 2048
0.00.880.894 I llm_load_print_meta: n_layer          = 18
0.00.880.970 I llm_load_print_meta: n_head           = 8
0.00.880.977 I llm_load_print_meta: n_head_kv        = 1
0.00.880.977 I llm_load_print_meta: n_rot            = 256
0.00.880.978 I llm_load_print_meta: n_swa            = 0
0.00.880.978 I llm_load_print_meta: n_embd_head_k    = 256
0.00.880.978 I llm_load_print_meta: n_embd_head_v    = 256
0.00.880.983 I llm_load_print_meta: n_gqa            = 8
0.00.880.988 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.880.992 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.880.993 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.880.995 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.880.996 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.880.996 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.880.998 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.881.003 I llm_load_print_meta: n_ff             = 16384
0.00.881.004 I llm_load_print_meta: n_expert         = 0
0.00.881.005 I llm_load_print_meta: n_expert_used    = 0
0.00.881.010 I llm_load_print_meta: causal attn      = 1
0.00.881.010 I llm_load_print_meta: pooling type     = 0
0.00.881.010 I llm_load_print_meta: rope type        = 2
0.00.881.011 I llm_load_print_meta: rope scaling     = linear
0.00.881.012 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.881.013 I llm_load_print_meta: freq_scale_train = 1
0.00.881.013 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.881.014 I llm_load_print_meta: rope_finetuned   = unknown
0.00.881.015 I llm_load_print_meta: ssm_d_conv       = 0
0.00.881.015 I llm_load_print_meta: ssm_d_inner      = 0
0.00.881.016 I llm_load_print_meta: ssm_d_state      = 0
0.00.881.019 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.881.020 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.881.022 I llm_load_print_meta: model type       = 2B
0.00.881.024 I llm_load_print_meta: model ftype      = Q8_0
0.00.881.025 I llm_load_print_meta: model params     = 2.51 B
0.00.881.026 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.881.026 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.881.027 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.881.027 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.881.028 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.881.029 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.881.029 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.881.030 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.881.036 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.881.037 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.881.038 I llm_load_print_meta: max token length = 93
0.00.959.551 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.959.558 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.959.559 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.959.560 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.959.561 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.959.562 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.965.660 I llama_new_context_with_model: n_seq_max     = 1
0.00.965.669 I llama_new_context_with_model: n_ctx         = 4096
0.00.965.669 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.965.670 I llama_new_context_with_model: n_batch       = 2048
0.00.965.670 I llama_new_context_with_model: n_ubatch      = 512
0.00.965.671 I llama_new_context_with_model: flash_attn    = 0
0.00.965.675 I llama_new_context_with_model: freq_base     = 10000.0
0.00.965.676 I llama_new_context_with_model: freq_scale    = 1
0.00.965.677 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.965.767 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.981.374 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.981.418 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.981.538 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.984.399 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.984.404 I llama_new_context_with_model: graph nodes  = 601
0.00.984.404 I llama_new_context_with_model: graph splits = 1
0.00.984.431 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.984.434 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.595.161 I main: llama threadpool init, n_threads = 4
0.01.595.176 I 
0.01.595.295 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.595.299 I 
0.01.595.533 I sampler seed: 3088785427
0.01.595.547 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.595.558 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.595.559 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.595.559 I 
 seconally.

**Section I: Grammar and Usage**

- Use of apostrophes
- Use of commas
- Use of periods
- Sentence structure

0.15.070.323 I llama_perf_sampler_print:    sampling time =      49.41 ms /    33 runs   (    1.50 ms per token,   667.85 tokens per second)
0.15.070.326 I llama_perf_context_print:        load time =    1594.13 ms
0.15.070.328 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.070.342 I llama_perf_context_print:        eval time =   13390.34 ms /    32 runs   (  418.45 ms per token,     2.39 tokens per second)
0.15.070.344 I llama_perf_context_print:       total time =   13475.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.655 I build: 4411 (c31fc8b9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.860 I main: llama backend init
0.00.000.868 I main: load the model and apply lora adapter, if any
0.00.023.636 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.647 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.734 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.747 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.749 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.754 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.755 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.756 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.758 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.759 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.760 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.774 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.777 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.778 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.779 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.781 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.244.983 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.345.957 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.370.297 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.370.309 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.370.310 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.370.311 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.370.312 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.370.314 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.370.315 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.370.319 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.370.320 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.370.321 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.370.322 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.370.324 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.370.335 I llama_model_loader: - type  f32:   37 tensors
0.00.370.337 I llama_model_loader: - type q8_0:  127 tensors
0.00.593.068 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.662.056 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.662.984 I llm_load_vocab: special tokens cache size = 5
0.00.879.818 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.879.893 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.879.898 I llm_load_print_meta: arch             = gemma
0.00.879.899 I llm_load_print_meta: vocab type       = SPM
0.00.879.900 I llm_load_print_meta: n_vocab          = 256000
0.00.879.903 I llm_load_print_meta: n_merges         = 0
0.00.879.903 I llm_load_print_meta: vocab_only       = 0
0.00.879.904 I llm_load_print_meta: n_ctx_train      = 8192
0.00.879.904 I llm_load_print_meta: n_embd           = 2048
0.00.879.905 I llm_load_print_meta: n_layer          = 18
0.00.879.981 I llm_load_print_meta: n_head           = 8
0.00.879.988 I llm_load_print_meta: n_head_kv        = 1
0.00.879.989 I llm_load_print_meta: n_rot            = 256
0.00.879.989 I llm_load_print_meta: n_swa            = 0
0.00.879.990 I llm_load_print_meta: n_embd_head_k    = 256
0.00.879.990 I llm_load_print_meta: n_embd_head_v    = 256
0.00.879.995 I llm_load_print_meta: n_gqa            = 8
0.00.879.999 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.880.004 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.880.005 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.880.007 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.880.007 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.880.008 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.880.008 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.880.013 I llm_load_print_meta: n_ff             = 16384
0.00.880.014 I llm_load_print_meta: n_expert         = 0
0.00.880.014 I llm_load_print_meta: n_expert_used    = 0
0.00.880.015 I llm_load_print_meta: causal attn      = 1
0.00.880.015 I llm_load_print_meta: pooling type     = 0
0.00.880.015 I llm_load_print_meta: rope type        = 2
0.00.880.016 I llm_load_print_meta: rope scaling     = linear
0.00.880.017 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.880.018 I llm_load_print_meta: freq_scale_train = 1
0.00.880.018 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.880.018 I llm_load_print_meta: rope_finetuned   = unknown
0.00.880.019 I llm_load_print_meta: ssm_d_conv       = 0
0.00.880.019 I llm_load_print_meta: ssm_d_inner      = 0
0.00.880.019 I llm_load_print_meta: ssm_d_state      = 0
0.00.880.020 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.880.020 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.880.023 I llm_load_print_meta: model type       = 2B
0.00.880.024 I llm_load_print_meta: model ftype      = Q8_0
0.00.880.025 I llm_load_print_meta: model params     = 2.51 B
0.00.880.026 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.880.026 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.880.027 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.880.027 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.880.028 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.880.028 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.880.028 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.880.028 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.880.034 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.880.036 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.880.036 I llm_load_print_meta: max token length = 93
0.00.954.233 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.954.245 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.960.346 I llama_new_context_with_model: n_seq_max     = 1
0.00.960.355 I llama_new_context_with_model: n_ctx         = 4096
0.00.960.356 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.960.356 I llama_new_context_with_model: n_batch       = 2048
0.00.960.357 I llama_new_context_with_model: n_ubatch      = 512
0.00.960.357 I llama_new_context_with_model: flash_attn    = 0
0.00.960.361 I llama_new_context_with_model: freq_base     = 10000.0
0.00.960.362 I llama_new_context_with_model: freq_scale    = 1
0.00.960.363 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.960.460 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.975.847 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.975.891 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.976.049 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.978.696 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.978.700 I llama_new_context_with_model: graph nodes  = 601
0.00.978.700 I llama_new_context_with_model: graph splits = 1
0.00.978.725 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.978.729 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.587.194 I main: llama threadpool init, n_threads = 4
0.01.587.211 I 
0.01.587.336 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.587.340 I 
0.01.587.580 I sampler seed: 4134939333
0.01.587.594 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.587.606 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.587.607 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.587.607 I 
 increasities, and other romantic entanglements that unfold within a confined space.

A confined space can be a prison, a theater, a closet, or

0.15.106.933 I llama_perf_sampler_print:    sampling time =      49.55 ms /    33 runs   (    1.50 ms per token,   665.99 tokens per second)
0.15.106.937 I llama_perf_context_print:        load time =    1586.24 ms
0.15.106.950 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.106.952 I llama_perf_context_print:        eval time =   13433.25 ms /    32 runs   (  419.79 ms per token,     2.38 tokens per second)
0.15.106.954 I llama_perf_context_print:       total time =   13519.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m4.394s
user	3m26.465s
sys	0m9.415s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4411 (c31fc8b9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186331.59 ms
main:    total time = 186331.59 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.645 I build: 4411 (c31fc8b9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.851 I main: llama backend init
0.00.000.859 I main: load the model and apply lora adapter, if any
0.00.023.202 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.214 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.302 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.316 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.318 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.322 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.324 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.325 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.326 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.328 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.329 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.334 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.335 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.337 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.338 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.339 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.249.285 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.353.654 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.377.846 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.377.857 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.377.858 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.377.860 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.377.861 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.377.862 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.377.864 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.377.868 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.377.869 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.377.871 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.377.872 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.377.874 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.377.881 I llama_model_loader: - type  f32:   37 tensors
0.00.377.884 I llama_model_loader: - type q4_K:  108 tensors
0.00.377.885 I llama_model_loader: - type q6_K:   19 tensors
0.00.595.001 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.667.473 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.668.501 I llm_load_vocab: special tokens cache size = 5
0.00.882.107 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.882.182 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.882.187 I llm_load_print_meta: arch             = gemma
0.00.882.188 I llm_load_print_meta: vocab type       = SPM
0.00.882.189 I llm_load_print_meta: n_vocab          = 256000
0.00.882.191 I llm_load_print_meta: n_merges         = 0
0.00.882.191 I llm_load_print_meta: vocab_only       = 0
0.00.882.192 I llm_load_print_meta: n_ctx_train      = 8192
0.00.882.192 I llm_load_print_meta: n_embd           = 2048
0.00.882.192 I llm_load_print_meta: n_layer          = 18
0.00.882.268 I llm_load_print_meta: n_head           = 8
0.00.882.278 I llm_load_print_meta: n_head_kv        = 1
0.00.882.279 I llm_load_print_meta: n_rot            = 256
0.00.882.279 I llm_load_print_meta: n_swa            = 0
0.00.882.279 I llm_load_print_meta: n_embd_head_k    = 256
0.00.882.280 I llm_load_print_meta: n_embd_head_v    = 256
0.00.882.284 I llm_load_print_meta: n_gqa            = 8
0.00.882.289 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.882.294 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.882.295 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.882.296 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.882.297 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.882.298 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.882.299 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.882.305 I llm_load_print_meta: n_ff             = 16384
0.00.882.305 I llm_load_print_meta: n_expert         = 0
0.00.882.306 I llm_load_print_meta: n_expert_used    = 0
0.00.882.307 I llm_load_print_meta: causal attn      = 1
0.00.882.307 I llm_load_print_meta: pooling type     = 0
0.00.882.307 I llm_load_print_meta: rope type        = 2
0.00.882.308 I llm_load_print_meta: rope scaling     = linear
0.00.882.318 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.882.319 I llm_load_print_meta: freq_scale_train = 1
0.00.882.320 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.882.320 I llm_load_print_meta: rope_finetuned   = unknown
0.00.882.321 I llm_load_print_meta: ssm_d_conv       = 0
0.00.882.322 I llm_load_print_meta: ssm_d_inner      = 0
0.00.882.322 I llm_load_print_meta: ssm_d_state      = 0
0.00.882.334 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.882.337 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.882.340 I llm_load_print_meta: model type       = 2B
0.00.882.342 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.882.343 I llm_load_print_meta: model params     = 2.51 B
0.00.882.343 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.882.344 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.882.344 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.882.345 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.882.347 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.882.348 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.882.348 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.882.349 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.882.355 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.882.356 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.882.357 I llm_load_print_meta: max token length = 93
0.00.945.365 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.945.375 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.945.376 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.945.377 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.945.377 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.945.378 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.951.226 I llama_new_context_with_model: n_seq_max     = 1
0.00.951.233 I llama_new_context_with_model: n_ctx         = 4096
0.00.951.234 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.951.234 I llama_new_context_with_model: n_batch       = 2048
0.00.951.235 I llama_new_context_with_model: n_ubatch      = 512
0.00.951.235 I llama_new_context_with_model: flash_attn    = 0
0.00.951.237 I llama_new_context_with_model: freq_base     = 10000.0
0.00.951.238 I llama_new_context_with_model: freq_scale    = 1
0.00.951.239 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.951.324 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.966.255 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.966.300 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.966.423 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.969.067 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.969.071 I llama_new_context_with_model: graph nodes  = 601
0.00.969.071 I llama_new_context_with_model: graph splits = 1
0.00.969.096 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.969.100 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.549.862 I main: llama threadpool init, n_threads = 4
0.01.549.881 I 
0.01.550.002 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.550.006 I 
0.01.550.246 I sampler seed: 1691106034
0.01.550.261 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.550.273 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.550.274 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.550.274 I 
 seconally after the question and include your answer.

You have a stack of 5 cards, and you draw one card at a time without replacement. What

0.12.647.130 I llama_perf_sampler_print:    sampling time =      49.45 ms /    33 runs   (    1.50 ms per token,   667.33 tokens per second)
0.12.647.134 I llama_perf_context_print:        load time =    1548.92 ms
0.12.647.136 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.647.138 I llama_perf_context_print:        eval time =   11012.37 ms /    32 runs   (  344.14 ms per token,     2.91 tokens per second)
0.12.647.140 I llama_perf_context_print:       total time =   11097.28 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4411 (c31fc8b9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186335.25 ms
main:    total time = 186335.25 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.635 I build: 4411 (c31fc8b9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.839 I main: llama backend init
0.00.000.846 I main: load the model and apply lora adapter, if any
0.00.023.099 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.197 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.212 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.214 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.218 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.222 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.223 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.225 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.226 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.227 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.233 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.234 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.236 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.238 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.240 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.235.361 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.336.304 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.360.522 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.360.532 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.360.534 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.360.535 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.360.536 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.360.538 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.360.540 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.360.544 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.360.545 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.360.552 I llama_model_loader: - type  f32:   37 tensors
0.00.360.555 I llama_model_loader: - type q4_K:  108 tensors
0.00.360.556 I llama_model_loader: - type q6_K:   19 tensors
0.00.577.585 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.640.816 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.641.706 I llm_load_vocab: special tokens cache size = 5
0.00.850.550 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.850.627 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.850.631 I llm_load_print_meta: arch             = gemma
0.00.850.632 I llm_load_print_meta: vocab type       = SPM
0.00.850.633 I llm_load_print_meta: n_vocab          = 256000
0.00.850.635 I llm_load_print_meta: n_merges         = 0
0.00.850.636 I llm_load_print_meta: vocab_only       = 0
0.00.850.636 I llm_load_print_meta: n_ctx_train      = 8192
0.00.850.637 I llm_load_print_meta: n_embd           = 2048
0.00.850.637 I llm_load_print_meta: n_layer          = 18
0.00.850.713 I llm_load_print_meta: n_head           = 8
0.00.850.720 I llm_load_print_meta: n_head_kv        = 1
0.00.850.724 I llm_load_print_meta: n_rot            = 256
0.00.850.725 I llm_load_print_meta: n_swa            = 0
0.00.850.725 I llm_load_print_meta: n_embd_head_k    = 256
0.00.850.725 I llm_load_print_meta: n_embd_head_v    = 256
0.00.850.730 I llm_load_print_meta: n_gqa            = 8
0.00.850.735 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.850.740 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.850.743 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.850.745 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.850.745 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.850.745 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.850.746 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.850.751 I llm_load_print_meta: n_ff             = 16384
0.00.850.752 I llm_load_print_meta: n_expert         = 0
0.00.850.753 I llm_load_print_meta: n_expert_used    = 0
0.00.850.754 I llm_load_print_meta: causal attn      = 1
0.00.850.754 I llm_load_print_meta: pooling type     = 0
0.00.850.754 I llm_load_print_meta: rope type        = 2
0.00.850.755 I llm_load_print_meta: rope scaling     = linear
0.00.850.757 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.850.758 I llm_load_print_meta: freq_scale_train = 1
0.00.850.759 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.850.759 I llm_load_print_meta: rope_finetuned   = unknown
0.00.850.760 I llm_load_print_meta: ssm_d_conv       = 0
0.00.850.760 I llm_load_print_meta: ssm_d_inner      = 0
0.00.850.761 I llm_load_print_meta: ssm_d_state      = 0
0.00.850.762 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.850.762 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.850.765 I llm_load_print_meta: model type       = 2B
0.00.850.767 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.850.768 I llm_load_print_meta: model params     = 2.51 B
0.00.850.769 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.850.770 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.850.771 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.850.772 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.850.772 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.850.773 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.850.773 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.850.781 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.850.788 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.850.790 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.850.790 I llm_load_print_meta: max token length = 93
0.00.910.587 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.916.601 I llama_new_context_with_model: n_seq_max     = 1
0.00.916.609 I llama_new_context_with_model: n_ctx         = 4096
0.00.916.610 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.916.610 I llama_new_context_with_model: n_batch       = 2048
0.00.916.611 I llama_new_context_with_model: n_ubatch      = 512
0.00.916.611 I llama_new_context_with_model: flash_attn    = 0
0.00.916.615 I llama_new_context_with_model: freq_base     = 10000.0
0.00.916.616 I llama_new_context_with_model: freq_scale    = 1
0.00.916.617 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.916.708 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.932.345 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.932.389 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.932.515 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.935.120 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.935.124 I llama_new_context_with_model: graph nodes  = 601
0.00.935.124 I llama_new_context_with_model: graph splits = 1
0.00.935.150 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.935.153 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.515.256 I main: llama threadpool init, n_threads = 4
0.01.515.274 I 
0.01.515.442 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.515.446 I 
0.01.515.685 I sampler seed: 1236034554
0.01.515.699 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.515.710 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.515.713 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.515.713 I 
 seconally in a foreign language. [end of text]


0.04.303.259 I llama_perf_sampler_print:    sampling time =      12.46 ms /     9 runs   (    1.38 ms per token,   722.43 tokens per second)
0.04.303.262 I llama_perf_context_print:        load time =    1514.33 ms
0.04.303.286 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.04.303.287 I llama_perf_context_print:        eval time =    2765.28 ms /     8 runs   (  345.66 ms per token,     2.89 tokens per second)
0.04.303.296 I llama_perf_context_print:       total time =    2788.01 ms /     9 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m32.549s
user	46m12.574s
sys	0m6.429s
