+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.543 I build: 4168 (e80f758e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.739 I main: llama backend init
0.00.000.746 I main: load the model and apply lora adapter, if any
0.00.021.424 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.434 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.441 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.446 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.447 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.451 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.451 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.453 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.453 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.453 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.454 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.458 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.459 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.460 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.461 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.461 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.013 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.547 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.374 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.380 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.381 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.382 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.383 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.384 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.385 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.388 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.389 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.390 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.391 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.392 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.395 I llama_model_loader: - type  f32:   37 tensors
0.00.130.396 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.042 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.237.613 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.238.086 I llm_load_vocab: special tokens cache size = 5
0.00.258.869 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.258.883 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.258.884 I llm_load_print_meta: arch             = gemma
0.00.258.884 I llm_load_print_meta: vocab type       = SPM
0.00.258.885 I llm_load_print_meta: n_vocab          = 256000
0.00.258.885 I llm_load_print_meta: n_merges         = 0
0.00.258.885 I llm_load_print_meta: vocab_only       = 0
0.00.258.886 I llm_load_print_meta: n_ctx_train      = 8192
0.00.258.886 I llm_load_print_meta: n_embd           = 2048
0.00.258.886 I llm_load_print_meta: n_layer          = 18
0.00.258.897 I llm_load_print_meta: n_head           = 8
0.00.258.898 I llm_load_print_meta: n_head_kv        = 1
0.00.258.899 I llm_load_print_meta: n_rot            = 256
0.00.258.899 I llm_load_print_meta: n_swa            = 0
0.00.258.899 I llm_load_print_meta: n_embd_head_k    = 256
0.00.258.900 I llm_load_print_meta: n_embd_head_v    = 256
0.00.258.900 I llm_load_print_meta: n_gqa            = 8
0.00.258.902 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.258.903 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.258.903 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.258.904 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.258.905 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.258.905 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.258.905 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.258.906 I llm_load_print_meta: n_ff             = 16384
0.00.258.907 I llm_load_print_meta: n_expert         = 0
0.00.258.907 I llm_load_print_meta: n_expert_used    = 0
0.00.258.907 I llm_load_print_meta: causal attn      = 1
0.00.258.908 I llm_load_print_meta: pooling type     = 0
0.00.258.908 I llm_load_print_meta: rope type        = 2
0.00.258.908 I llm_load_print_meta: rope scaling     = linear
0.00.258.909 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.258.910 I llm_load_print_meta: freq_scale_train = 1
0.00.258.910 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.258.910 I llm_load_print_meta: rope_finetuned   = unknown
0.00.258.911 I llm_load_print_meta: ssm_d_conv       = 0
0.00.258.911 I llm_load_print_meta: ssm_d_inner      = 0
0.00.258.911 I llm_load_print_meta: ssm_d_state      = 0
0.00.258.911 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.258.912 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.258.912 I llm_load_print_meta: model type       = 2B
0.00.258.913 I llm_load_print_meta: model ftype      = Q8_0
0.00.258.914 I llm_load_print_meta: model params     = 2.51 B
0.00.258.914 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.258.915 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.258.915 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.258.915 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.258.916 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.258.916 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.258.916 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.258.916 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.258.917 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.258.917 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.258.917 I llm_load_print_meta: max token length = 93
0.00.358.481 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.358.491 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.358.491 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.358.492 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.358.492 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.358.493 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.363.834 I llama_new_context_with_model: n_seq_max     = 1
0.00.363.839 I llama_new_context_with_model: n_ctx         = 4096
0.00.363.840 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.363.840 I llama_new_context_with_model: n_batch       = 2048
0.00.363.841 I llama_new_context_with_model: n_ubatch      = 512
0.00.363.841 I llama_new_context_with_model: flash_attn    = 0
0.00.363.843 I llama_new_context_with_model: freq_base     = 10000.0
0.00.363.845 I llama_new_context_with_model: freq_scale    = 1
0.00.363.846 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.377.900 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.377.912 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.377.998 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.379.217 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.379.223 I llama_new_context_with_model: graph nodes  = 601
0.00.379.223 I llama_new_context_with_model: graph splits = 1
0.00.379.225 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.463.593 I main: llama threadpool init, n_threads = 4
0.00.463.606 I 
0.00.463.679 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.463.682 I 
0.00.463.723 I sampler seed: 1319904544
0.00.463.734 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.463.741 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.463.745 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.463.745 I 
 increasities. [end of text]


0.00.745.942 I llama_perf_sampler_print:    sampling time =       0.59 ms /     5 runs   (    0.12 ms per token,  8431.70 tokens per second)
0.00.745.944 I llama_perf_context_print:        load time =     462.83 ms
0.00.745.945 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.745.947 I llama_perf_context_print:        eval time =     278.89 ms /     4 runs   (   69.72 ms per token,    14.34 tokens per second)
0.00.745.948 I llama_perf_context_print:       total time =     282.35 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.538 I build: 4168 (e80f758e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.736 I main: llama backend init
0.00.000.742 I main: load the model and apply lora adapter, if any
0.00.021.209 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.224 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.230 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.231 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.235 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.236 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.238 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.238 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.239 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.240 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.244 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.245 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.245 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.246 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.246 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.052 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.982 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.883 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.889 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.890 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.890 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.891 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.892 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.893 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.895 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.896 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.897 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.898 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.899 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.902 I llama_model_loader: - type  f32:   37 tensors
0.00.130.903 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.257 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.944 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.563 I llm_load_vocab: special tokens cache size = 5
0.00.264.372 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.390 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.391 I llm_load_print_meta: arch             = gemma
0.00.264.391 I llm_load_print_meta: vocab type       = SPM
0.00.264.392 I llm_load_print_meta: n_vocab          = 256000
0.00.264.392 I llm_load_print_meta: n_merges         = 0
0.00.264.393 I llm_load_print_meta: vocab_only       = 0
0.00.264.393 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.393 I llm_load_print_meta: n_embd           = 2048
0.00.264.394 I llm_load_print_meta: n_layer          = 18
0.00.264.404 I llm_load_print_meta: n_head           = 8
0.00.264.405 I llm_load_print_meta: n_head_kv        = 1
0.00.264.405 I llm_load_print_meta: n_rot            = 256
0.00.264.405 I llm_load_print_meta: n_swa            = 0
0.00.264.406 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.406 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.407 I llm_load_print_meta: n_gqa            = 8
0.00.264.408 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.409 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.410 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.411 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.411 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.412 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.412 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.413 I llm_load_print_meta: n_ff             = 16384
0.00.264.413 I llm_load_print_meta: n_expert         = 0
0.00.264.414 I llm_load_print_meta: n_expert_used    = 0
0.00.264.414 I llm_load_print_meta: causal attn      = 1
0.00.264.414 I llm_load_print_meta: pooling type     = 0
0.00.264.414 I llm_load_print_meta: rope type        = 2
0.00.264.415 I llm_load_print_meta: rope scaling     = linear
0.00.264.416 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.417 I llm_load_print_meta: freq_scale_train = 1
0.00.264.417 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.417 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.417 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.418 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.418 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.418 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.419 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.419 I llm_load_print_meta: model type       = 2B
0.00.264.420 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.421 I llm_load_print_meta: model params     = 2.51 B
0.00.264.422 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.422 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.423 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.423 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.423 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.423 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.424 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.424 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.425 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.425 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.425 I llm_load_print_meta: max token length = 93
0.00.358.225 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.363.523 I llama_new_context_with_model: n_seq_max     = 1
0.00.363.529 I llama_new_context_with_model: n_ctx         = 4096
0.00.363.530 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.363.530 I llama_new_context_with_model: n_batch       = 2048
0.00.363.530 I llama_new_context_with_model: n_ubatch      = 512
0.00.363.531 I llama_new_context_with_model: flash_attn    = 0
0.00.363.533 I llama_new_context_with_model: freq_base     = 10000.0
0.00.363.534 I llama_new_context_with_model: freq_scale    = 1
0.00.363.535 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.378.247 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.378.262 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.378.349 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.379.573 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.379.578 I llama_new_context_with_model: graph nodes  = 601
0.00.379.578 I llama_new_context_with_model: graph splits = 1
0.00.379.581 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.460.059 I main: llama threadpool init, n_threads = 4
0.00.460.072 I 
0.00.460.145 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.460.149 I 
0.00.460.195 I sampler seed: 4094422791
0.00.460.206 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.460.209 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.460.210 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.460.211 I 
 increasities on the Internet. These are often sexually suggestive in nature and can include explicit sexual content, sexually suggestive comments, or even sexually explicit images.

**

0.02.623.047 I llama_perf_sampler_print:    sampling time =       4.76 ms /    33 runs   (    0.14 ms per token,  6926.95 tokens per second)
0.02.623.049 I llama_perf_context_print:        load time =     459.30 ms
0.02.623.051 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.623.052 I llama_perf_context_print:        eval time =    2144.50 ms /    32 runs   (   67.02 ms per token,    14.92 tokens per second)
0.02.623.053 I llama_perf_context_print:       total time =    2163.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.541 I build: 4168 (e80f758e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.738 I main: llama backend init
0.00.000.744 I main: load the model and apply lora adapter, if any
0.00.022.194 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.203 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.210 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.215 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.216 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.220 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.221 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.222 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.222 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.223 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.223 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.226 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.227 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.227 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.228 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.228 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.393 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.459 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.219 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.224 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.225 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.226 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.226 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.227 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.228 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.230 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.231 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.232 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.232 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.233 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.236 I llama_model_loader: - type  f32:   37 tensors
0.00.130.237 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.480 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.995 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.577 I llm_load_vocab: special tokens cache size = 5
0.00.279.383 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.398 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.399 I llm_load_print_meta: arch             = gemma
0.00.279.399 I llm_load_print_meta: vocab type       = SPM
0.00.279.400 I llm_load_print_meta: n_vocab          = 256000
0.00.279.400 I llm_load_print_meta: n_merges         = 0
0.00.279.401 I llm_load_print_meta: vocab_only       = 0
0.00.279.401 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.401 I llm_load_print_meta: n_embd           = 2048
0.00.279.402 I llm_load_print_meta: n_layer          = 18
0.00.279.414 I llm_load_print_meta: n_head           = 8
0.00.279.415 I llm_load_print_meta: n_head_kv        = 1
0.00.279.415 I llm_load_print_meta: n_rot            = 256
0.00.279.415 I llm_load_print_meta: n_swa            = 0
0.00.279.416 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.416 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.417 I llm_load_print_meta: n_gqa            = 8
0.00.279.418 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.419 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.420 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.421 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.421 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.422 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.422 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.424 I llm_load_print_meta: n_ff             = 16384
0.00.279.424 I llm_load_print_meta: n_expert         = 0
0.00.279.424 I llm_load_print_meta: n_expert_used    = 0
0.00.279.425 I llm_load_print_meta: causal attn      = 1
0.00.279.425 I llm_load_print_meta: pooling type     = 0
0.00.279.425 I llm_load_print_meta: rope type        = 2
0.00.279.425 I llm_load_print_meta: rope scaling     = linear
0.00.279.427 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.427 I llm_load_print_meta: freq_scale_train = 1
0.00.279.428 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.428 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.428 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.429 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.429 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.429 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.429 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.430 I llm_load_print_meta: model type       = 2B
0.00.279.431 I llm_load_print_meta: model ftype      = Q8_0
0.00.279.431 I llm_load_print_meta: model params     = 2.51 B
0.00.279.432 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.279.433 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.433 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.433 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.434 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.434 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.434 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.434 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.435 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.436 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.436 I llm_load_print_meta: max token length = 93
0.00.352.658 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.352.665 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.352.666 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.352.666 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.352.667 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.352.668 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.357.911 I llama_new_context_with_model: n_seq_max     = 1
0.00.357.917 I llama_new_context_with_model: n_ctx         = 4096
0.00.357.918 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.357.918 I llama_new_context_with_model: n_batch       = 2048
0.00.357.919 I llama_new_context_with_model: n_ubatch      = 512
0.00.357.919 I llama_new_context_with_model: flash_attn    = 0
0.00.357.922 I llama_new_context_with_model: freq_base     = 10000.0
0.00.357.923 I llama_new_context_with_model: freq_scale    = 1
0.00.357.924 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.372.087 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.372.101 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.372.199 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.373.503 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.373.510 I llama_new_context_with_model: graph nodes  = 601
0.00.373.510 I llama_new_context_with_model: graph splits = 1
0.00.373.512 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.459.329 I main: llama threadpool init, n_threads = 4
0.00.459.342 I 
0.00.459.417 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.459.420 I 
0.00.459.466 I sampler seed: 2838317205
0.00.459.478 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.459.481 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.459.491 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.459.492 I 
 increadibly. [end of text]


0.00.746.622 I llama_perf_sampler_print:    sampling time =       0.62 ms /     5 runs   (    0.12 ms per token,  8064.52 tokens per second)
0.00.746.627 I llama_perf_context_print:        load time =     458.57 ms
0.00.746.628 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.746.630 I llama_perf_context_print:        eval time =     283.85 ms /     4 runs   (   70.96 ms per token,    14.09 tokens per second)
0.00.746.631 I llama_perf_context_print:       total time =     287.30 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.548 I build: 4168 (e80f758e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.758 I main: llama backend init
0.00.000.765 I main: load the model and apply lora adapter, if any
0.00.027.120 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.027.128 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.027.136 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.027.142 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.027.143 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.027.148 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.027.150 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.027.151 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.027.155 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.027.156 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.027.156 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.027.163 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.027.167 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.027.168 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.027.169 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.027.170 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.055.203 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.137.143 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.143.970 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.143.976 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.143.977 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.143.977 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.143.978 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.143.979 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.143.980 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.143.982 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.143.983 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.143.984 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.143.984 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.143.985 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.143.990 I llama_model_loader: - type  f32:   37 tensors
0.00.143.994 I llama_model_loader: - type q8_0:  127 tensors
0.00.221.168 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.264.114 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.264.655 I llm_load_vocab: special tokens cache size = 5
0.00.285.446 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.285.463 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.285.464 I llm_load_print_meta: arch             = gemma
0.00.285.465 I llm_load_print_meta: vocab type       = SPM
0.00.285.465 I llm_load_print_meta: n_vocab          = 256000
0.00.285.466 I llm_load_print_meta: n_merges         = 0
0.00.285.466 I llm_load_print_meta: vocab_only       = 0
0.00.285.467 I llm_load_print_meta: n_ctx_train      = 8192
0.00.285.467 I llm_load_print_meta: n_embd           = 2048
0.00.285.467 I llm_load_print_meta: n_layer          = 18
0.00.285.479 I llm_load_print_meta: n_head           = 8
0.00.285.480 I llm_load_print_meta: n_head_kv        = 1
0.00.285.480 I llm_load_print_meta: n_rot            = 256
0.00.285.480 I llm_load_print_meta: n_swa            = 0
0.00.285.481 I llm_load_print_meta: n_embd_head_k    = 256
0.00.285.481 I llm_load_print_meta: n_embd_head_v    = 256
0.00.285.482 I llm_load_print_meta: n_gqa            = 8
0.00.285.483 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.285.484 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.285.484 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.285.486 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.285.487 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.285.487 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.285.488 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.285.489 I llm_load_print_meta: n_ff             = 16384
0.00.285.489 I llm_load_print_meta: n_expert         = 0
0.00.285.490 I llm_load_print_meta: n_expert_used    = 0
0.00.285.490 I llm_load_print_meta: causal attn      = 1
0.00.285.490 I llm_load_print_meta: pooling type     = 0
0.00.285.490 I llm_load_print_meta: rope type        = 2
0.00.285.491 I llm_load_print_meta: rope scaling     = linear
0.00.285.492 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.285.492 I llm_load_print_meta: freq_scale_train = 1
0.00.285.493 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.285.493 I llm_load_print_meta: rope_finetuned   = unknown
0.00.285.493 I llm_load_print_meta: ssm_d_conv       = 0
0.00.285.493 I llm_load_print_meta: ssm_d_inner      = 0
0.00.285.494 I llm_load_print_meta: ssm_d_state      = 0
0.00.285.494 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.285.494 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.285.495 I llm_load_print_meta: model type       = 2B
0.00.285.495 I llm_load_print_meta: model ftype      = Q8_0
0.00.285.496 I llm_load_print_meta: model params     = 2.51 B
0.00.285.497 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.285.498 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.285.498 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.285.498 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.285.499 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.285.499 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.285.499 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.285.499 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.285.500 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.285.500 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.285.501 I llm_load_print_meta: max token length = 93
0.00.362.345 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.362.352 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.367.773 I llama_new_context_with_model: n_seq_max     = 1
0.00.367.781 I llama_new_context_with_model: n_ctx         = 4096
0.00.367.781 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.367.781 I llama_new_context_with_model: n_batch       = 2048
0.00.367.782 I llama_new_context_with_model: n_ubatch      = 512
0.00.367.782 I llama_new_context_with_model: flash_attn    = 0
0.00.367.784 I llama_new_context_with_model: freq_base     = 10000.0
0.00.367.785 I llama_new_context_with_model: freq_scale    = 1
0.00.367.786 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.382.621 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.382.637 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.382.754 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.384.039 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.384.046 I llama_new_context_with_model: graph nodes  = 601
0.00.384.046 I llama_new_context_with_model: graph splits = 1
0.00.384.048 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.475.255 I main: llama threadpool init, n_threads = 4
0.00.475.270 I 
0.00.475.363 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.475.366 I 
0.00.475.416 I sampler seed: 3107466789
0.00.475.428 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.475.432 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.475.436 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.475.436 I 
 increasements:

**1. The Importance of Mindfulness**

Mindfulness is a crucial component of mental well-being and can significantly enhance our ability to cope

0.02.910.812 I llama_perf_sampler_print:    sampling time =       5.63 ms /    33 runs   (    0.17 ms per token,  5859.38 tokens per second)
0.02.910.814 I llama_perf_context_print:        load time =     474.47 ms
0.02.910.815 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.910.816 I llama_perf_context_print:        eval time =    2414.78 ms /    32 runs   (   75.46 ms per token,    13.25 tokens per second)
0.02.910.817 I llama_perf_context_print:       total time =    2435.56 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m16.723s
user	0m23.554s
sys	0m9.282s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4168 (e80f758e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40192.36 ms
main:    total time = 40192.36 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.561 I build: 4168 (e80f758e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.755 I main: llama backend init
0.00.000.762 I main: load the model and apply lora adapter, if any
0.00.021.279 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.289 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.297 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.306 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.307 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.311 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.312 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.312 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.313 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.313 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.314 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.318 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.319 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.320 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.321 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.321 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.736 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.737 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.548 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.554 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.555 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.556 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.556 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.557 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.558 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.560 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.561 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.561 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.563 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.564 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.568 I llama_model_loader: - type  f32:   37 tensors
0.00.131.569 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.569 I llama_model_loader: - type q6_K:   19 tensors
0.00.213.956 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.263.106 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.263.644 I llm_load_vocab: special tokens cache size = 5
0.00.284.514 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.284.530 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.284.531 I llm_load_print_meta: arch             = gemma
0.00.284.531 I llm_load_print_meta: vocab type       = SPM
0.00.284.532 I llm_load_print_meta: n_vocab          = 256000
0.00.284.532 I llm_load_print_meta: n_merges         = 0
0.00.284.533 I llm_load_print_meta: vocab_only       = 0
0.00.284.533 I llm_load_print_meta: n_ctx_train      = 8192
0.00.284.533 I llm_load_print_meta: n_embd           = 2048
0.00.284.534 I llm_load_print_meta: n_layer          = 18
0.00.284.545 I llm_load_print_meta: n_head           = 8
0.00.284.546 I llm_load_print_meta: n_head_kv        = 1
0.00.284.547 I llm_load_print_meta: n_rot            = 256
0.00.284.547 I llm_load_print_meta: n_swa            = 0
0.00.284.547 I llm_load_print_meta: n_embd_head_k    = 256
0.00.284.548 I llm_load_print_meta: n_embd_head_v    = 256
0.00.284.549 I llm_load_print_meta: n_gqa            = 8
0.00.284.550 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.284.551 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.284.551 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.284.553 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.284.553 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.284.554 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.284.555 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.284.556 I llm_load_print_meta: n_ff             = 16384
0.00.284.556 I llm_load_print_meta: n_expert         = 0
0.00.284.557 I llm_load_print_meta: n_expert_used    = 0
0.00.284.557 I llm_load_print_meta: causal attn      = 1
0.00.284.557 I llm_load_print_meta: pooling type     = 0
0.00.284.558 I llm_load_print_meta: rope type        = 2
0.00.284.559 I llm_load_print_meta: rope scaling     = linear
0.00.284.560 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.284.560 I llm_load_print_meta: freq_scale_train = 1
0.00.284.561 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.284.561 I llm_load_print_meta: rope_finetuned   = unknown
0.00.284.561 I llm_load_print_meta: ssm_d_conv       = 0
0.00.284.562 I llm_load_print_meta: ssm_d_inner      = 0
0.00.284.562 I llm_load_print_meta: ssm_d_state      = 0
0.00.284.563 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.284.563 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.284.564 I llm_load_print_meta: model type       = 2B
0.00.284.565 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.284.566 I llm_load_print_meta: model params     = 2.51 B
0.00.284.567 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.284.567 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.284.568 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.284.568 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.284.568 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.284.569 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.284.569 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.284.569 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.284.570 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.284.570 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.284.571 I llm_load_print_meta: max token length = 93
0.00.343.739 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.343.744 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.343.745 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.343.746 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.343.746 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.343.747 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.348.897 I llama_new_context_with_model: n_seq_max     = 1
0.00.348.903 I llama_new_context_with_model: n_ctx         = 4096
0.00.348.903 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.348.904 I llama_new_context_with_model: n_batch       = 2048
0.00.348.904 I llama_new_context_with_model: n_ubatch      = 512
0.00.348.905 I llama_new_context_with_model: flash_attn    = 0
0.00.348.906 I llama_new_context_with_model: freq_base     = 10000.0
0.00.348.907 I llama_new_context_with_model: freq_scale    = 1
0.00.348.908 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.363.096 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.363.112 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.363.201 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.364.407 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.364.413 I llama_new_context_with_model: graph nodes  = 601
0.00.364.413 I llama_new_context_with_model: graph splits = 1
0.00.364.415 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.439.519 I main: llama threadpool init, n_threads = 4
0.00.439.533 I 
0.00.439.611 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.439.614 I 
0.00.439.657 I sampler seed: 3079471051
0.00.439.667 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.439.672 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.439.673 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.439.673 I 
 seconally to the previous answer.

It is important to remember that the human experience is multifaceted and nuanced. It encompasses not only biological and psychological elements but also

0.01.995.792 I llama_perf_sampler_print:    sampling time =       5.26 ms /    33 runs   (    0.16 ms per token,  6272.57 tokens per second)
0.01.995.794 I llama_perf_context_print:        load time =     438.74 ms
0.01.995.795 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.995.797 I llama_perf_context_print:        eval time =    1537.40 ms /    32 runs   (   48.04 ms per token,    20.81 tokens per second)
0.01.995.797 I llama_perf_context_print:       total time =    1556.28 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4168 (e80f758e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40172.79 ms
main:    total time = 40172.79 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.542 I build: 4168 (e80f758e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.741 I main: llama backend init
0.00.000.748 I main: load the model and apply lora adapter, if any
0.00.021.397 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.409 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.416 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.417 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.420 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.421 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.421 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.422 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.422 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.423 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.426 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.426 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.427 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.427 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.429 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.659 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.529 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.441 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.448 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.448 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.449 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.450 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.451 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.451 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.453 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.454 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.457 I llama_model_loader: - type  f32:   37 tensors
0.00.130.458 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.458 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.100 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.854 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.562 I llm_load_vocab: special tokens cache size = 5
0.00.275.568 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.586 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.587 I llm_load_print_meta: arch             = gemma
0.00.275.588 I llm_load_print_meta: vocab type       = SPM
0.00.275.589 I llm_load_print_meta: n_vocab          = 256000
0.00.275.589 I llm_load_print_meta: n_merges         = 0
0.00.275.590 I llm_load_print_meta: vocab_only       = 0
0.00.275.590 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.590 I llm_load_print_meta: n_embd           = 2048
0.00.275.590 I llm_load_print_meta: n_layer          = 18
0.00.275.604 I llm_load_print_meta: n_head           = 8
0.00.275.605 I llm_load_print_meta: n_head_kv        = 1
0.00.275.605 I llm_load_print_meta: n_rot            = 256
0.00.275.605 I llm_load_print_meta: n_swa            = 0
0.00.275.606 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.606 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.607 I llm_load_print_meta: n_gqa            = 8
0.00.275.608 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.609 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.610 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.611 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.611 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.612 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.612 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.613 I llm_load_print_meta: n_ff             = 16384
0.00.275.613 I llm_load_print_meta: n_expert         = 0
0.00.275.613 I llm_load_print_meta: n_expert_used    = 0
0.00.275.615 I llm_load_print_meta: causal attn      = 1
0.00.275.615 I llm_load_print_meta: pooling type     = 0
0.00.275.615 I llm_load_print_meta: rope type        = 2
0.00.275.616 I llm_load_print_meta: rope scaling     = linear
0.00.275.617 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.617 I llm_load_print_meta: freq_scale_train = 1
0.00.275.618 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.618 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.618 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.618 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.619 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.619 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.619 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.620 I llm_load_print_meta: model type       = 2B
0.00.275.620 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.275.621 I llm_load_print_meta: model params     = 2.51 B
0.00.275.622 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.275.623 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.623 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.623 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.624 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.624 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.624 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.625 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.625 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.626 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.626 I llm_load_print_meta: max token length = 93
0.00.328.893 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.334.246 I llama_new_context_with_model: n_seq_max     = 1
0.00.334.252 I llama_new_context_with_model: n_ctx         = 4096
0.00.334.253 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.334.253 I llama_new_context_with_model: n_batch       = 2048
0.00.334.253 I llama_new_context_with_model: n_ubatch      = 512
0.00.334.254 I llama_new_context_with_model: flash_attn    = 0
0.00.334.257 I llama_new_context_with_model: freq_base     = 10000.0
0.00.334.257 I llama_new_context_with_model: freq_scale    = 1
0.00.334.258 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.349.245 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.349.259 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.349.349 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.350.642 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.350.648 I llama_new_context_with_model: graph nodes  = 601
0.00.350.648 I llama_new_context_with_model: graph splits = 1
0.00.350.650 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.424.511 I main: llama threadpool init, n_threads = 4
0.00.424.526 I 
0.00.424.601 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.424.604 I 
0.00.424.645 I sampler seed: 2023989328
0.00.424.656 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.424.664 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.424.667 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.424.667 I 
 seconded with great pride in the work that he had done.

**Meaning:**
- He felt a sense of accomplishment and satisfaction.
- He was

0.01.978.319 I llama_perf_sampler_print:    sampling time =       5.54 ms /    33 runs   (    0.17 ms per token,  5957.75 tokens per second)
0.01.978.322 I llama_perf_context_print:        load time =     423.75 ms
0.01.978.323 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.978.325 I llama_perf_context_print:        eval time =    1533.47 ms /    32 runs   (   47.92 ms per token,    20.87 tokens per second)
0.01.978.327 I llama_perf_context_print:       total time =    1553.82 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.131s
user	10m23.770s
sys	0m6.820s
