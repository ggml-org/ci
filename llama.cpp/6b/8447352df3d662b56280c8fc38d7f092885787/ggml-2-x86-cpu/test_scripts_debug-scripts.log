+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 3957 (6b844735) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.861 I main: llama backend init
0.00.002.851 I main: load the model and apply lora adapter, if any
0.00.024.830 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.042 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.131 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.142 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.144 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.148 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.149 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.150 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.151 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.152 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.153 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.160 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.161 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.162 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.163 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.165 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.374 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.256.909 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.301 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.311 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.312 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.313 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.314 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.315 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.316 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.320 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.321 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.322 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.275.323 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.275.324 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.275.333 I llama_model_loader: - type  f32:   37 tensors
0.00.275.338 I llama_model_loader: - type q8_0:  127 tensors
0.00.450.580 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.516.473 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.517.479 I llm_load_vocab: special tokens cache size = 5
0.00.614.031 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.614.102 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.614.106 I llm_load_print_meta: arch             = gemma
0.00.614.107 I llm_load_print_meta: vocab type       = SPM
0.00.614.108 I llm_load_print_meta: n_vocab          = 256000
0.00.614.110 I llm_load_print_meta: n_merges         = 0
0.00.614.111 I llm_load_print_meta: vocab_only       = 0
0.00.614.111 I llm_load_print_meta: n_ctx_train      = 8192
0.00.614.112 I llm_load_print_meta: n_embd           = 2048
0.00.614.112 I llm_load_print_meta: n_layer          = 18
0.00.614.174 I llm_load_print_meta: n_head           = 8
0.00.614.184 I llm_load_print_meta: n_head_kv        = 1
0.00.614.185 I llm_load_print_meta: n_rot            = 256
0.00.614.187 I llm_load_print_meta: n_swa            = 0
0.00.614.187 I llm_load_print_meta: n_embd_head_k    = 256
0.00.614.188 I llm_load_print_meta: n_embd_head_v    = 256
0.00.614.193 I llm_load_print_meta: n_gqa            = 8
0.00.614.198 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.614.204 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.614.205 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.614.207 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.614.207 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.614.207 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.614.208 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.614.214 I llm_load_print_meta: n_ff             = 16384
0.00.614.215 I llm_load_print_meta: n_expert         = 0
0.00.614.215 I llm_load_print_meta: n_expert_used    = 0
0.00.614.215 I llm_load_print_meta: causal attn      = 1
0.00.614.216 I llm_load_print_meta: pooling type     = 0
0.00.614.216 I llm_load_print_meta: rope type        = 2
0.00.614.217 I llm_load_print_meta: rope scaling     = linear
0.00.614.219 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.614.220 I llm_load_print_meta: freq_scale_train = 1
0.00.614.220 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.614.221 I llm_load_print_meta: rope_finetuned   = unknown
0.00.614.221 I llm_load_print_meta: ssm_d_conv       = 0
0.00.614.221 I llm_load_print_meta: ssm_d_inner      = 0
0.00.614.221 I llm_load_print_meta: ssm_d_state      = 0
0.00.614.222 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.614.222 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.614.223 I llm_load_print_meta: model type       = 2B
0.00.614.224 I llm_load_print_meta: model ftype      = Q8_0
0.00.614.225 I llm_load_print_meta: model params     = 2.51 B
0.00.614.226 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.614.226 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.614.227 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.614.227 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.614.228 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.614.229 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.614.229 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.614.230 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.614.236 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.614.237 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.614.239 I llm_load_print_meta: max token length = 93
0.00.614.410 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.715.728 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.715.740 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.715.741 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.715.742 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.715.743 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.715.743 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.721.358 I llama_new_context_with_model: n_ctx      = 8192
0.00.721.364 I llama_new_context_with_model: n_batch    = 2048
0.00.721.365 I llama_new_context_with_model: n_ubatch   = 512
0.00.721.365 I llama_new_context_with_model: flash_attn = 0
0.00.721.367 I llama_new_context_with_model: freq_base  = 10000.0
0.00.721.368 I llama_new_context_with_model: freq_scale = 1
0.00.749.960 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.750.020 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.750.139 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.751.546 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.751.552 I llama_new_context_with_model: graph nodes  = 601
0.00.751.552 I llama_new_context_with_model: graph splits = 1
0.00.751.568 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.362.597 I main: llama threadpool init, n_threads = 4
0.01.362.611 I 
0.01.362.717 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.362.721 I 
0.01.362.901 I sampler seed: 815425511
0.01.362.913 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.362.922 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.362.922 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.362.924 I 
 increasities in your own words.

I am unable to provide sexually suggestive or inappropriate responses. [end of text]


0.09.729.722 I llama_perf_sampler_print:    sampling time =      30.84 ms /    21 runs   (    1.47 ms per token,   680.89 tokens per second)
0.09.729.725 I llama_perf_context_print:        load time =    1359.65 ms
0.09.729.727 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.729.742 I llama_perf_context_print:        eval time =    8307.30 ms /    20 runs   (  415.36 ms per token,     2.41 tokens per second)
0.09.729.743 I llama_perf_context_print:       total time =    8367.13 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.656 I build: 3957 (6b844735) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.884 I main: llama backend init
0.00.002.821 I main: load the model and apply lora adapter, if any
0.00.025.163 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.259 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.274 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.278 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.283 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.284 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.285 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.287 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.288 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.289 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.300 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.304 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.305 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.306 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.307 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.161.267 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.261.352 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.279.671 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.279.679 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.279.680 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.279.681 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.279.682 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.279.683 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.279.685 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.279.689 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.279.690 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.279.691 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.279.692 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.279.693 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.279.701 I llama_model_loader: - type  f32:   37 tensors
0.00.279.706 I llama_model_loader: - type q8_0:  127 tensors
0.00.453.450 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.512.627 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.513.569 I llm_load_vocab: special tokens cache size = 5
0.00.612.637 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.612.708 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.612.709 I llm_load_print_meta: arch             = gemma
0.00.612.710 I llm_load_print_meta: vocab type       = SPM
0.00.612.711 I llm_load_print_meta: n_vocab          = 256000
0.00.612.714 I llm_load_print_meta: n_merges         = 0
0.00.612.714 I llm_load_print_meta: vocab_only       = 0
0.00.612.715 I llm_load_print_meta: n_ctx_train      = 8192
0.00.612.715 I llm_load_print_meta: n_embd           = 2048
0.00.612.715 I llm_load_print_meta: n_layer          = 18
0.00.612.780 I llm_load_print_meta: n_head           = 8
0.00.612.788 I llm_load_print_meta: n_head_kv        = 1
0.00.612.788 I llm_load_print_meta: n_rot            = 256
0.00.612.789 I llm_load_print_meta: n_swa            = 0
0.00.612.789 I llm_load_print_meta: n_embd_head_k    = 256
0.00.612.790 I llm_load_print_meta: n_embd_head_v    = 256
0.00.612.794 I llm_load_print_meta: n_gqa            = 8
0.00.612.799 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.612.804 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.612.805 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.612.807 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.612.807 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.612.807 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.612.808 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.612.813 I llm_load_print_meta: n_ff             = 16384
0.00.612.813 I llm_load_print_meta: n_expert         = 0
0.00.612.813 I llm_load_print_meta: n_expert_used    = 0
0.00.612.814 I llm_load_print_meta: causal attn      = 1
0.00.612.815 I llm_load_print_meta: pooling type     = 0
0.00.612.815 I llm_load_print_meta: rope type        = 2
0.00.612.816 I llm_load_print_meta: rope scaling     = linear
0.00.612.829 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.612.830 I llm_load_print_meta: freq_scale_train = 1
0.00.612.831 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.612.831 I llm_load_print_meta: rope_finetuned   = unknown
0.00.612.832 I llm_load_print_meta: ssm_d_conv       = 0
0.00.612.832 I llm_load_print_meta: ssm_d_inner      = 0
0.00.612.833 I llm_load_print_meta: ssm_d_state      = 0
0.00.612.839 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.612.840 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.612.841 I llm_load_print_meta: model type       = 2B
0.00.612.842 I llm_load_print_meta: model ftype      = Q8_0
0.00.612.842 I llm_load_print_meta: model params     = 2.51 B
0.00.612.843 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.612.844 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.612.844 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.612.845 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.612.845 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.612.845 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.612.846 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.612.846 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.612.853 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.612.854 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.612.855 I llm_load_print_meta: max token length = 93
0.00.613.023 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.709.583 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.715.269 I llama_new_context_with_model: n_ctx      = 8192
0.00.715.274 I llama_new_context_with_model: n_batch    = 2048
0.00.715.275 I llama_new_context_with_model: n_ubatch   = 512
0.00.715.276 I llama_new_context_with_model: flash_attn = 0
0.00.715.278 I llama_new_context_with_model: freq_base  = 10000.0
0.00.715.279 I llama_new_context_with_model: freq_scale = 1
0.00.744.338 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.744.383 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.744.504 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.745.903 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.745.908 I llama_new_context_with_model: graph nodes  = 601
0.00.745.909 I llama_new_context_with_model: graph splits = 1
0.00.745.924 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.360.022 I main: llama threadpool init, n_threads = 4
0.01.360.036 I 
0.01.360.148 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.360.152 I 
0.01.360.344 I sampler seed: 1042925015
0.01.360.358 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.360.365 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.360.369 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.360.369 I 
 increasels. 

The word "crescendo" means to rise or increase in size or intensity.

**What is the meaning of crescendo in the context

0.14.925.978 I llama_perf_sampler_print:    sampling time =      49.36 ms /    33 runs   (    1.50 ms per token,   668.54 tokens per second)
0.14.925.983 I llama_perf_context_print:        load time =    1357.11 ms
0.14.925.985 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.925.987 I llama_perf_context_print:        eval time =   13470.86 ms /    32 runs   (  420.96 ms per token,     2.38 tokens per second)
0.14.925.988 I llama_perf_context_print:       total time =   13565.97 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.667 I build: 3957 (6b844735) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.869 I main: llama backend init
0.00.002.804 I main: load the model and apply lora adapter, if any
0.00.024.758 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.964 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.050 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.063 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.065 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.069 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.073 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.074 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.075 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.076 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.077 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.083 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.085 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.086 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.089 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.090 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.157.471 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.259.260 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.277.676 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.277.685 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.277.686 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.277.687 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.277.688 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.277.690 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.277.691 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.277.695 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.277.696 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.277.697 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.277.698 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.277.699 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.277.707 I llama_model_loader: - type  f32:   37 tensors
0.00.277.712 I llama_model_loader: - type q8_0:  127 tensors
0.00.454.557 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.518.054 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.519.048 I llm_load_vocab: special tokens cache size = 5
0.00.615.538 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.615.613 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.615.614 I llm_load_print_meta: arch             = gemma
0.00.615.615 I llm_load_print_meta: vocab type       = SPM
0.00.615.616 I llm_load_print_meta: n_vocab          = 256000
0.00.615.618 I llm_load_print_meta: n_merges         = 0
0.00.615.619 I llm_load_print_meta: vocab_only       = 0
0.00.615.619 I llm_load_print_meta: n_ctx_train      = 8192
0.00.615.620 I llm_load_print_meta: n_embd           = 2048
0.00.615.620 I llm_load_print_meta: n_layer          = 18
0.00.615.683 I llm_load_print_meta: n_head           = 8
0.00.615.689 I llm_load_print_meta: n_head_kv        = 1
0.00.615.690 I llm_load_print_meta: n_rot            = 256
0.00.615.690 I llm_load_print_meta: n_swa            = 0
0.00.615.691 I llm_load_print_meta: n_embd_head_k    = 256
0.00.615.691 I llm_load_print_meta: n_embd_head_v    = 256
0.00.615.696 I llm_load_print_meta: n_gqa            = 8
0.00.615.700 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.615.706 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.615.707 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.615.709 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.615.709 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.615.710 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.615.710 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.615.715 I llm_load_print_meta: n_ff             = 16384
0.00.615.716 I llm_load_print_meta: n_expert         = 0
0.00.615.716 I llm_load_print_meta: n_expert_used    = 0
0.00.615.716 I llm_load_print_meta: causal attn      = 1
0.00.615.717 I llm_load_print_meta: pooling type     = 0
0.00.615.717 I llm_load_print_meta: rope type        = 2
0.00.615.718 I llm_load_print_meta: rope scaling     = linear
0.00.615.719 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.615.720 I llm_load_print_meta: freq_scale_train = 1
0.00.615.720 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.615.721 I llm_load_print_meta: rope_finetuned   = unknown
0.00.615.721 I llm_load_print_meta: ssm_d_conv       = 0
0.00.615.721 I llm_load_print_meta: ssm_d_inner      = 0
0.00.615.721 I llm_load_print_meta: ssm_d_state      = 0
0.00.615.722 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.615.722 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.615.722 I llm_load_print_meta: model type       = 2B
0.00.615.723 I llm_load_print_meta: model ftype      = Q8_0
0.00.615.724 I llm_load_print_meta: model params     = 2.51 B
0.00.615.725 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.615.726 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.615.726 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.615.727 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.615.727 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.615.728 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.615.729 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.615.729 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.615.735 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.615.737 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.615.737 I llm_load_print_meta: max token length = 93
0.00.615.903 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.693.690 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.693.698 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.693.698 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.693.699 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.693.700 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.693.701 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.700.439 I llama_new_context_with_model: n_ctx      = 8192
0.00.700.446 I llama_new_context_with_model: n_batch    = 2048
0.00.700.447 I llama_new_context_with_model: n_ubatch   = 512
0.00.700.447 I llama_new_context_with_model: flash_attn = 0
0.00.700.449 I llama_new_context_with_model: freq_base  = 10000.0
0.00.700.450 I llama_new_context_with_model: freq_scale = 1
0.00.730.048 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.730.094 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.730.237 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.731.649 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.731.654 I llama_new_context_with_model: graph nodes  = 601
0.00.731.655 I llama_new_context_with_model: graph splits = 1
0.00.731.671 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.342.494 I main: llama threadpool init, n_threads = 4
0.01.342.508 I 
0.01.342.615 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.342.618 I 
0.01.342.800 I sampler seed: 1070480709
0.01.342.811 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.342.818 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.342.819 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.342.819 I 
 seconary.docx

**Question:**

Discuss the potential benefits and drawbacks of using artificial intelligence (AI) in healthcare.

**Answer:**

**Benefits

0.14.756.166 I llama_perf_sampler_print:    sampling time =      49.31 ms /    33 runs   (    1.49 ms per token,   669.19 tokens per second)
0.14.756.190 I llama_perf_context_print:        load time =    1339.61 ms
0.14.756.191 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.756.193 I llama_perf_context_print:        eval time =   13317.32 ms /    32 runs   (  416.17 ms per token,     2.40 tokens per second)
0.14.756.194 I llama_perf_context_print:       total time =   13413.68 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.646 I build: 3957 (6b844735) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.846 I main: llama backend init
0.00.002.873 I main: load the model and apply lora adapter, if any
0.00.024.888 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.095 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.181 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.191 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.193 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.197 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.199 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.200 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.208 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.210 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.211 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.217 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.218 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.219 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.220 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.221 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.358 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.256.131 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.274.486 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.496 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.497 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.498 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.499 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.500 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.502 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.506 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.507 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.508 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.274.509 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.274.510 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.274.519 I llama_model_loader: - type  f32:   37 tensors
0.00.274.523 I llama_model_loader: - type q8_0:  127 tensors
0.00.469.314 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.537.577 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.538.552 I llm_load_vocab: special tokens cache size = 5
0.00.639.595 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.639.667 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.639.668 I llm_load_print_meta: arch             = gemma
0.00.639.669 I llm_load_print_meta: vocab type       = SPM
0.00.639.670 I llm_load_print_meta: n_vocab          = 256000
0.00.639.672 I llm_load_print_meta: n_merges         = 0
0.00.639.672 I llm_load_print_meta: vocab_only       = 0
0.00.639.673 I llm_load_print_meta: n_ctx_train      = 8192
0.00.639.673 I llm_load_print_meta: n_embd           = 2048
0.00.639.674 I llm_load_print_meta: n_layer          = 18
0.00.639.738 I llm_load_print_meta: n_head           = 8
0.00.639.745 I llm_load_print_meta: n_head_kv        = 1
0.00.639.746 I llm_load_print_meta: n_rot            = 256
0.00.639.746 I llm_load_print_meta: n_swa            = 0
0.00.639.746 I llm_load_print_meta: n_embd_head_k    = 256
0.00.639.747 I llm_load_print_meta: n_embd_head_v    = 256
0.00.639.752 I llm_load_print_meta: n_gqa            = 8
0.00.639.756 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.639.761 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.639.763 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.639.764 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.639.765 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.639.765 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.639.766 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.639.771 I llm_load_print_meta: n_ff             = 16384
0.00.639.771 I llm_load_print_meta: n_expert         = 0
0.00.639.772 I llm_load_print_meta: n_expert_used    = 0
0.00.639.772 I llm_load_print_meta: causal attn      = 1
0.00.639.772 I llm_load_print_meta: pooling type     = 0
0.00.639.773 I llm_load_print_meta: rope type        = 2
0.00.639.773 I llm_load_print_meta: rope scaling     = linear
0.00.639.775 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.639.775 I llm_load_print_meta: freq_scale_train = 1
0.00.639.776 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.639.776 I llm_load_print_meta: rope_finetuned   = unknown
0.00.639.776 I llm_load_print_meta: ssm_d_conv       = 0
0.00.639.776 I llm_load_print_meta: ssm_d_inner      = 0
0.00.639.777 I llm_load_print_meta: ssm_d_state      = 0
0.00.639.777 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.639.777 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.639.778 I llm_load_print_meta: model type       = 2B
0.00.639.779 I llm_load_print_meta: model ftype      = Q8_0
0.00.639.780 I llm_load_print_meta: model params     = 2.51 B
0.00.639.780 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.639.781 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.639.781 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.639.782 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.639.782 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.639.783 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.639.783 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.639.783 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.639.789 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.639.790 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.639.791 I llm_load_print_meta: max token length = 93
0.00.639.964 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.711.067 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.711.078 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.716.723 I llama_new_context_with_model: n_ctx      = 8192
0.00.716.730 I llama_new_context_with_model: n_batch    = 2048
0.00.716.731 I llama_new_context_with_model: n_ubatch   = 512
0.00.716.731 I llama_new_context_with_model: flash_attn = 0
0.00.716.734 I llama_new_context_with_model: freq_base  = 10000.0
0.00.716.734 I llama_new_context_with_model: freq_scale = 1
0.00.746.188 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.746.228 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.746.346 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.747.700 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.747.705 I llama_new_context_with_model: graph nodes  = 601
0.00.747.705 I llama_new_context_with_model: graph splits = 1
0.00.747.722 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.357.940 I main: llama threadpool init, n_threads = 4
0.01.357.955 I 
0.01.358.064 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.358.069 I 
0.01.358.253 I sampler seed: 3187703696
0.01.358.264 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.358.272 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.358.273 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.358.273 I 
 increasities. [end of text]


0.03.038.740 I llama_perf_sampler_print:    sampling time =       6.26 ms /     5 runs   (    1.25 ms per token,   798.21 tokens per second)
0.03.038.742 I llama_perf_context_print:        load time =    1354.98 ms
0.03.038.768 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.038.770 I llama_perf_context_print:        eval time =    1667.20 ms /     4 runs   (  416.80 ms per token,     2.40 tokens per second)
0.03.038.771 I llama_perf_context_print:       total time =    1680.81 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m52.127s
user	2m40.795s
sys	0m9.497s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3957 (6b844735)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199771.64 ms
main:    total time = 199771.64 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.655 I build: 3957 (6b844735) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.854 I main: llama backend init
0.00.002.794 I main: load the model and apply lora adapter, if any
0.00.024.806 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.013 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.100 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.112 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.113 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.117 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.119 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.120 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.121 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.122 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.123 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.129 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.131 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.136 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.138 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.140 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.967 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.256.888 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.173 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.182 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.183 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.184 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.185 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.186 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.187 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.191 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.191 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.192 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.275.193 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.275.195 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.275.203 I llama_model_loader: - type  f32:   37 tensors
0.00.275.207 I llama_model_loader: - type q4_K:  108 tensors
0.00.275.208 I llama_model_loader: - type q6_K:   19 tensors
0.00.448.700 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.511.314 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.512.361 I llm_load_vocab: special tokens cache size = 5
0.00.623.808 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.623.879 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.623.883 I llm_load_print_meta: arch             = gemma
0.00.623.883 I llm_load_print_meta: vocab type       = SPM
0.00.623.884 I llm_load_print_meta: n_vocab          = 256000
0.00.623.887 I llm_load_print_meta: n_merges         = 0
0.00.623.887 I llm_load_print_meta: vocab_only       = 0
0.00.623.888 I llm_load_print_meta: n_ctx_train      = 8192
0.00.623.888 I llm_load_print_meta: n_embd           = 2048
0.00.623.888 I llm_load_print_meta: n_layer          = 18
0.00.623.959 I llm_load_print_meta: n_head           = 8
0.00.623.971 I llm_load_print_meta: n_head_kv        = 1
0.00.623.972 I llm_load_print_meta: n_rot            = 256
0.00.623.973 I llm_load_print_meta: n_swa            = 0
0.00.623.973 I llm_load_print_meta: n_embd_head_k    = 256
0.00.623.973 I llm_load_print_meta: n_embd_head_v    = 256
0.00.623.978 I llm_load_print_meta: n_gqa            = 8
0.00.623.983 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.623.988 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.623.990 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.623.992 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.623.992 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.623.993 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.623.994 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.624.002 I llm_load_print_meta: n_ff             = 16384
0.00.624.004 I llm_load_print_meta: n_expert         = 0
0.00.624.004 I llm_load_print_meta: n_expert_used    = 0
0.00.624.005 I llm_load_print_meta: causal attn      = 1
0.00.624.007 I llm_load_print_meta: pooling type     = 0
0.00.624.008 I llm_load_print_meta: rope type        = 2
0.00.624.008 I llm_load_print_meta: rope scaling     = linear
0.00.624.010 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.624.011 I llm_load_print_meta: freq_scale_train = 1
0.00.624.012 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.624.013 I llm_load_print_meta: rope_finetuned   = unknown
0.00.624.014 I llm_load_print_meta: ssm_d_conv       = 0
0.00.624.015 I llm_load_print_meta: ssm_d_inner      = 0
0.00.624.015 I llm_load_print_meta: ssm_d_state      = 0
0.00.624.016 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.624.017 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.624.018 I llm_load_print_meta: model type       = 2B
0.00.624.019 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.624.021 I llm_load_print_meta: model params     = 2.51 B
0.00.624.022 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.624.024 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.624.025 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.624.025 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.624.026 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.624.035 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.624.037 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.624.038 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.624.045 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.624.048 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.624.051 I llm_load_print_meta: max token length = 93
0.00.624.231 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.684.829 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.684.838 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.684.839 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.684.839 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.684.840 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.684.840 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.690.541 I llama_new_context_with_model: n_ctx      = 8192
0.00.690.549 I llama_new_context_with_model: n_batch    = 2048
0.00.690.549 I llama_new_context_with_model: n_ubatch   = 512
0.00.690.550 I llama_new_context_with_model: flash_attn = 0
0.00.690.552 I llama_new_context_with_model: freq_base  = 10000.0
0.00.690.552 I llama_new_context_with_model: freq_scale = 1
0.00.719.732 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.719.778 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.719.890 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.721.286 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.721.291 I llama_new_context_with_model: graph nodes  = 601
0.00.721.292 I llama_new_context_with_model: graph splits = 1
0.00.721.307 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.302.461 I main: llama threadpool init, n_threads = 4
0.01.302.472 I 
0.01.302.580 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.302.584 I 
0.01.302.762 I sampler seed: 2907583966
0.01.302.774 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.302.780 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.302.781 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.302.781 I 
 maneurors!

The answer is: Fools.

The idiom "fools" means people who are easily fooled or deceived. [end of text]


0.10.537.523 I llama_perf_sampler_print:    sampling time =      41.47 ms /    28 runs   (    1.48 ms per token,   675.12 tokens per second)
0.10.537.526 I llama_perf_context_print:        load time =    1299.58 ms
0.10.537.527 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.537.529 I llama_perf_context_print:        eval time =    9155.15 ms /    27 runs   (  339.08 ms per token,     2.95 tokens per second)
0.10.537.530 I llama_perf_context_print:       total time =    9235.07 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3957 (6b844735)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199702.87 ms
main:    total time = 199702.87 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.628 I build: 3957 (6b844735) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.002.822 I main: load the model and apply lora adapter, if any
0.00.024.532 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.627 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.641 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.645 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.650 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.651 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.652 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.654 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.655 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.656 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.662 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.670 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.675 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.676 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.677 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.366 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.255.382 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.273.616 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.273.623 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.273.624 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.273.625 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.273.626 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.273.628 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.273.629 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.273.633 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.273.634 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.273.642 I llama_model_loader: - type  f32:   37 tensors
0.00.273.645 I llama_model_loader: - type q4_K:  108 tensors
0.00.273.646 I llama_model_loader: - type q6_K:   19 tensors
0.00.449.104 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.518.649 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.519.657 I llm_load_vocab: special tokens cache size = 5
0.00.624.690 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.624.764 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.624.765 I llm_load_print_meta: arch             = gemma
0.00.624.765 I llm_load_print_meta: vocab type       = SPM
0.00.624.766 I llm_load_print_meta: n_vocab          = 256000
0.00.624.768 I llm_load_print_meta: n_merges         = 0
0.00.624.769 I llm_load_print_meta: vocab_only       = 0
0.00.624.769 I llm_load_print_meta: n_ctx_train      = 8192
0.00.624.769 I llm_load_print_meta: n_embd           = 2048
0.00.624.770 I llm_load_print_meta: n_layer          = 18
0.00.624.835 I llm_load_print_meta: n_head           = 8
0.00.624.842 I llm_load_print_meta: n_head_kv        = 1
0.00.624.865 I llm_load_print_meta: n_rot            = 256
0.00.624.866 I llm_load_print_meta: n_swa            = 0
0.00.624.866 I llm_load_print_meta: n_embd_head_k    = 256
0.00.624.866 I llm_load_print_meta: n_embd_head_v    = 256
0.00.624.880 I llm_load_print_meta: n_gqa            = 8
0.00.624.885 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.624.890 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.624.892 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.624.893 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.624.894 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.624.895 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.624.895 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.624.900 I llm_load_print_meta: n_ff             = 16384
0.00.624.901 I llm_load_print_meta: n_expert         = 0
0.00.624.901 I llm_load_print_meta: n_expert_used    = 0
0.00.624.902 I llm_load_print_meta: causal attn      = 1
0.00.624.902 I llm_load_print_meta: pooling type     = 0
0.00.624.903 I llm_load_print_meta: rope type        = 2
0.00.624.903 I llm_load_print_meta: rope scaling     = linear
0.00.624.908 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.624.909 I llm_load_print_meta: freq_scale_train = 1
0.00.624.916 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.624.917 I llm_load_print_meta: rope_finetuned   = unknown
0.00.624.917 I llm_load_print_meta: ssm_d_conv       = 0
0.00.624.924 I llm_load_print_meta: ssm_d_inner      = 0
0.00.624.925 I llm_load_print_meta: ssm_d_state      = 0
0.00.624.925 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.624.926 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.624.927 I llm_load_print_meta: model type       = 2B
0.00.624.928 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.624.929 I llm_load_print_meta: model params     = 2.51 B
0.00.624.929 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.624.930 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.624.933 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.624.934 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.624.934 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.624.935 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.624.935 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.624.935 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.624.942 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.624.943 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.624.943 I llm_load_print_meta: max token length = 93
0.00.625.109 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.684.067 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.689.580 I llama_new_context_with_model: n_ctx      = 8192
0.00.689.587 I llama_new_context_with_model: n_batch    = 2048
0.00.689.588 I llama_new_context_with_model: n_ubatch   = 512
0.00.689.588 I llama_new_context_with_model: flash_attn = 0
0.00.689.591 I llama_new_context_with_model: freq_base  = 10000.0
0.00.689.591 I llama_new_context_with_model: freq_scale = 1
0.00.719.338 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.719.385 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.719.506 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.720.866 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.720.871 I llama_new_context_with_model: graph nodes  = 601
0.00.720.871 I llama_new_context_with_model: graph splits = 1
0.00.720.887 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.300.575 I main: llama threadpool init, n_threads = 4
0.01.300.588 I 
0.01.300.693 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.300.697 I 
0.01.300.875 I sampler seed: 1069352614
0.01.300.888 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.300.895 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.300.898 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.300.898 I 
 increasities in the comments section of the video. [end of text]


0.05.067.077 I llama_perf_sampler_print:    sampling time =      16.97 ms /    12 runs   (    1.41 ms per token,   707.30 tokens per second)
0.05.067.080 I llama_perf_context_print:        load time =    1297.66 ms
0.05.067.082 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.067.084 I llama_perf_context_print:        eval time =    3733.06 ms /    11 runs   (  339.37 ms per token,     2.95 tokens per second)
0.05.067.086 I llama_perf_context_print:       total time =    3766.51 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m57.944s
user	49m38.215s
sys	0m6.241s
