+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 4153 (6dfcfef0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.850 I main: llama backend init
0.00.000.859 I main: load the model and apply lora adapter, if any
0.00.023.512 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.523 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.608 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.620 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.621 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.626 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.627 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.629 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.630 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.632 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.633 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.638 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.639 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.640 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.642 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.642 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.145.677 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.244.825 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.813 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.820 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.821 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.823 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.824 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.825 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.826 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.830 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.831 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.832 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.833 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.835 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.843 I llama_model_loader: - type  f32:   37 tensors
0.00.267.845 I llama_model_loader: - type q8_0:  127 tensors
0.00.445.728 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.501.544 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.502.434 I llm_load_vocab: special tokens cache size = 5
0.00.615.766 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.615.836 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.615.837 I llm_load_print_meta: arch             = gemma
0.00.615.837 I llm_load_print_meta: vocab type       = SPM
0.00.615.838 I llm_load_print_meta: n_vocab          = 256000
0.00.615.841 I llm_load_print_meta: n_merges         = 0
0.00.615.841 I llm_load_print_meta: vocab_only       = 0
0.00.615.842 I llm_load_print_meta: n_ctx_train      = 8192
0.00.615.842 I llm_load_print_meta: n_embd           = 2048
0.00.615.843 I llm_load_print_meta: n_layer          = 18
0.00.615.928 I llm_load_print_meta: n_head           = 8
0.00.615.936 I llm_load_print_meta: n_head_kv        = 1
0.00.615.937 I llm_load_print_meta: n_rot            = 256
0.00.615.938 I llm_load_print_meta: n_swa            = 0
0.00.615.944 I llm_load_print_meta: n_embd_head_k    = 256
0.00.615.945 I llm_load_print_meta: n_embd_head_v    = 256
0.00.615.950 I llm_load_print_meta: n_gqa            = 8
0.00.615.955 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.615.962 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.615.963 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.615.965 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.615.965 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.615.966 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.615.966 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.615.971 I llm_load_print_meta: n_ff             = 16384
0.00.615.972 I llm_load_print_meta: n_expert         = 0
0.00.615.972 I llm_load_print_meta: n_expert_used    = 0
0.00.615.973 I llm_load_print_meta: causal attn      = 1
0.00.615.974 I llm_load_print_meta: pooling type     = 0
0.00.615.974 I llm_load_print_meta: rope type        = 2
0.00.615.975 I llm_load_print_meta: rope scaling     = linear
0.00.615.976 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.615.977 I llm_load_print_meta: freq_scale_train = 1
0.00.615.977 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.615.984 I llm_load_print_meta: rope_finetuned   = unknown
0.00.615.985 I llm_load_print_meta: ssm_d_conv       = 0
0.00.615.985 I llm_load_print_meta: ssm_d_inner      = 0
0.00.615.986 I llm_load_print_meta: ssm_d_state      = 0
0.00.615.986 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.615.986 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.615.987 I llm_load_print_meta: model type       = 2B
0.00.615.989 I llm_load_print_meta: model ftype      = Q8_0
0.00.615.989 I llm_load_print_meta: model params     = 2.51 B
0.00.616.000 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.616.001 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.616.002 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.616.002 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.616.010 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.616.011 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.616.011 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.616.012 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.616.019 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.616.021 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.616.021 I llm_load_print_meta: max token length = 93
0.00.718.047 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.718.059 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.718.060 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.718.061 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.718.062 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.718.062 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.724.137 I llama_new_context_with_model: n_seq_max     = 1
0.00.724.146 I llama_new_context_with_model: n_ctx         = 4096
0.00.724.147 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.724.147 I llama_new_context_with_model: n_batch       = 2048
0.00.724.147 I llama_new_context_with_model: n_ubatch      = 512
0.00.724.148 I llama_new_context_with_model: flash_attn    = 0
0.00.724.152 I llama_new_context_with_model: freq_base     = 10000.0
0.00.724.153 I llama_new_context_with_model: freq_scale    = 1
0.00.724.154 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.739.531 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.739.571 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.739.697 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.742.337 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.742.342 I llama_new_context_with_model: graph nodes  = 601
0.00.742.342 I llama_new_context_with_model: graph splits = 1
0.00.742.365 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.351.416 I main: llama threadpool init, n_threads = 4
0.01.351.431 I 
0.01.351.536 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.351.542 I 
0.01.351.773 I sampler seed: 3126544061
0.01.351.786 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.351.803 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.351.804 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.351.805 I 
 increasements, and conditional statements are all used to:

A) Improve code readability
B) Enhance code performance
C) Increase code security
D)

0.14.797.921 I llama_perf_sampler_print:    sampling time =      49.20 ms /    33 runs   (    1.49 ms per token,   670.79 tokens per second)
0.14.797.924 I llama_perf_context_print:        load time =    1350.47 ms
0.14.797.925 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.797.927 I llama_perf_context_print:        eval time =   13357.65 ms /    32 runs   (  417.43 ms per token,     2.40 tokens per second)
0.14.797.927 I llama_perf_context_print:       total time =   13446.51 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.642 I build: 4153 (6dfcfef0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.843 I main: llama backend init
0.00.000.850 I main: load the model and apply lora adapter, if any
0.00.023.812 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.908 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.922 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.923 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.929 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.933 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.934 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.935 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.936 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.937 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.950 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.952 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.953 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.954 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.955 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.146.588 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.245.714 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.808 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.816 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.817 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.818 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.819 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.821 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.822 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.826 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.827 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.828 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.829 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.268.830 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.839 I llama_model_loader: - type  f32:   37 tensors
0.00.268.841 I llama_model_loader: - type q8_0:  127 tensors
0.00.440.103 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.501.204 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.502.137 I llm_load_vocab: special tokens cache size = 5
0.00.597.506 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.597.577 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.597.581 I llm_load_print_meta: arch             = gemma
0.00.597.582 I llm_load_print_meta: vocab type       = SPM
0.00.597.583 I llm_load_print_meta: n_vocab          = 256000
0.00.597.586 I llm_load_print_meta: n_merges         = 0
0.00.597.586 I llm_load_print_meta: vocab_only       = 0
0.00.597.586 I llm_load_print_meta: n_ctx_train      = 8192
0.00.597.587 I llm_load_print_meta: n_embd           = 2048
0.00.597.587 I llm_load_print_meta: n_layer          = 18
0.00.597.652 I llm_load_print_meta: n_head           = 8
0.00.597.662 I llm_load_print_meta: n_head_kv        = 1
0.00.597.664 I llm_load_print_meta: n_rot            = 256
0.00.597.664 I llm_load_print_meta: n_swa            = 0
0.00.597.664 I llm_load_print_meta: n_embd_head_k    = 256
0.00.597.665 I llm_load_print_meta: n_embd_head_v    = 256
0.00.597.669 I llm_load_print_meta: n_gqa            = 8
0.00.597.674 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.597.679 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.597.683 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.597.684 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.597.685 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.597.685 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.597.685 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.597.691 I llm_load_print_meta: n_ff             = 16384
0.00.597.691 I llm_load_print_meta: n_expert         = 0
0.00.597.692 I llm_load_print_meta: n_expert_used    = 0
0.00.597.692 I llm_load_print_meta: causal attn      = 1
0.00.597.695 I llm_load_print_meta: pooling type     = 0
0.00.597.695 I llm_load_print_meta: rope type        = 2
0.00.597.695 I llm_load_print_meta: rope scaling     = linear
0.00.597.697 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.597.697 I llm_load_print_meta: freq_scale_train = 1
0.00.597.698 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.597.698 I llm_load_print_meta: rope_finetuned   = unknown
0.00.597.698 I llm_load_print_meta: ssm_d_conv       = 0
0.00.597.699 I llm_load_print_meta: ssm_d_inner      = 0
0.00.597.699 I llm_load_print_meta: ssm_d_state      = 0
0.00.597.699 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.597.699 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.597.700 I llm_load_print_meta: model type       = 2B
0.00.597.701 I llm_load_print_meta: model ftype      = Q8_0
0.00.597.703 I llm_load_print_meta: model params     = 2.51 B
0.00.597.713 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.597.714 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.597.715 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.597.716 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.597.716 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.597.717 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.597.718 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.597.718 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.597.724 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.597.726 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.597.726 I llm_load_print_meta: max token length = 93
0.00.692.032 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.698.058 I llama_new_context_with_model: n_seq_max     = 1
0.00.698.065 I llama_new_context_with_model: n_ctx         = 4096
0.00.698.065 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.698.065 I llama_new_context_with_model: n_batch       = 2048
0.00.698.066 I llama_new_context_with_model: n_ubatch      = 512
0.00.698.066 I llama_new_context_with_model: flash_attn    = 0
0.00.698.069 I llama_new_context_with_model: freq_base     = 10000.0
0.00.698.070 I llama_new_context_with_model: freq_scale    = 1
0.00.698.070 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.713.196 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.713.239 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.713.371 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.715.916 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.715.920 I llama_new_context_with_model: graph nodes  = 601
0.00.715.921 I llama_new_context_with_model: graph splits = 1
0.00.715.944 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.324.087 I main: llama threadpool init, n_threads = 4
0.01.324.101 I 
0.01.324.211 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.324.215 I 
0.01.324.440 I sampler seed: 1798708131
0.01.324.453 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.324.461 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.324.463 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.324.463 I 
 increasities. [end of text]


0.03.006.440 I llama_perf_sampler_print:    sampling time =       6.29 ms /     5 runs   (    1.26 ms per token,   795.04 tokens per second)
0.03.006.444 I llama_perf_context_print:        load time =    1323.15 ms
0.03.006.456 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.006.458 I llama_perf_context_print:        eval time =    1669.39 ms /     4 runs   (  417.35 ms per token,     2.40 tokens per second)
0.03.006.459 I llama_perf_context_print:       total time =    1682.36 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.662 I build: 4153 (6dfcfef0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.000.872 I main: load the model and apply lora adapter, if any
0.00.023.449 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.461 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.550 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.562 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.564 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.569 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.573 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.574 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.576 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.577 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.578 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.588 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.589 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.603 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.607 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.608 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.614 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.839 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.958 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.968 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.969 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.971 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.972 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.973 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.975 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.978 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.979 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.980 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.981 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.269.983 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.991 I llama_model_loader: - type  f32:   37 tensors
0.00.269.994 I llama_model_loader: - type q8_0:  127 tensors
0.00.454.469 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.515.802 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.516.766 I llm_load_vocab: special tokens cache size = 5
0.00.635.123 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.635.196 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.635.197 I llm_load_print_meta: arch             = gemma
0.00.635.198 I llm_load_print_meta: vocab type       = SPM
0.00.635.200 I llm_load_print_meta: n_vocab          = 256000
0.00.635.203 I llm_load_print_meta: n_merges         = 0
0.00.635.203 I llm_load_print_meta: vocab_only       = 0
0.00.635.203 I llm_load_print_meta: n_ctx_train      = 8192
0.00.635.204 I llm_load_print_meta: n_embd           = 2048
0.00.635.204 I llm_load_print_meta: n_layer          = 18
0.00.635.269 I llm_load_print_meta: n_head           = 8
0.00.635.276 I llm_load_print_meta: n_head_kv        = 1
0.00.635.277 I llm_load_print_meta: n_rot            = 256
0.00.635.278 I llm_load_print_meta: n_swa            = 0
0.00.635.278 I llm_load_print_meta: n_embd_head_k    = 256
0.00.635.278 I llm_load_print_meta: n_embd_head_v    = 256
0.00.635.283 I llm_load_print_meta: n_gqa            = 8
0.00.635.288 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.635.293 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.635.294 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.635.297 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.635.298 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.635.299 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.635.299 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.635.304 I llm_load_print_meta: n_ff             = 16384
0.00.635.305 I llm_load_print_meta: n_expert         = 0
0.00.635.305 I llm_load_print_meta: n_expert_used    = 0
0.00.635.306 I llm_load_print_meta: causal attn      = 1
0.00.635.306 I llm_load_print_meta: pooling type     = 0
0.00.635.306 I llm_load_print_meta: rope type        = 2
0.00.635.308 I llm_load_print_meta: rope scaling     = linear
0.00.635.309 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.635.310 I llm_load_print_meta: freq_scale_train = 1
0.00.635.310 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.635.311 I llm_load_print_meta: rope_finetuned   = unknown
0.00.635.312 I llm_load_print_meta: ssm_d_conv       = 0
0.00.635.312 I llm_load_print_meta: ssm_d_inner      = 0
0.00.635.312 I llm_load_print_meta: ssm_d_state      = 0
0.00.635.312 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.635.313 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.635.313 I llm_load_print_meta: model type       = 2B
0.00.635.318 I llm_load_print_meta: model ftype      = Q8_0
0.00.635.319 I llm_load_print_meta: model params     = 2.51 B
0.00.635.329 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.635.332 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.635.333 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.635.333 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.635.334 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.635.334 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.635.335 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.635.335 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.635.341 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.635.343 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.635.343 I llm_load_print_meta: max token length = 93
0.00.710.191 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.710.200 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.710.201 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.710.202 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.710.202 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.710.203 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.716.083 I llama_new_context_with_model: n_seq_max     = 1
0.00.716.091 I llama_new_context_with_model: n_ctx         = 4096
0.00.716.091 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.716.092 I llama_new_context_with_model: n_batch       = 2048
0.00.716.092 I llama_new_context_with_model: n_ubatch      = 512
0.00.716.093 I llama_new_context_with_model: flash_attn    = 0
0.00.716.095 I llama_new_context_with_model: freq_base     = 10000.0
0.00.716.096 I llama_new_context_with_model: freq_scale    = 1
0.00.716.096 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.730.630 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.730.669 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.730.797 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.733.289 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.733.293 I llama_new_context_with_model: graph nodes  = 601
0.00.733.294 I llama_new_context_with_model: graph splits = 1
0.00.733.317 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.378.837 I main: llama threadpool init, n_threads = 4
0.01.378.851 I 
0.01.378.955 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.378.959 I 
0.01.379.189 I sampler seed: 1360029474
0.01.379.202 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.379.208 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.379.212 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.379.212 I 
 increamental.

**Assistant**

I understand. I will provide you with information and context that will assist you in understanding the request. [end of text]


0.13.655.748 I llama_perf_sampler_print:    sampling time =      44.68 ms /    30 runs   (    1.49 ms per token,   671.46 tokens per second)
0.13.655.751 I llama_perf_context_print:        load time =    1377.87 ms
0.13.655.753 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.655.767 I llama_perf_context_print:        eval time =   12195.41 ms /    29 runs   (  420.53 ms per token,     2.38 tokens per second)
0.13.655.768 I llama_perf_context_print:       total time =   12276.92 ms /    30 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.656 I build: 4153 (6dfcfef0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.000.865 I main: load the model and apply lora adapter, if any
0.00.023.613 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.626 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.719 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.731 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.732 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.738 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.739 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.741 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.742 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.743 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.744 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.755 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.757 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.758 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.759 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.760 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.119 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.180 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.355 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.370 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.371 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.372 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.373 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.375 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.376 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.379 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.380 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.382 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.383 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.270.384 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.393 I llama_model_loader: - type  f32:   37 tensors
0.00.270.396 I llama_model_loader: - type q8_0:  127 tensors
0.00.456.972 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.518.984 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.519.978 I llm_load_vocab: special tokens cache size = 5
0.00.615.877 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.615.949 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.615.950 I llm_load_print_meta: arch             = gemma
0.00.615.950 I llm_load_print_meta: vocab type       = SPM
0.00.615.951 I llm_load_print_meta: n_vocab          = 256000
0.00.615.954 I llm_load_print_meta: n_merges         = 0
0.00.615.954 I llm_load_print_meta: vocab_only       = 0
0.00.615.955 I llm_load_print_meta: n_ctx_train      = 8192
0.00.615.955 I llm_load_print_meta: n_embd           = 2048
0.00.615.955 I llm_load_print_meta: n_layer          = 18
0.00.616.022 I llm_load_print_meta: n_head           = 8
0.00.616.029 I llm_load_print_meta: n_head_kv        = 1
0.00.616.030 I llm_load_print_meta: n_rot            = 256
0.00.616.030 I llm_load_print_meta: n_swa            = 0
0.00.616.031 I llm_load_print_meta: n_embd_head_k    = 256
0.00.616.031 I llm_load_print_meta: n_embd_head_v    = 256
0.00.616.035 I llm_load_print_meta: n_gqa            = 8
0.00.616.040 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.616.047 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.616.048 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.616.050 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.616.051 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.616.052 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.616.053 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.616.058 I llm_load_print_meta: n_ff             = 16384
0.00.616.058 I llm_load_print_meta: n_expert         = 0
0.00.616.071 I llm_load_print_meta: n_expert_used    = 0
0.00.616.075 I llm_load_print_meta: causal attn      = 1
0.00.616.076 I llm_load_print_meta: pooling type     = 0
0.00.616.076 I llm_load_print_meta: rope type        = 2
0.00.616.076 I llm_load_print_meta: rope scaling     = linear
0.00.616.078 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.616.078 I llm_load_print_meta: freq_scale_train = 1
0.00.616.079 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.616.079 I llm_load_print_meta: rope_finetuned   = unknown
0.00.616.080 I llm_load_print_meta: ssm_d_conv       = 0
0.00.616.080 I llm_load_print_meta: ssm_d_inner      = 0
0.00.616.081 I llm_load_print_meta: ssm_d_state      = 0
0.00.616.081 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.616.082 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.616.083 I llm_load_print_meta: model type       = 2B
0.00.616.087 I llm_load_print_meta: model ftype      = Q8_0
0.00.616.088 I llm_load_print_meta: model params     = 2.51 B
0.00.616.097 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.616.098 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.616.098 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.616.099 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.616.099 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.616.100 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.616.100 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.616.100 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.616.107 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.616.108 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.616.109 I llm_load_print_meta: max token length = 93
0.00.688.423 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.688.433 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.694.224 I llama_new_context_with_model: n_seq_max     = 1
0.00.694.231 I llama_new_context_with_model: n_ctx         = 4096
0.00.694.232 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.694.232 I llama_new_context_with_model: n_batch       = 2048
0.00.694.232 I llama_new_context_with_model: n_ubatch      = 512
0.00.694.233 I llama_new_context_with_model: flash_attn    = 0
0.00.694.235 I llama_new_context_with_model: freq_base     = 10000.0
0.00.694.236 I llama_new_context_with_model: freq_scale    = 1
0.00.694.237 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.708.654 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.708.699 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.708.837 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.711.430 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.711.434 I llama_new_context_with_model: graph nodes  = 601
0.00.711.434 I llama_new_context_with_model: graph splits = 1
0.00.711.457 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.322.406 I main: llama threadpool init, n_threads = 4
0.01.322.421 I 
0.01.322.528 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.322.531 I 
0.01.322.762 I sampler seed: 3218860057
0.01.322.774 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.322.781 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.322.781 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.322.782 I 
 increasities, a mischievous creature known for its trickery and cunning. [end of text]


0.07.649.414 I llama_perf_sampler_print:    sampling time =      23.22 ms /    16 runs   (    1.45 ms per token,   689.03 tokens per second)
0.07.649.417 I llama_perf_context_print:        load time =    1321.45 ms
0.07.649.419 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.649.421 I llama_perf_context_print:        eval time =    6284.20 ms /    15 runs   (  418.95 ms per token,     2.39 tokens per second)
0.07.649.422 I llama_perf_context_print:       total time =    6327.02 ms /    16 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m48.690s
user	2m27.799s
sys	0m9.290s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4153 (6dfcfef0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186205.86 ms
main:    total time = 186205.86 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 4153 (6dfcfef0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.852 I main: llama backend init
0.00.000.860 I main: load the model and apply lora adapter, if any
0.00.023.282 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.293 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.386 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.398 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.399 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.405 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.412 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.413 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.414 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.415 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.416 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.422 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.423 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.424 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.425 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.435 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.146.712 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.245.750 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.767 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.774 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.775 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.777 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.778 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.780 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.781 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.784 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.786 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.787 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.788 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.789 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.797 I llama_model_loader: - type  f32:   37 tensors
0.00.268.799 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.800 I llama_model_loader: - type q6_K:   19 tensors
0.00.447.685 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.515.558 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.516.596 I llm_load_vocab: special tokens cache size = 5
0.00.618.557 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.618.626 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.618.627 I llm_load_print_meta: arch             = gemma
0.00.618.628 I llm_load_print_meta: vocab type       = SPM
0.00.618.629 I llm_load_print_meta: n_vocab          = 256000
0.00.618.632 I llm_load_print_meta: n_merges         = 0
0.00.618.632 I llm_load_print_meta: vocab_only       = 0
0.00.618.633 I llm_load_print_meta: n_ctx_train      = 8192
0.00.618.633 I llm_load_print_meta: n_embd           = 2048
0.00.618.633 I llm_load_print_meta: n_layer          = 18
0.00.618.699 I llm_load_print_meta: n_head           = 8
0.00.618.706 I llm_load_print_meta: n_head_kv        = 1
0.00.618.706 I llm_load_print_meta: n_rot            = 256
0.00.618.706 I llm_load_print_meta: n_swa            = 0
0.00.618.707 I llm_load_print_meta: n_embd_head_k    = 256
0.00.618.708 I llm_load_print_meta: n_embd_head_v    = 256
0.00.618.713 I llm_load_print_meta: n_gqa            = 8
0.00.618.717 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.618.722 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.618.730 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.618.731 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.618.731 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.618.732 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.618.733 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.618.738 I llm_load_print_meta: n_ff             = 16384
0.00.618.739 I llm_load_print_meta: n_expert         = 0
0.00.618.739 I llm_load_print_meta: n_expert_used    = 0
0.00.618.739 I llm_load_print_meta: causal attn      = 1
0.00.618.740 I llm_load_print_meta: pooling type     = 0
0.00.618.742 I llm_load_print_meta: rope type        = 2
0.00.618.742 I llm_load_print_meta: rope scaling     = linear
0.00.618.744 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.618.745 I llm_load_print_meta: freq_scale_train = 1
0.00.618.746 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.618.746 I llm_load_print_meta: rope_finetuned   = unknown
0.00.618.747 I llm_load_print_meta: ssm_d_conv       = 0
0.00.618.747 I llm_load_print_meta: ssm_d_inner      = 0
0.00.618.747 I llm_load_print_meta: ssm_d_state      = 0
0.00.618.748 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.618.749 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.618.749 I llm_load_print_meta: model type       = 2B
0.00.618.751 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.618.751 I llm_load_print_meta: model params     = 2.51 B
0.00.618.763 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.618.764 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.618.772 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.618.773 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.618.773 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.618.774 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.618.775 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.618.775 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.618.793 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.618.795 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.618.795 I llm_load_print_meta: max token length = 93
0.00.679.839 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.679.848 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.679.849 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.679.849 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.679.850 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.679.851 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.685.642 I llama_new_context_with_model: n_seq_max     = 1
0.00.685.649 I llama_new_context_with_model: n_ctx         = 4096
0.00.685.650 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.685.650 I llama_new_context_with_model: n_batch       = 2048
0.00.685.651 I llama_new_context_with_model: n_ubatch      = 512
0.00.685.651 I llama_new_context_with_model: flash_attn    = 0
0.00.685.654 I llama_new_context_with_model: freq_base     = 10000.0
0.00.685.655 I llama_new_context_with_model: freq_scale    = 1
0.00.685.655 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.700.686 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.700.725 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.700.853 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.703.457 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.703.461 I llama_new_context_with_model: graph nodes  = 601
0.00.703.462 I llama_new_context_with_model: graph splits = 1
0.00.703.484 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.290.803 I main: llama threadpool init, n_threads = 4
0.01.290.817 I 
0.01.290.922 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.290.926 I 
0.01.291.159 I sampler seed: 736119165
0.01.291.171 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.291.177 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.291.180 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.291.180 I 
 fufilling sounds, the rustling of leaves, and the distant call of a hawk.

This is the auditory landscape of a forest at dawn, a world bathed

0.12.414.338 I llama_perf_sampler_print:    sampling time =      49.38 ms /    33 runs   (    1.50 ms per token,   668.29 tokens per second)
0.12.414.341 I llama_perf_context_print:        load time =    1289.85 ms
0.12.414.357 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.414.358 I llama_perf_context_print:        eval time =   11035.07 ms /    32 runs   (  344.85 ms per token,     2.90 tokens per second)
0.12.414.359 I llama_perf_context_print:       total time =   11123.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4153 (6dfcfef0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186151.11 ms
main:    total time = 186151.11 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.651 I build: 4153 (6dfcfef0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.856 I main: llama backend init
0.00.000.864 I main: load the model and apply lora adapter, if any
0.00.023.519 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.624 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.641 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.646 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.655 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.659 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.660 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.661 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.662 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.664 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.671 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.672 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.674 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.683 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.685 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.146.785 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.353 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.484 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.493 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.495 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.496 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.497 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.499 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.500 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.504 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.505 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.513 I llama_model_loader: - type  f32:   37 tensors
0.00.269.515 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.515 I llama_model_loader: - type q6_K:   19 tensors
0.00.449.721 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.511.098 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.512.089 I llm_load_vocab: special tokens cache size = 5
0.00.608.433 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.608.506 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.608.507 I llm_load_print_meta: arch             = gemma
0.00.608.507 I llm_load_print_meta: vocab type       = SPM
0.00.608.509 I llm_load_print_meta: n_vocab          = 256000
0.00.608.511 I llm_load_print_meta: n_merges         = 0
0.00.608.512 I llm_load_print_meta: vocab_only       = 0
0.00.608.512 I llm_load_print_meta: n_ctx_train      = 8192
0.00.608.512 I llm_load_print_meta: n_embd           = 2048
0.00.608.513 I llm_load_print_meta: n_layer          = 18
0.00.608.578 I llm_load_print_meta: n_head           = 8
0.00.608.585 I llm_load_print_meta: n_head_kv        = 1
0.00.608.585 I llm_load_print_meta: n_rot            = 256
0.00.608.586 I llm_load_print_meta: n_swa            = 0
0.00.608.586 I llm_load_print_meta: n_embd_head_k    = 256
0.00.608.586 I llm_load_print_meta: n_embd_head_v    = 256
0.00.608.592 I llm_load_print_meta: n_gqa            = 8
0.00.608.597 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.608.603 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.608.604 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.608.628 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.608.633 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.608.634 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.608.634 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.608.641 I llm_load_print_meta: n_ff             = 16384
0.00.608.645 I llm_load_print_meta: n_expert         = 0
0.00.608.645 I llm_load_print_meta: n_expert_used    = 0
0.00.608.646 I llm_load_print_meta: causal attn      = 1
0.00.608.646 I llm_load_print_meta: pooling type     = 0
0.00.608.646 I llm_load_print_meta: rope type        = 2
0.00.608.647 I llm_load_print_meta: rope scaling     = linear
0.00.608.648 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.608.649 I llm_load_print_meta: freq_scale_train = 1
0.00.608.649 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.608.649 I llm_load_print_meta: rope_finetuned   = unknown
0.00.608.650 I llm_load_print_meta: ssm_d_conv       = 0
0.00.608.650 I llm_load_print_meta: ssm_d_inner      = 0
0.00.608.650 I llm_load_print_meta: ssm_d_state      = 0
0.00.608.651 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.608.651 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.608.652 I llm_load_print_meta: model type       = 2B
0.00.608.654 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.608.654 I llm_load_print_meta: model params     = 2.51 B
0.00.608.663 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.608.664 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.608.665 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.608.666 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.608.666 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.608.667 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.608.667 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.608.668 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.608.674 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.608.676 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.608.677 I llm_load_print_meta: max token length = 93
0.00.664.283 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.669.949 I llama_new_context_with_model: n_seq_max     = 1
0.00.669.956 I llama_new_context_with_model: n_ctx         = 4096
0.00.669.956 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.669.957 I llama_new_context_with_model: n_batch       = 2048
0.00.669.957 I llama_new_context_with_model: n_ubatch      = 512
0.00.669.958 I llama_new_context_with_model: flash_attn    = 0
0.00.669.960 I llama_new_context_with_model: freq_base     = 10000.0
0.00.669.960 I llama_new_context_with_model: freq_scale    = 1
0.00.669.961 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.685.332 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.685.376 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.685.502 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.688.106 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.688.110 I llama_new_context_with_model: graph nodes  = 601
0.00.688.110 I llama_new_context_with_model: graph splits = 1
0.00.688.134 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.272.133 I main: llama threadpool init, n_threads = 4
0.01.272.151 I 
0.01.272.259 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.272.263 I 
0.01.272.489 I sampler seed: 1247704222
0.01.272.502 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.272.508 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.272.512 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.272.512 I 
 maneuvously.

I am unable to provide a response that includes potentially harmful or inappropriate content. [end of text]


0.08.570.928 I llama_perf_sampler_print:    sampling time =      32.42 ms /    22 runs   (    1.47 ms per token,   678.68 tokens per second)
0.08.570.931 I llama_perf_context_print:        load time =    1271.18 ms
0.08.570.933 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.570.934 I llama_perf_context_print:        eval time =    7240.00 ms /    21 runs   (  344.76 ms per token,     2.90 tokens per second)
0.08.570.935 I llama_perf_context_print:       total time =    7298.81 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m36.179s
user	46m27.868s
sys	0m6.087s
