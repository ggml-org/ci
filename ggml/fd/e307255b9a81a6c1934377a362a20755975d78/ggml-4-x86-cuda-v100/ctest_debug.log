+ cmake -DCMAKE_BUILD_TYPE=Debug -DGGML_CUBLAS=ON ..
CMake Deprecation Warning at CMakeLists.txt:1 (cmake_minimum_required):
  Compatibility with CMake < 3.5 will be removed from a future version of
  CMake.

  Update the VERSION argument <min> value or use a ...<max> suffix to tell
  CMake that the project does not need compatibility with older versions.


-- The C compiler identification is GNU 11.4.0
-- The CXX compiler identification is GNU 11.4.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found Git: /usr/bin/git (found version "2.34.1") 
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE  
-- CMAKE_SYSTEM_PROCESSOR: x86_64
GNU ld (GNU Binutils for Ubuntu) 2.38
-- x86 detected
-- Linux detected
-- Found CUDAToolkit: /usr/local/cuda-12.2/include (found version "12.2.140") 
-- cuBLAS found
-- The CUDA compiler identification is NVIDIA 12.2.140
-- Detecting CUDA compiler ABI info
-- Detecting CUDA compiler ABI info - done
-- Check for working CUDA compiler: /usr/local/cuda-12.2/bin/nvcc - skipped
-- Detecting CUDA compile features
-- Detecting CUDA compile features - done
-- GGML CUDA sources found
-- GGML Configuring CUDA architectures 52;61;70
-- x86 detected
-- Linux detected
-- Configuring done (3.0s)
-- Generating done (0.1s)
-- Build files have been written to: /home/ggml/work/ggml/build-ci-debug

real	0m3.210s
user	0m2.390s
sys	0m0.812s
+ make -j
[  1%] Building C object src/CMakeFiles/ggml.dir/ggml.c.o
[  1%] Building CXX object examples/CMakeFiles/common.dir/common.cpp.o
[  3%] Building C object src/CMakeFiles/ggml.dir/ggml-alloc.c.o
[  3%] Building C object src/CMakeFiles/ggml.dir/ggml-backend.c.o
[  4%] Building C object src/CMakeFiles/ggml.dir/ggml-quants.c.o
[  4%] Building CUDA object src/CMakeFiles/ggml.dir/ggml-cuda.cu.o
/home/ggml/work/ggml/src/ggml-cuda.cu(630): warning #177-D: function "warp_reduce_sum(half2)" was declared but never referenced
                                   half2 warp_reduce_sum(half2 a) {
                                         ^

Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"

/home/ggml/work/ggml/src/ggml-cuda.cu(651): warning #177-D: function "warp_reduce_max(half2)" was declared but never referenced
                                   half2 warp_reduce_max(half2 x) {
                                         ^

[  5%] Linking CXX static library libcommon.a
[  5%] Built target common
[  6%] Linking CUDA shared library libggml.so
[  6%] Built target ggml
[  7%] Building C object tests/CMakeFiles/test-vec0.dir/test-vec0.c.o
[  8%] Building C object tests/CMakeFiles/test-vec1.dir/test-vec1.c.o
[  9%] Building CXX object tests/CMakeFiles/test-grad0.dir/test-grad0.cpp.o
[ 10%] Building CXX object tests/CMakeFiles/test-opt.dir/test-opt.cpp.o
[ 11%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/test-quantize-fns.cpp.o
[ 11%] Building C object tests/CMakeFiles/test-mul-mat0.dir/test-mul-mat0.c.o
[ 12%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/test-quantize-perf.cpp.o
[ 13%] Building C object tests/CMakeFiles/test0.dir/test0.c.o
[ 14%] Building C object tests/CMakeFiles/test-mul-mat2.dir/test-mul-mat2.c.o
[ 15%] Building C object tests/CMakeFiles/test1.dir/test1.c.o
[ 15%] Building C object tests/CMakeFiles/test2.dir/test2.c.o
[ 16%] Linking C executable ../bin/test-vec0
[ 17%] Building C object tests/CMakeFiles/test-conv-transpose.dir/test-conv-transpose.c.o
[ 18%] Building C object tests/CMakeFiles/test3.dir/test3.c.o
[ 19%] Linking C executable ../bin/test0
[ 20%] Building C object tests/CMakeFiles/test-pool.dir/test-pool.c.o
[ 21%] Linking C executable ../bin/test-mul-mat0
[ 22%] Linking CXX executable ../bin/test-opt
[ 22%] Building C object tests/CMakeFiles/test-rel-pos.dir/test-rel-pos.c.o
[ 23%] Building C object tests/CMakeFiles/test-dup.dir/test-dup.c.o
[ 24%] Building C object tests/CMakeFiles/test-customop.dir/test-customop.c.o
[ 25%] Building C object tests/CMakeFiles/test-xpos.dir/test-xpos.c.o
[ 25%] Building CXX object tests/CMakeFiles/test-conv1d.dir/test-conv1d.cpp.o
[ 26%] Linking C executable ../bin/test1
[ 27%] Linking C executable ../bin/test2
[ 27%] Built target test-vec0
[ 28%] Linking C executable ../bin/test-conv-transpose
[ 29%] Building CXX object tests/CMakeFiles/test-conv2d.dir/test-conv2d.cpp.o
[ 30%] Building CXX object tests/CMakeFiles/test-backend-buffer.dir/test-backend-buffer.cpp.o
[ 31%] Building CXX object tests/CMakeFiles/test-mul-mat.dir/test-mul-mat.cpp.o
[ 32%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/test-backend-ops.cpp.o
[ 33%] Linking C executable ../bin/test-pool
[ 34%] Linking C executable ../bin/test-customop
[ 35%] Linking C executable ../bin/test3
[ 36%] Building CXX object examples/whisper/CMakeFiles/whisper-cpp.dir/whisper.cpp.o
[ 37%] Building CXX object examples/CMakeFiles/common-ggml.dir/common-ggml.cpp.o
[ 38%] Building CXX object examples/mnist/CMakeFiles/mnist.dir/main.cpp.o
[ 38%] Building CXX object examples/mnist/CMakeFiles/mnist-cnn.dir/main-cnn.cpp.o
[ 39%] Linking C executable ../bin/test-rel-pos
[ 40%] Building CXX object examples/mnist/CMakeFiles/mnist-cpu.dir/main-cpu.cpp.o
[ 40%] Building CXX object examples/sam/CMakeFiles/sam.dir/main.cpp.o
[ 40%] Built target test-mul-mat0
[ 42%] Linking C executable ../bin/test-dup
[ 42%] Building CXX object examples/yolo/CMakeFiles/yolov3-tiny.dir/yolov3-tiny.cpp.o
[ 43%] Building CXX object examples/yolo/CMakeFiles/yolov3-tiny.dir/yolo-image.cpp.o
[ 43%] Built target test2
[ 44%] Linking CXX executable ../bin/test-grad0
[ 45%] Linking CXX executable ../bin/test-backend-buffer
[ 45%] Built target test1
[ 46%] Linking C executable ../bin/test-xpos
[ 46%] Built target test-customop
[ 46%] Built target test0
[ 46%] Built target test-opt
[ 47%] Linking C executable ../bin/test-vec1
[ 47%] Built target test-pool
[ 47%] Built target test3
[ 47%] Built target test-conv-transpose
[ 47%] Built target test-rel-pos
[ 47%] Built target test-grad0
[ 47%] Built target test-vec1
[ 47%] Built target test-dup
[ 47%] Built target test-backend-buffer
[ 47%] Built target test-xpos
[ 48%] Linking CXX executable ../bin/test-quantize-fns
[ 48%] Built target test-quantize-fns
[ 49%] Linking C executable ../bin/test-mul-mat2
/home/ggml/work/ggml/tests/test-conv1d.cpp:24:13: warning: ‘void ggml_log_callback_default(ggml_log_level, const char*, void*)’ defined but not used [-Wunused-function]
   24 | static void ggml_log_callback_default(ggml_log_level level, const char * text, void * user_data) {
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~
/home/ggml/work/ggml/tests/test-mul-mat.cpp:24:13: warning: ‘void ggml_log_callback_default(ggml_log_level, const char*, void*)’ defined but not used [-Wunused-function]
   24 | static void ggml_log_callback_default(ggml_log_level level, const char * text, void * user_data) {
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~
[ 49%] Built target test-mul-mat2
[ 50%] Linking CXX executable ../bin/test-mul-mat
[ 51%] Linking CXX executable ../bin/test-conv1d
/home/ggml/work/ggml/tests/test-conv2d.cpp:24:13: warning: ‘void ggml_log_callback_default(ggml_log_level, const char*, void*)’ defined but not used [-Wunused-function]
   24 | static void ggml_log_callback_default(ggml_log_level level, const char * text, void * user_data) {
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~
[ 52%] Linking CXX executable ../../bin/mnist-cpu
[ 52%] Built target test-mul-mat
[ 53%] Linking CXX executable ../bin/test-conv2d
[ 53%] Built target test-conv1d
[ 54%] Linking CXX executable ../../bin/mnist-cnn
[ 54%] Built target mnist-cpu
[ 55%] Linking CXX executable ../../bin/mnist
[ 55%] Built target test-conv2d
[ 55%] Built target mnist-cnn
[ 55%] Built target mnist
[ 56%] Linking CXX executable ../bin/test-quantize-perf
[ 56%] Built target test-quantize-perf
[ 57%] Linking CXX executable ../../bin/yolov3-tiny
[ 57%] Built target yolov3-tiny
[ 58%] Linking CXX executable ../bin/test-backend-ops
[ 58%] Built target test-backend-ops
[ 59%] Linking CXX executable ../../bin/sam
[ 59%] Built target sam
[ 60%] Linking CXX static library libcommon-ggml.a
[ 60%] Built target common-ggml
[ 61%] Building CXX object examples/gpt-2/CMakeFiles/gpt-2-ctx.dir/main-ctx.cpp.o
[ 62%] Building CXX object examples/gpt-2/CMakeFiles/gpt-2-alloc.dir/main-alloc.cpp.o
[ 63%] Building CXX object examples/gpt-2/CMakeFiles/gpt-2-backend.dir/main-backend.cpp.o
[ 64%] Building CXX object examples/gpt-2/CMakeFiles/gpt-2-backend2.dir/main.cpp.o
[ 65%] Building CXX object examples/gpt-2/CMakeFiles/gpt-2-batched.dir/main-batched.cpp.o
[ 65%] Building CXX object examples/gpt-2/CMakeFiles/gpt-2-quantize.dir/quantize.cpp.o
[ 66%] Building CXX object examples/gpt-j/CMakeFiles/gpt-j.dir/main.cpp.o
[ 67%] Building CXX object examples/gpt-j/CMakeFiles/gpt-j-quantize.dir/quantize.cpp.o
[ 68%] Building CXX object examples/gpt-neox/CMakeFiles/gpt-neox.dir/main.cpp.o
[ 69%] Building CXX object examples/dolly-v2/CMakeFiles/dollyv2.dir/main.cpp.o
[ 70%] Building CXX object examples/whisper/CMakeFiles/whisper-quantize.dir/quantize.cpp.o
[ 71%] Building CXX object examples/gpt-neox/CMakeFiles/gpt-neox-quantize.dir/quantize.cpp.o
[ 72%] Building CXX object examples/replit/CMakeFiles/replit.dir/main.cpp.o
[ 73%] Building CXX object examples/replit/CMakeFiles/replit-quantize.dir/quantize.cpp.o
[ 74%] Building CXX object examples/dolly-v2/CMakeFiles/dollyv2-quantize.dir/quantize.cpp.o
[ 75%] Building CXX object examples/mpt/CMakeFiles/mpt.dir/main.cpp.o
[ 76%] Building CXX object examples/mpt/CMakeFiles/mpt-quantize.dir/quantize.cpp.o
[ 77%] Building CXX object examples/starcoder/CMakeFiles/starcoder-quantize.dir/quantize.cpp.o
[ 78%] Building CXX object examples/starcoder/CMakeFiles/starcoder.dir/main.cpp.o
[ 79%] Linking CXX executable ../../bin/replit-quantize
[ 80%] Linking CXX executable ../../bin/mpt-quantize
[ 80%] Built target replit-quantize
[ 81%] Linking CXX executable ../../bin/gpt-2-quantize
[ 82%] Linking CXX executable ../../bin/gpt-j-quantize
[ 83%] Linking CXX executable ../../bin/dollyv2-quantize
[ 83%] Built target mpt-quantize
[ 84%] Linking CXX executable ../../bin/gpt-neox-quantize
[ 85%] Linking CXX executable ../../bin/gpt-2-alloc
[ 86%] Linking CXX executable ../../bin/dollyv2
[ 87%] Linking CXX executable ../../bin/gpt-neox
[ 87%] Built target gpt-j-quantize
[ 87%] Built target gpt-2-quantize
[ 87%] Built target dollyv2-quantize
[ 88%] Linking CXX executable ../../bin/starcoder-quantize
[ 89%] Linking CXX executable ../../bin/gpt-j
[ 90%] Linking CXX executable ../../bin/gpt-2-backend
[ 91%] Linking CXX executable ../../bin/starcoder
[ 92%] Linking CXX executable ../../bin/whisper-quantize
[ 92%] Built target gpt-neox-quantize
[ 92%] Built target gpt-2-alloc
[ 93%] Linking CXX executable ../../bin/gpt-2-batched
[ 93%] Built target gpt-neox
[ 94%] Linking CXX executable ../../bin/gpt-2-ctx
[ 94%] Built target dollyv2
[ 94%] Built target gpt-j
[ 94%] Built target starcoder-quantize
[ 95%] Linking CXX executable ../../bin/replit
[ 96%] Linking CXX executable ../../bin/mpt
[ 96%] Built target gpt-2-backend
[ 96%] Built target whisper-quantize
[ 97%] Linking CXX executable ../../bin/gpt-2-backend2
[ 97%] Built target starcoder
[ 97%] Built target gpt-2-batched
[ 97%] Built target gpt-2-ctx
[ 97%] Built target mpt
[ 97%] Built target replit
[ 97%] Built target gpt-2-backend2
[ 98%] Linking CXX static library libwhisper-cpp.a
[ 98%] Built target whisper-cpp
[ 99%] Building CXX object examples/whisper/CMakeFiles/whisper.dir/main.cpp.o
[100%] Linking CXX executable ../../bin/whisper
[100%] Built target whisper

real	0m45.630s
user	1m26.705s
sys	0m8.009s
+ ctest --output-on-failure -E test-opt
Test project /home/ggml/work/ggml/build-ci-debug
      Start  1: test-grad0
 1/20 Test  #1: test-grad0 .......................   Passed    6.54 sec
      Start  2: test-quantize-fns
 2/20 Test  #2: test-quantize-fns ................   Passed    0.58 sec
      Start  3: test-quantize-perf
 3/20 Test  #3: test-quantize-perf ...............   Passed    0.80 sec
      Start  4: test-mul-mat0
 4/20 Test  #4: test-mul-mat0 ....................   Passed    1.10 sec
      Start  5: test-mul-mat2
 5/20 Test  #5: test-mul-mat2 ....................   Passed    7.93 sec
      Start  6: test0
 6/20 Test  #6: test0 ............................   Passed    0.55 sec
      Start  7: test1
 7/20 Test  #7: test1 ............................   Passed    0.54 sec
      Start  8: test2
 8/20 Test  #8: test2 ............................   Passed   20.76 sec
      Start  9: test3
 9/20 Test  #9: test3 ............................   Passed    2.03 sec
      Start 10: test-pool
10/20 Test #10: test-pool ........................   Passed    0.55 sec
      Start 11: test-conv-transpose
11/20 Test #11: test-conv-transpose ..............   Passed    0.53 sec
      Start 12: test-dup
12/20 Test #12: test-dup .........................   Passed    0.53 sec
      Start 13: test-rel-pos
13/20 Test #13: test-rel-pos .....................   Passed    0.54 sec
      Start 14: test-customop
14/20 Test #14: test-customop ....................   Passed    0.53 sec
      Start 15: test-xpos
15/20 Test #15: test-xpos ........................   Passed    0.55 sec
      Start 16: test-conv1d
16/20 Test #16: test-conv1d ......................   Passed    0.56 sec
      Start 17: test-conv2d
17/20 Test #17: test-conv2d ......................   Passed    0.58 sec
      Start 18: test-mul-mat
18/20 Test #18: test-mul-mat .....................   Passed    0.55 sec
      Start 19: test-backend-buffer
19/20 Test #19: test-backend-buffer ..............   Passed    0.54 sec
      Start 20: test-backend-ops
20/20 Test #20: test-backend-ops .................***Failed  256.10 sec
ggml_backend_register: registered backend CPU
ggml_backend_register: registered backend CUDA0
ggml_init_cublas: GGML_CUDA_FORCE_MMQ:   no
ggml_init_cublas: CUDA_USE_TENSOR_CORES: yes
ggml_init_cublas: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
Testing 2 backends

Backend 1/2 (CPU)
  Backend name: CPU
  ABS(type=f32,ne=[128,10,10,10]): [1;32mOK[0m
  SGN(type=f32,ne=[128,10,10,10]): [1;32mOK[0m
  NEG(type=f32,ne=[128,10,10,10]): [1;32mOK[0m
  STEP(type=f32,ne=[128,10,10,10]): [1;32mOK[0m
  TANH(type=f32,ne=[128,10,10,10]): [1;32mOK[0m
  ELU(type=f32,ne=[128,10,10,10]): [1;32mOK[0m
  RELU(type=f32,ne=[128,10,10,10]): [1;32mOK[0m
  GELU(type=f32,ne=[128,10,10,10]): [1;32mOK[0m
  GELU_QUICK(type=f32,ne=[128,10,10,10]): [1;32mOK[0m
  SILU(type=f32,ne=[128,10,10,10]): [1;32mOK[0m
  HARDSWISH(type=f32,ne=[128,10,10,10]): [1;32mOK[0m
  HARDSIGMOID(type=f32,ne=[128,10,10,10]): [1;32mOK[0m
  GET_ROWS(type=f32,n=1,m=8,r=2,b=1,v=0): [1;32mOK[0m
  GET_ROWS(type=f32,n=256,m=5,r=4,b=1,v=0): [1;32mOK[0m
  GET_ROWS(type=f32,n=256,m=5,r=4,b=1,v=1): [1;32mOK[0m
  GET_ROWS(type=f32,n=256,m=5,r=4,b=7,v=0): [1;32mOK[0m
  GET_ROWS(type=f32,n=256,m=5,r=4,b=7,v=1): [1;32mOK[0m
  GET_ROWS(type=f16,n=256,m=5,r=4,b=1,v=0): [1;32mOK[0m
  GET_ROWS(type=f16,n=256,m=5,r=4,b=1,v=1): [1;32mOK[0m
  GET_ROWS(type=f16,n=256,m=5,r=4,b=7,v=0): [1;32mOK[0m
  GET_ROWS(type=f16,n=256,m=5,r=4,b=7,v=1): [1;32mOK[0m
  GET_ROWS(type=q4_0,n=256,m=5,r=4,b=1,v=0): [1;32mOK[0m
  GET_ROWS(type=q4_0,n=256,m=5,r=4,b=1,v=1): [1;32mOK[0m
  GET_ROWS(type=q4_0,n=256,m=5,r=4,b=7,v=0): [1;32mOK[0m
  GET_ROWS(type=q4_0,n=256,m=5,r=4,b=7,v=1): [1;32mOK[0m
  GET_ROWS(type=q4_1,n=256,m=5,r=4,b=1,v=0): [1;32mOK[0m
  GET_ROWS(type=q4_1,n=256,m=5,r=4,b=1,v=1): [1;32mOK[0m
  GET_ROWS(type=q4_1,n=256,m=5,r=4,b=7,v=0): [1;32mOK[0m
  GET_ROWS(type=q4_1,n=256,m=5,r=4,b=7,v=1): [1;32mOK[0m
  GET_ROWS(type=q5_0,n=256,m=5,r=4,b=1,v=0): [1;32mOK[0m
  GET_ROWS(type=q5_0,n=256,m=5,r=4,b=1,v=1): [1;32mOK[0m
  GET_ROWS(type=q5_0,n=256,m=5,r=4,b=7,v=0): [1;32mOK[0m
  GET_ROWS(type=q5_0,n=256,m=5,r=4,b=7,v=1): [1;32mOK[0m
  GET_ROWS(type=q5_1,n=256,m=5,r=4,b=1,v=0): [1;32mOK[0m
  GET_ROWS(type=q5_1,n=256,m=5,r=4,b=1,v=1): [1;32mOK[0m
  GET_ROWS(type=q5_1,n=256,m=5,r=4,b=7,v=0): [1;32mOK[0m
  GET_ROWS(type=q5_1,n=256,m=5,r=4,b=7,v=1): [1;32mOK[0m
  GET_ROWS(type=q8_0,n=256,m=5,r=4,b=1,v=0): [1;32mOK[0m
  GET_ROWS(type=q8_0,n=256,m=5,r=4,b=1,v=1): [1;32mOK[0m
  GET_ROWS(type=q8_0,n=256,m=5,r=4,b=7,v=0): [1;32mOK[0m
  GET_ROWS(type=q8_0,n=256,m=5,r=4,b=7,v=1): [1;32mOK[0m
  GET_ROWS(type=q2_K,n=256,m=5,r=4,b=1,v=0): [1;32mOK[0m
  GET_ROWS(type=q2_K,n=256,m=5,r=4,b=1,v=1): [1;32mOK[0m
  GET_ROWS(type=q2_K,n=256,m=5,r=4,b=7,v=0): [1;32mOK[0m
  GET_ROWS(type=q2_K,n=256,m=5,r=4,b=7,v=1): [1;32mOK[0m
  GET_ROWS(type=q3_K,n=256,m=5,r=4,b=1,v=0): [1;32mOK[0m
  GET_ROWS(type=q3_K,n=256,m=5,r=4,b=1,v=1): [1;32mOK[0m
  GET_ROWS(type=q3_K,n=256,m=5,r=4,b=7,v=0): [1;32mOK[0m
  GET_ROWS(type=q3_K,n=256,m=5,r=4,b=7,v=1): [1;32mOK[0m
  GET_ROWS(type=q4_K,n=256,m=5,r=4,b=1,v=0): [1;32mOK[0m
  GET_ROWS(type=q4_K,n=256,m=5,r=4,b=1,v=1): [1;32mOK[0m
  GET_ROWS(type=q4_K,n=256,m=5,r=4,b=7,v=0): [1;32mOK[0m
  GET_ROWS(type=q4_K,n=256,m=5,r=4,b=7,v=1): [1;32mOK[0m
  GET_ROWS(type=q5_K,n=256,m=5,r=4,b=1,v=0): [1;32mOK[0m
  GET_ROWS(type=q5_K,n=256,m=5,r=4,b=1,v=1): [1;32mOK[0m
  GET_ROWS(type=q5_K,n=256,m=5,r=4,b=7,v=0): [1;32mOK[0m
  GET_ROWS(type=q5_K,n=256,m=5,r=4,b=7,v=1): [1;32mOK[0m
  GET_ROWS(type=q6_K,n=256,m=5,r=4,b=1,v=0): [1;32mOK[0m
  GET_ROWS(type=q6_K,n=256,m=5,r=4,b=1,v=1): [1;32mOK[0m
  GET_ROWS(type=q6_K,n=256,m=5,r=4,b=7,v=0): [1;32mOK[0m
  GET_ROWS(type=q6_K,n=256,m=5,r=4,b=7,v=1): [1;32mOK[0m
  GET_ROWS(type=iq2_xxs,n=256,m=5,r=4,b=1,v=0): ================================================================= iq2xs_init_impl(grid_size = 256)
iq2xs_init_impl: 373964 neighbours in total
[1;32mOK[0m
  GET_ROWS(type=iq2_xxs,n=256,m=5,r=4,b=1,v=1): [1;32mOK[0m
  GET_ROWS(type=iq2_xxs,n=256,m=5,r=4,b=7,v=0): [1;32mOK[0m
  GET_ROWS(type=iq2_xxs,n=256,m=5,r=4,b=7,v=1): [1;32mOK[0m
  GET_ROWS(type=iq2_xs,n=256,m=5,r=4,b=1,v=0): ================================================================= iq2xs_init_impl(grid_size = 512)
iq2xs_init_impl: 508542 neighbours in total
[1;32mOK[0m
  GET_ROWS(type=iq2_xs,n=256,m=5,r=4,b=1,v=1): [1;32mOK[0m
  GET_ROWS(type=iq2_xs,n=256,m=5,r=4,b=7,v=0): [1;32mOK[0m
  GET_ROWS(type=iq2_xs,n=256,m=5,r=4,b=7,v=1): [1;32mOK[0m
  GET_ROWS(type=i32,n=256,m=5,r=4,b=1,v=0): [1;32mOK[0m
  GET_ROWS(type=i32,n=256,m=5,r=4,b=1,v=1): [1;32mOK[0m
  GET_ROWS(type=i32,n=256,m=5,r=4,b=7,v=0): [1;32mOK[0m
  GET_ROWS(type=i32,n=256,m=5,r=4,b=7,v=1): [1;32mOK[0m
  REPEAT(type=f32,ne=[10,10,10,10],nr=[1,1,1,1]): [1;32mOK[0m
  REPEAT(type=f32,ne=[10,10,10,10],nr=[2,1,1,1]): [1;32mOK[0m
  REPEAT(type=f32,ne=[10,10,10,10],nr=[1,2,1,1]): [1;32mOK[0m
  REPEAT(type=f32,ne=[10,10,10,10],nr=[1,1,2,1]): [1;32mOK[0m
  REPEAT(type=f32,ne=[10,10,10,10],nr=[1,1,1,2]): [1;32mOK[0m
  REPEAT(type=i32,ne=[10,10,10,10],nr=[2,1,1,1]): [1;32mOK[0m
  REPEAT(type=i16,ne=[10,10,10,10],nr=[1,1,1,2]): [1;32mOK[0m
  DUP(type=f32,ne=[10,10,10,1]): [1;32mOK[0m
  DUP(type=f16,ne=[10,10,10,1]): [1;32mOK[0m
  DUP(type=i32,ne=[10,10,10,1]): [1;32mOK[0m
  DUP(type=i16,ne=[10,10,10,1]): [1;32mOK[0m
  DUP(type=i16,ne=[10,8,3,1],permute=[0,2,1,3]): [1;32mOK[0m
  DUP(type=i16,ne=[10,8,3,1],permute=[1,2,0,3]): [1;32mOK[0m
  CPY(type_src=f32,type_dst=f32,ne=[256,10,10,1]): [1;32mOK[0m
  CPY(type_src=f32,type_dst=f16,ne=[256,10,10,1]): [1;32mOK[0m
  CPY(type_src=f32,type_dst=q4_0,ne=[256,10,10,1]): [1;32mOK[0m
  CPY(type_src=f32,type_dst=q4_1,ne=[256,10,10,1]): [1;32mOK[0m
  CPY(type_src=f32,type_dst=q5_0,ne=[256,10,10,1]): [1;32mOK[0m
  CPY(type_src=f32,type_dst=q5_1,ne=[256,10,10,1]): [1;32mOK[0m
  CPY(type_src=f32,type_dst=q8_0,ne=[256,10,10,1]): [1;32mOK[0m
  CPY(type_src=f32,type_dst=q2_K,ne=[256,10,10,1]): [1;32mOK[0m
  CPY(type_src=f32,type_dst=q3_K,ne=[256,10,10,1]): [1;32mOK[0m
  CPY(type_src=f32,type_dst=q4_K,ne=[256,10,10,1]): [1;32mOK[0m
  CPY(type_src=f32,type_dst=q5_K,ne=[256,10,10,1]): [1;32mOK[0m
  CPY(type_src=f32,type_dst=q6_K,ne=[256,10,10,1]): [1;32mOK[0m
  CPY(type_src=f32,type_dst=iq2_xxs,ne=[256,10,10,1]): not supported [CPU] not supported [CPU] 
  CPY(type_src=f32,type_dst=iq2_xs,ne=[256,10,10,1]): not supported [CPU] not supported [CPU] 
  CONT(type=f32,ne=[10,10,10,1]): [1;32mOK[0m
  ADD(type=f32,ne=[1,1,8,1],nr=[1,1,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[1,1,8,1],nr=[1,1,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[1,1,8,1],nr=[1,1,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[1,1,1,1],nr=[32,1,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[1,1,1,1],nr=[32,1,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[1,1,1,1],nr=[32,1,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[1,1,320,320],nr=[1,1,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[1,1,320,320],nr=[1,1,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[1,1,320,320],nr=[1,1,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[16,10,1,1],nr=[1,1,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[16,10,1,1],nr=[1,1,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[16,10,1,1],nr=[1,1,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[16,10,10,1],nr=[1,1,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[16,10,10,1],nr=[1,1,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[16,10,10,1],nr=[1,1,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[16,10,10,10],nr=[1,1,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[16,10,10,10],nr=[1,1,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[16,10,10,10],nr=[1,1,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[16,10,10,10],nr=[2,1,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[16,10,10,10],nr=[2,1,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[16,10,10,10],nr=[2,1,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[16,10,10,10],nr=[1,2,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[16,10,10,10],nr=[1,2,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[16,10,10,10],nr=[1,2,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[16,10,10,10],nr=[1,1,2,1]): [1;32mOK[0m
  MUL(type=f32,ne=[16,10,10,10],nr=[1,1,2,1]): [1;32mOK[0m
  DIV(type=f32,ne=[16,10,10,10],nr=[1,1,2,1]): [1;32mOK[0m
  ADD(type=f32,ne=[16,10,10,10],nr=[1,1,1,2]): [1;32mOK[0m
  MUL(type=f32,ne=[16,10,10,10],nr=[1,1,1,2]): [1;32mOK[0m
  DIV(type=f32,ne=[16,10,10,10],nr=[1,1,1,2]): [1;32mOK[0m
  ADD(type=f32,ne=[16,10,10,10],nr=[1,1,2,2]): [1;32mOK[0m
  MUL(type=f32,ne=[16,10,10,10],nr=[1,1,2,2]): [1;32mOK[0m
  DIV(type=f32,ne=[16,10,10,10],nr=[1,1,2,2]): [1;32mOK[0m
  ADD(type=f32,ne=[16,10,10,10],nr=[1,2,2,2]): [1;32mOK[0m
  MUL(type=f32,ne=[16,10,10,10],nr=[1,2,2,2]): [1;32mOK[0m
  DIV(type=f32,ne=[16,10,10,10],nr=[1,2,2,2]): [1;32mOK[0m
  ADD(type=f32,ne=[16,10,10,10],nr=[2,2,2,2]): [1;32mOK[0m
  MUL(type=f32,ne=[16,10,10,10],nr=[2,2,2,2]): [1;32mOK[0m
  DIV(type=f32,ne=[16,10,10,10],nr=[2,2,2,2]): [1;32mOK[0m
  ADD(type=f32,ne=[1280,1,1,1],nr=[1,1,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[1280,1,1,1],nr=[1,1,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[1280,1,1,1],nr=[1,1,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[1280,1,1,1],nr=[1,16,16,1]): [1;32mOK[0m
  MUL(type=f32,ne=[1280,1,1,1],nr=[1,16,16,1]): [1;32mOK[0m
  DIV(type=f32,ne=[1280,1,1,1],nr=[1,16,16,1]): [1;32mOK[0m
  ADD(type=f32,ne=[1280,16,16,1],nr=[1,1,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[1280,16,16,1],nr=[1,1,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[1280,16,16,1],nr=[1,1,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[1280,1,1,1],nr=[1,256,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[1280,1,1,1],nr=[1,256,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[1280,1,1,1],nr=[1,256,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[1,1,1280,1],nr=[16,16,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[1,1,1280,1],nr=[16,16,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[1,1,1280,1],nr=[16,16,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[16,16,1280,1],nr=[1,1,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[16,16,1280,1],nr=[1,1,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[16,16,1280,1],nr=[1,1,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[1,1,1920,1],nr=[16,16,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[1,1,1920,1],nr=[16,16,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[1,1,1920,1],nr=[16,16,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[1,1,2560,1],nr=[16,16,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[1,1,2560,1],nr=[16,16,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[1,1,2560,1],nr=[16,16,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[1,1,1280,1],nr=[32,32,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[1,1,1280,1],nr=[32,32,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[1,1,1280,1],nr=[32,32,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[1,1,1920,1],nr=[32,32,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[1,1,1920,1],nr=[32,32,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[1,1,1920,1],nr=[32,32,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[1,1,640,1],nr=[32,32,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[1,1,640,1],nr=[32,32,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[1,1,640,1],nr=[32,32,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[5120,1,1,1],nr=[1,256,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[5120,1,1,1],nr=[1,256,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[5120,1,1,1],nr=[1,256,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[640,1,1,1],nr=[1,1,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[640,1,1,1],nr=[1,1,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[640,1,1,1],nr=[1,1,1,1]): [1;32mOK[0m
  SCALE(type=f32,ne=[10,10,10,10],scale=2.000000): [1;32mOK[0m
  NORM(type=f32,ne=[64,10,10,10],eps=0.000001): [1;32mOK[0m
  RMS_NORM(type=f32,ne=[64,10,10,10],eps=0.000001): [1;32mOK[0m
  NORM(type=f32,ne=[64,10,10,10],eps=0.000010): [1;32mOK[0m
  RMS_NORM(type=f32,ne=[64,10,10,10],eps=0.000010): [1;32mOK[0m
  NORM(type=f32,ne=[64,10,10,10],eps=0.001000): [1;32mOK[0m
  RMS_NORM(type=f32,ne=[64,10,10,10],eps=0.001000): [1;32mOK[0m
  NORM(type=f32,ne=[64,10,10,10],eps=0.100000): [1;32mOK[0m
  RMS_NORM(type=f32,ne=[64,10,10,10],eps=0.100000): [1;32mOK[0m
  MUL_MAT(type_a=f32,type_b=f32,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=f32,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=f32,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=f32,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=f32,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=f32,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=f32,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=f32,type_b=f32,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=f32,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=f32,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=f32,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=f32,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=f32,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=f32,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=f32,type_b=f16,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=f32,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=f32,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=f32,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=f32,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=f32,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=f32,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=f32,type_b=f16,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=f32,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=f32,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=f32,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=f32,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=f32,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=f32,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=f16,type_b=f32,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f32,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f16,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f16,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q4_0,type_b=f32,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_0,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_0,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_0,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_0,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_0,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q4_0,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q4_0,type_b=f32,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_0,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_0,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_0,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_0,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_0,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q4_0,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q4_0,type_b=f16,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_0,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_0,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_0,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_0,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_0,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_0,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_0,type_b=f16,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_0,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_0,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_0,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_0,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_0,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_0,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_1,type_b=f32,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_1,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_1,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_1,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_1,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_1,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q4_1,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q4_1,type_b=f32,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_1,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_1,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_1,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_1,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_1,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q4_1,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q4_1,type_b=f16,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_1,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_1,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_1,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_1,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_1,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_1,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_1,type_b=f16,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_1,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_1,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_1,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_1,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_1,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_1,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_0,type_b=f32,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_0,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_0,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_0,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_0,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_0,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q5_0,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q5_0,type_b=f32,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_0,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_0,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_0,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_0,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_0,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q5_0,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q5_0,type_b=f16,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_0,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_0,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_0,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_0,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_0,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_0,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_0,type_b=f16,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_0,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_0,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_0,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_0,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_0,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_0,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_1,type_b=f32,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_1,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_1,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_1,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_1,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_1,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q5_1,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q5_1,type_b=f32,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_1,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_1,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_1,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_1,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_1,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q5_1,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q5_1,type_b=f16,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_1,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_1,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_1,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_1,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_1,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_1,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_1,type_b=f16,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_1,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_1,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_1,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_1,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_1,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_1,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q8_0,type_b=f32,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q8_0,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q8_0,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q8_0,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q8_0,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q8_0,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q8_0,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q8_0,type_b=f32,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q8_0,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q8_0,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q8_0,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q8_0,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q8_0,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q8_0,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q8_0,type_b=f16,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q8_0,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q8_0,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q8_0,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q8_0,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q8_0,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q8_0,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q8_0,type_b=f16,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q8_0,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q8_0,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q8_0,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q8_0,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q8_0,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q8_0,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q2_K,type_b=f32,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q2_K,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q2_K,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q2_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q2_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q2_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q2_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q2_K,type_b=f32,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q2_K,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q2_K,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q2_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q2_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q2_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q2_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q2_K,type_b=f16,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q2_K,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q2_K,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q2_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q2_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q2_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q2_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q2_K,type_b=f16,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q2_K,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q2_K,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q2_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q2_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q2_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q2_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q3_K,type_b=f32,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q3_K,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q3_K,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q3_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q3_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q3_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q3_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q3_K,type_b=f32,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q3_K,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q3_K,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q3_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q3_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q3_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q3_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q3_K,type_b=f16,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q3_K,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q3_K,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q3_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q3_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q3_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q3_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q3_K,type_b=f16,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q3_K,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q3_K,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q3_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q3_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q3_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q3_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_K,type_b=f32,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_K,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_K,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q4_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q4_K,type_b=f32,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_K,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_K,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q4_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q4_K,type_b=f16,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_K,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_K,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_K,type_b=f16,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_K,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_K,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q4_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_K,type_b=f32,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_K,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_K,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q5_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q5_K,type_b=f32,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_K,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_K,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q5_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q5_K,type_b=f16,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_K,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_K,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_K,type_b=f16,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_K,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_K,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q5_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q6_K,type_b=f32,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q6_K,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q6_K,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q6_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q6_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q6_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q6_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q6_K,type_b=f32,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q6_K,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q6_K,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q6_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q6_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q6_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q6_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=q6_K,type_b=f16,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q6_K,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q6_K,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q6_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q6_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q6_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q6_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q6_K,type_b=f16,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q6_K,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q6_K,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q6_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q6_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q6_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=q6_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=iq2_xxs,type_b=f32,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=iq2_xxs,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=iq2_xxs,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=iq2_xxs,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=iq2_xxs,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=iq2_xxs,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=iq2_xxs,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=iq2_xxs,type_b=f32,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=iq2_xxs,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=iq2_xxs,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=iq2_xxs,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=iq2_xxs,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=iq2_xxs,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=iq2_xxs,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=iq2_xxs,type_b=f16,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=iq2_xxs,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=iq2_xxs,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=iq2_xxs,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=iq2_xxs,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=iq2_xxs,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=iq2_xxs,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=iq2_xxs,type_b=f16,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=iq2_xxs,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=iq2_xxs,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=iq2_xxs,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=iq2_xxs,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=iq2_xxs,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=iq2_xxs,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=iq2_xs,type_b=f32,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=iq2_xs,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=iq2_xs,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=iq2_xs,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=iq2_xs,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=iq2_xs,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=iq2_xs,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=iq2_xs,type_b=f32,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=iq2_xs,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=iq2_xs,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=iq2_xs,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=iq2_xs,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=iq2_xs,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=iq2_xs,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
ggml_cuda_compute_forward: cannot compute node_0: src0->ne[3] = 10, src1->ne[3] = 20 - fallback to CPU
[1;32mOK[0m
  MUL_MAT(type_a=iq2_xs,type_b=f16,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=iq2_xs,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=iq2_xs,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=iq2_xs,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=iq2_xs,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=iq2_xs,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=iq2_xs,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=iq2_xs,type_b=f16,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=iq2_xs,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=iq2_xs,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=iq2_xs,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=iq2_xs,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=iq2_xs,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT(type_a=iq2_xs,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CPU] not supported [CPU] 
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=1): [1;32mOK[0m
  SQR(type=f32,ne=[10,10,10,10]): [1;32mOK[0m
  CLAMP(type=f32,ne=[10,10,10,10],min=-0.500000,max=0.500000): [1;32mOK[0m
  DIAG_MASK_INF(type=f32,ne=[10,10,1,1],n_past=5): [1;32mOK[0m
  DIAG_MASK_INF(type=f32,ne=[10,10,10,1],n_past=5): [1;32mOK[0m
  DIAG_MASK_INF(type=f32,ne=[10,10,10,10],n_past=5): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[1,7,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[2,23,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[2,11,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[1,34,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[2,47,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[1,26,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[2,2,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[1,27,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[2,1,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[1,4,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[3,35,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[3,47,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[4,27,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[2,33,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[3,36,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[4,39,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[2,3,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[4,17,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[3,38,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[4,19,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[5,50,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[7,38,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[7,4,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[7,45,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[5,22,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[7,24,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[5,14,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[5,9,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[6,45,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[8,4,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[16,26,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[12,16,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[16,25,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[10,5,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[16,4,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[12,20,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[10,46,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[12,24,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[16,3,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[14,39,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[30,7,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[16,35,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[30,32,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[28,37,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[32,45,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[19,16,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[21,26,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[26,43,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[23,43,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[20,21,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[49,24,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[41,9,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[37,29,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[58,2,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[49,25,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[63,38,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[50,45,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[52,43,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[37,11,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[55,7,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[69,14,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[64,21,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[65,36,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[124,12,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[75,16,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[121,33,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[73,35,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[89,20,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[96,8,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[102,43,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[204,48,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[199,8,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[254,21,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[146,29,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[160,25,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[187,49,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[144,10,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[169,32,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[144,33,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[208,41,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[319,24,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[356,11,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[263,46,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[365,8,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[499,21,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[289,45,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[279,9,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[274,19,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[321,7,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[457,23,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[691,23,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[926,47,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[846,11,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[860,46,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[640,44,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[753,26,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[820,41,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[899,24,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[1000,32,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[737,42,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[1730,36,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[2035,48,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[1896,15,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[1574,26,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[1130,21,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[1615,44,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[1475,37,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[1914,36,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[1844,36,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[1784,1,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[3863,27,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[2997,4,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[3509,25,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[3416,35,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[2456,46,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[3822,45,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[3162,7,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[2970,50,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[2489,23,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[2694,26,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[7707,22,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[6011,41,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[5592,11,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[8189,8,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[6679,31,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[4098,1,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[7264,37,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[5403,21,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[6892,35,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[4936,42,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[14000,42,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[8966,5,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[14451,32,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[9944,11,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[8856,20,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[15993,48,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[11386,14,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[13862,15,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[14556,40,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[11653,15,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[19562,1,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[19527,50,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[20382,41,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[18619,20,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[26231,9,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[29956,8,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[32571,13,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[20211,6,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[19979,32,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[27788,40,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[55583,38,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[54707,32,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[34617,30,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[40206,16,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[55701,6,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[57757,27,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[50919,30,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[43571,36,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[37455,9,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[48671,44,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[118835,28,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[113968,16,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[74405,27,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[85901,30,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[99490,22,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[82500,19,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[91293,23,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[96725,20,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[83840,4,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[89768,13,1,1]): [1;32mOK[0m
  ROPE(type=f32,ne=[128,32,10,1],n_dims=128,mode=0,n_ctx=512): [1;32mOK[0m
  ROPE(type=f32,ne=[128,40,10,1],n_dims=128,mode=0,n_ctx=512): [1;32mOK[0m
  ROPE(type=f32,ne=[128,52,10,1],n_dims=128,mode=0,n_ctx=512): [1;32mOK[0m
  ROPE(type=f32,ne=[128,64,10,1],n_dims=128,mode=0,n_ctx=512): [1;32mOK[0m
  ROPE(type=f32,ne=[64,1,10,1],n_dims=64,mode=2,n_ctx=512): [1;32mOK[0m
  ROPE(type=f32,ne=[64,71,10,1],n_dims=64,mode=2,n_ctx=512): [1;32mOK[0m
  ROPE(type=f32,ne=[64,8,10,1],n_dims=64,mode=2,n_ctx=512): [1;32mOK[0m
  ROPE(type=f32,ne=[64,128,10,1],n_dims=64,mode=2,n_ctx=512): [1;32mOK[0m
  ROPE(type=f32,ne=[80,32,10,1],n_dims=20,mode=2,n_ctx=512): [1;32mOK[0m
  ROPE(type=f32,ne=[80,32,10,1],n_dims=32,mode=2,n_ctx=512): [1;32mOK[0m
  ROPE(type=f16,ne=[128,32,10,1],n_dims=128,mode=0,n_ctx=512): [1;32mOK[0m
  ROPE(type=f16,ne=[128,40,10,1],n_dims=128,mode=0,n_ctx=512): [1;32mOK[0m
  ROPE(type=f16,ne=[128,52,10,1],n_dims=128,mode=0,n_ctx=512): [1;32mOK[0m
  ROPE(type=f16,ne=[128,64,10,1],n_dims=128,mode=0,n_ctx=512): [1;32mOK[0m
  ROPE(type=f16,ne=[64,1,10,1],n_dims=64,mode=2,n_ctx=512): [1;32mOK[0m
  ROPE(type=f16,ne=[64,71,10,1],n_dims=64,mode=2,n_ctx=512): [1;32mOK[0m
  ROPE(type=f16,ne=[64,8,10,1],n_dims=64,mode=2,n_ctx=512): [1;32mOK[0m
  ROPE(type=f16,ne=[64,128,10,1],n_dims=64,mode=2,n_ctx=512): [1;32mOK[0m
  ROPE(type=f16,ne=[80,32,10,1],n_dims=20,mode=2,n_ctx=512): [1;32mOK[0m
  ROPE(type=f16,ne=[80,32,10,1],n_dims=32,mode=2,n_ctx=512): [1;32mOK[0m
  ALIBI(type=f32,ne=[10,10,10,10],n_past=512,n_head=10,bias_max=0.500000): [1;32mOK[0m
  IM2COL(type_input=f32,type_kernel=f16,ne_input=[10,10,3,1],ne_kernel=[3,3,3,1],s0=1,s1=1,p0=1,p1=1,d0=1,d1=1,is_2D=1): [1;32mOK[0m
  CONCAT(type=f32,ne=[10,10,10,10],b_ne2=10): [1;32mOK[0m
  CONCAT(type=i32,ne=[10,10,10,10],b_ne2=10): [1;32mOK[0m
  ARGSORT(type=f32,ne=[8,1,1,1],order=0): [1;32mOK[0m
  ARGSORT(type=f32,ne=[16,10,10,10],order=0): [1;32mOK[0m
  ARGSORT(type=f32,ne=[8,1,1,1],order=1): [1;32mOK[0m
  ARGSORT(type=f32,ne=[16,10,10,10],order=1): [1;32mOK[0m
  SUM_ROWS(type=f32,ne=[10,10,10,10]): [1;32mOK[0m
  UPSCALE(type=f32,ne=[512,512,3,1],scale_factor=2): [1;32mOK[0m
  GROUP_NORM(type=f32,ne=[64,64,320,1],num_groups=32): [1;32mOK[0m
  ACC(type=f32,ne_a=[1024,577,1,1],ne_b=[1024,576,1,1]): [1;32mOK[0m
  PAD(type=f32,ne_a=[512,512,1,1],pad_0=1,pad_1=1): [1;32mOK[0m
  LEAKY_RELU(type=f32,ne_a=[10,10,10,10],negative_slope=0.100000): [1;32mOK[0m
  MOE(n_experts=8,n_experts_per_tok=2,n_tokens=1,n_embd=4096,n_ff=8192): [1;32mOK[0m
  1182/1182 tests passed
  Backend CPU: [1;32mOK[0m

Backend 2/2 (CUDA0)
  Backend name: CUDA0
  ABS(type=f32,ne=[128,10,10,10]): not supported [CUDA0] 
  SGN(type=f32,ne=[128,10,10,10]): not supported [CUDA0] 
  NEG(type=f32,ne=[128,10,10,10]): not supported [CUDA0] 
  STEP(type=f32,ne=[128,10,10,10]): not supported [CUDA0] 
  TANH(type=f32,ne=[128,10,10,10]): [1;32mOK[0m
  ELU(type=f32,ne=[128,10,10,10]): not supported [CUDA0] 
  RELU(type=f32,ne=[128,10,10,10]): [1;32mOK[0m
  GELU(type=f32,ne=[128,10,10,10]): [1;32mOK[0m
  GELU_QUICK(type=f32,ne=[128,10,10,10]): [1;32mOK[0m
  SILU(type=f32,ne=[128,10,10,10]): [1;32mOK[0m
  HARDSWISH(type=f32,ne=[128,10,10,10]): not supported [CUDA0] 
  HARDSIGMOID(type=f32,ne=[128,10,10,10]): not supported [CUDA0] 
  GET_ROWS(type=f32,n=1,m=8,r=2,b=1,v=0): [1;32mOK[0m
  GET_ROWS(type=f32,n=256,m=5,r=4,b=1,v=0): [1;32mOK[0m
  GET_ROWS(type=f32,n=256,m=5,r=4,b=1,v=1): [1;32mOK[0m
  GET_ROWS(type=f32,n=256,m=5,r=4,b=7,v=0): [1;32mOK[0m
  GET_ROWS(type=f32,n=256,m=5,r=4,b=7,v=1): [1;32mOK[0m
  GET_ROWS(type=f16,n=256,m=5,r=4,b=1,v=0): [1;32mOK[0m
  GET_ROWS(type=f16,n=256,m=5,r=4,b=1,v=1): [1;32mOK[0m
  GET_ROWS(type=f16,n=256,m=5,r=4,b=7,v=0): [1;32mOK[0m
  GET_ROWS(type=f16,n=256,m=5,r=4,b=7,v=1): [1;32mOK[0m
  GET_ROWS(type=q4_0,n=256,m=5,r=4,b=1,v=0): [1;32mOK[0m
  GET_ROWS(type=q4_0,n=256,m=5,r=4,b=1,v=1): [1;32mOK[0m
  GET_ROWS(type=q4_0,n=256,m=5,r=4,b=7,v=0): [1;32mOK[0m
  GET_ROWS(type=q4_0,n=256,m=5,r=4,b=7,v=1): [1;32mOK[0m
  GET_ROWS(type=q4_1,n=256,m=5,r=4,b=1,v=0): [1;32mOK[0m
  GET_ROWS(type=q4_1,n=256,m=5,r=4,b=1,v=1): [1;32mOK[0m
  GET_ROWS(type=q4_1,n=256,m=5,r=4,b=7,v=0): [1;32mOK[0m
  GET_ROWS(type=q4_1,n=256,m=5,r=4,b=7,v=1): [1;32mOK[0m
  GET_ROWS(type=q5_0,n=256,m=5,r=4,b=1,v=0): [1;32mOK[0m
  GET_ROWS(type=q5_0,n=256,m=5,r=4,b=1,v=1): [1;32mOK[0m
  GET_ROWS(type=q5_0,n=256,m=5,r=4,b=7,v=0): [1;32mOK[0m
  GET_ROWS(type=q5_0,n=256,m=5,r=4,b=7,v=1): [1;32mOK[0m
  GET_ROWS(type=q5_1,n=256,m=5,r=4,b=1,v=0): [1;32mOK[0m
  GET_ROWS(type=q5_1,n=256,m=5,r=4,b=1,v=1): [1;32mOK[0m
  GET_ROWS(type=q5_1,n=256,m=5,r=4,b=7,v=0): [1;32mOK[0m
  GET_ROWS(type=q5_1,n=256,m=5,r=4,b=7,v=1): [1;32mOK[0m
  GET_ROWS(type=q8_0,n=256,m=5,r=4,b=1,v=0): [1;32mOK[0m
  GET_ROWS(type=q8_0,n=256,m=5,r=4,b=1,v=1): [1;32mOK[0m
  GET_ROWS(type=q8_0,n=256,m=5,r=4,b=7,v=0): [1;32mOK[0m
  GET_ROWS(type=q8_0,n=256,m=5,r=4,b=7,v=1): [1;32mOK[0m
  GET_ROWS(type=q2_K,n=256,m=5,r=4,b=1,v=0): not supported [CUDA0] 
  GET_ROWS(type=q2_K,n=256,m=5,r=4,b=1,v=1): not supported [CUDA0] 
  GET_ROWS(type=q2_K,n=256,m=5,r=4,b=7,v=0): not supported [CUDA0] 
  GET_ROWS(type=q2_K,n=256,m=5,r=4,b=7,v=1): not supported [CUDA0] 
  GET_ROWS(type=q3_K,n=256,m=5,r=4,b=1,v=0): not supported [CUDA0] 
  GET_ROWS(type=q3_K,n=256,m=5,r=4,b=1,v=1): not supported [CUDA0] 
  GET_ROWS(type=q3_K,n=256,m=5,r=4,b=7,v=0): not supported [CUDA0] 
  GET_ROWS(type=q3_K,n=256,m=5,r=4,b=7,v=1): not supported [CUDA0] 
  GET_ROWS(type=q4_K,n=256,m=5,r=4,b=1,v=0): not supported [CUDA0] 
  GET_ROWS(type=q4_K,n=256,m=5,r=4,b=1,v=1): not supported [CUDA0] 
  GET_ROWS(type=q4_K,n=256,m=5,r=4,b=7,v=0): not supported [CUDA0] 
  GET_ROWS(type=q4_K,n=256,m=5,r=4,b=7,v=1): not supported [CUDA0] 
  GET_ROWS(type=q5_K,n=256,m=5,r=4,b=1,v=0): not supported [CUDA0] 
  GET_ROWS(type=q5_K,n=256,m=5,r=4,b=1,v=1): not supported [CUDA0] 
  GET_ROWS(type=q5_K,n=256,m=5,r=4,b=7,v=0): not supported [CUDA0] 
  GET_ROWS(type=q5_K,n=256,m=5,r=4,b=7,v=1): not supported [CUDA0] 
  GET_ROWS(type=q6_K,n=256,m=5,r=4,b=1,v=0): not supported [CUDA0] 
  GET_ROWS(type=q6_K,n=256,m=5,r=4,b=1,v=1): not supported [CUDA0] 
  GET_ROWS(type=q6_K,n=256,m=5,r=4,b=7,v=0): not supported [CUDA0] 
  GET_ROWS(type=q6_K,n=256,m=5,r=4,b=7,v=1): not supported [CUDA0] 
  GET_ROWS(type=iq2_xxs,n=256,m=5,r=4,b=1,v=0): not supported [CUDA0] 
  GET_ROWS(type=iq2_xxs,n=256,m=5,r=4,b=1,v=1): not supported [CUDA0] 
  GET_ROWS(type=iq2_xxs,n=256,m=5,r=4,b=7,v=0): not supported [CUDA0] 
  GET_ROWS(type=iq2_xxs,n=256,m=5,r=4,b=7,v=1): not supported [CUDA0] 
  GET_ROWS(type=iq2_xs,n=256,m=5,r=4,b=1,v=0): not supported [CUDA0] 
  GET_ROWS(type=iq2_xs,n=256,m=5,r=4,b=1,v=1): not supported [CUDA0] 
  GET_ROWS(type=iq2_xs,n=256,m=5,r=4,b=7,v=0): not supported [CUDA0] 
  GET_ROWS(type=iq2_xs,n=256,m=5,r=4,b=7,v=1): not supported [CUDA0] 
  GET_ROWS(type=i32,n=256,m=5,r=4,b=1,v=0): not supported [CUDA0] 
  GET_ROWS(type=i32,n=256,m=5,r=4,b=1,v=1): not supported [CUDA0] 
  GET_ROWS(type=i32,n=256,m=5,r=4,b=7,v=0): not supported [CUDA0] 
  GET_ROWS(type=i32,n=256,m=5,r=4,b=7,v=1): not supported [CUDA0] 
  REPEAT(type=f32,ne=[10,10,10,10],nr=[1,1,1,1]): [1;32mOK[0m
  REPEAT(type=f32,ne=[10,10,10,10],nr=[2,1,1,1]): [1;32mOK[0m
  REPEAT(type=f32,ne=[10,10,10,10],nr=[1,2,1,1]): [1;32mOK[0m
  REPEAT(type=f32,ne=[10,10,10,10],nr=[1,1,2,1]): [1;32mOK[0m
  REPEAT(type=f32,ne=[10,10,10,10],nr=[1,1,1,2]): [1;32mOK[0m
  REPEAT(type=i32,ne=[10,10,10,10],nr=[2,1,1,1]): not supported [CUDA0] 
  REPEAT(type=i16,ne=[10,10,10,10],nr=[1,1,1,2]): not supported [CUDA0] 
  DUP(type=f32,ne=[10,10,10,1]): [1;32mOK[0m
  DUP(type=f16,ne=[10,10,10,1]): [1;32mOK[0m
  DUP(type=i32,ne=[10,10,10,1]): not supported [CUDA0] 
  DUP(type=i16,ne=[10,10,10,1]): not supported [CUDA0] 
  DUP(type=i16,ne=[10,8,3,1],permute=[0,2,1,3]): not supported [CUDA0] 
  DUP(type=i16,ne=[10,8,3,1],permute=[1,2,0,3]): not supported [CUDA0] 
  CPY(type_src=f32,type_dst=f32,ne=[256,10,10,1]): [1;32mOK[0m
  CPY(type_src=f32,type_dst=f16,ne=[256,10,10,1]): [1;32mOK[0m
  CPY(type_src=f32,type_dst=q4_0,ne=[256,10,10,1]): [1;32mOK[0m
  CPY(type_src=f32,type_dst=q4_1,ne=[256,10,10,1]): [1;32mOK[0m
  CPY(type_src=f32,type_dst=q5_0,ne=[256,10,10,1]): not supported [CUDA0] 
  CPY(type_src=f32,type_dst=q5_1,ne=[256,10,10,1]): not supported [CUDA0] 
  CPY(type_src=f32,type_dst=q8_0,ne=[256,10,10,1]): [1;32mOK[0m
  CPY(type_src=f32,type_dst=q2_K,ne=[256,10,10,1]): not supported [CUDA0] 
  CPY(type_src=f32,type_dst=q3_K,ne=[256,10,10,1]): not supported [CUDA0] 
  CPY(type_src=f32,type_dst=q4_K,ne=[256,10,10,1]): not supported [CUDA0] 
  CPY(type_src=f32,type_dst=q5_K,ne=[256,10,10,1]): not supported [CUDA0] 
  CPY(type_src=f32,type_dst=q6_K,ne=[256,10,10,1]): not supported [CUDA0] 
  CPY(type_src=f32,type_dst=iq2_xxs,ne=[256,10,10,1]): not supported [CUDA0] not supported [CPU] 
  CPY(type_src=f32,type_dst=iq2_xs,ne=[256,10,10,1]): not supported [CUDA0] not supported [CPU] 
  CONT(type=f32,ne=[10,10,10,1]): [1;32mOK[0m
  ADD(type=f32,ne=[1,1,8,1],nr=[1,1,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[1,1,8,1],nr=[1,1,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[1,1,8,1],nr=[1,1,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[1,1,1,1],nr=[32,1,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[1,1,1,1],nr=[32,1,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[1,1,1,1],nr=[32,1,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[1,1,320,320],nr=[1,1,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[1,1,320,320],nr=[1,1,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[1,1,320,320],nr=[1,1,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[16,10,1,1],nr=[1,1,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[16,10,1,1],nr=[1,1,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[16,10,1,1],nr=[1,1,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[16,10,10,1],nr=[1,1,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[16,10,10,1],nr=[1,1,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[16,10,10,1],nr=[1,1,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[16,10,10,10],nr=[1,1,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[16,10,10,10],nr=[1,1,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[16,10,10,10],nr=[1,1,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[16,10,10,10],nr=[2,1,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[16,10,10,10],nr=[2,1,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[16,10,10,10],nr=[2,1,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[16,10,10,10],nr=[1,2,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[16,10,10,10],nr=[1,2,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[16,10,10,10],nr=[1,2,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[16,10,10,10],nr=[1,1,2,1]): [1;32mOK[0m
  MUL(type=f32,ne=[16,10,10,10],nr=[1,1,2,1]): [1;32mOK[0m
  DIV(type=f32,ne=[16,10,10,10],nr=[1,1,2,1]): [1;32mOK[0m
  ADD(type=f32,ne=[16,10,10,10],nr=[1,1,1,2]): [1;32mOK[0m
  MUL(type=f32,ne=[16,10,10,10],nr=[1,1,1,2]): [1;32mOK[0m
  DIV(type=f32,ne=[16,10,10,10],nr=[1,1,1,2]): [1;32mOK[0m
  ADD(type=f32,ne=[16,10,10,10],nr=[1,1,2,2]): [1;32mOK[0m
  MUL(type=f32,ne=[16,10,10,10],nr=[1,1,2,2]): [1;32mOK[0m
  DIV(type=f32,ne=[16,10,10,10],nr=[1,1,2,2]): [1;32mOK[0m
  ADD(type=f32,ne=[16,10,10,10],nr=[1,2,2,2]): [1;32mOK[0m
  MUL(type=f32,ne=[16,10,10,10],nr=[1,2,2,2]): [1;32mOK[0m
  DIV(type=f32,ne=[16,10,10,10],nr=[1,2,2,2]): [1;32mOK[0m
  ADD(type=f32,ne=[16,10,10,10],nr=[2,2,2,2]): [1;32mOK[0m
  MUL(type=f32,ne=[16,10,10,10],nr=[2,2,2,2]): [1;32mOK[0m
  DIV(type=f32,ne=[16,10,10,10],nr=[2,2,2,2]): [1;32mOK[0m
  ADD(type=f32,ne=[1280,1,1,1],nr=[1,1,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[1280,1,1,1],nr=[1,1,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[1280,1,1,1],nr=[1,1,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[1280,1,1,1],nr=[1,16,16,1]): [1;32mOK[0m
  MUL(type=f32,ne=[1280,1,1,1],nr=[1,16,16,1]): [1;32mOK[0m
  DIV(type=f32,ne=[1280,1,1,1],nr=[1,16,16,1]): [1;32mOK[0m
  ADD(type=f32,ne=[1280,16,16,1],nr=[1,1,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[1280,16,16,1],nr=[1,1,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[1280,16,16,1],nr=[1,1,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[1280,1,1,1],nr=[1,256,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[1280,1,1,1],nr=[1,256,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[1280,1,1,1],nr=[1,256,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[1,1,1280,1],nr=[16,16,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[1,1,1280,1],nr=[16,16,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[1,1,1280,1],nr=[16,16,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[16,16,1280,1],nr=[1,1,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[16,16,1280,1],nr=[1,1,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[16,16,1280,1],nr=[1,1,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[1,1,1920,1],nr=[16,16,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[1,1,1920,1],nr=[16,16,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[1,1,1920,1],nr=[16,16,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[1,1,2560,1],nr=[16,16,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[1,1,2560,1],nr=[16,16,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[1,1,2560,1],nr=[16,16,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[1,1,1280,1],nr=[32,32,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[1,1,1280,1],nr=[32,32,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[1,1,1280,1],nr=[32,32,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[1,1,1920,1],nr=[32,32,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[1,1,1920,1],nr=[32,32,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[1,1,1920,1],nr=[32,32,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[1,1,640,1],nr=[32,32,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[1,1,640,1],nr=[32,32,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[1,1,640,1],nr=[32,32,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[5120,1,1,1],nr=[1,256,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[5120,1,1,1],nr=[1,256,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[5120,1,1,1],nr=[1,256,1,1]): [1;32mOK[0m
  ADD(type=f32,ne=[640,1,1,1],nr=[1,1,1,1]): [1;32mOK[0m
  MUL(type=f32,ne=[640,1,1,1],nr=[1,1,1,1]): [1;32mOK[0m
  DIV(type=f32,ne=[640,1,1,1],nr=[1,1,1,1]): [1;32mOK[0m
  SCALE(type=f32,ne=[10,10,10,10],scale=2.000000): [1;32mOK[0m
  NORM(type=f32,ne=[64,10,10,10],eps=0.000001): [1;32mOK[0m
  RMS_NORM(type=f32,ne=[64,10,10,10],eps=0.000001): [1;32mOK[0m
  NORM(type=f32,ne=[64,10,10,10],eps=0.000010): [1;32mOK[0m
  RMS_NORM(type=f32,ne=[64,10,10,10],eps=0.000010): [1;32mOK[0m
  NORM(type=f32,ne=[64,10,10,10],eps=0.001000): [1;32mOK[0m
  RMS_NORM(type=f32,ne=[64,10,10,10],eps=0.001000): [1;32mOK[0m
  NORM(type=f32,ne=[64,10,10,10],eps=0.100000): [1;32mOK[0m
  RMS_NORM(type=f32,ne=[64,10,10,10],eps=0.100000): [1;32mOK[0m
  MUL_MAT(type_a=f32,type_b=f32,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=f32,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=f32,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=f32,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=f32,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=f32,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] 
  MUL_MAT(type_a=f32,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] 
  MUL_MAT(type_a=f32,type_b=f32,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=f32,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=f32,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=f32,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=f32,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=f32,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] 
  MUL_MAT(type_a=f32,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] 
  MUL_MAT(type_a=f32,type_b=f16,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=f32,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=f32,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=f32,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=f32,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=f32,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=f32,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=f32,type_b=f16,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=f32,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=f32,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=f32,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=f32,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=f32,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=f32,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=f16,type_b=f32,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] 
  MUL_MAT(type_a=f16,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] 
  MUL_MAT(type_a=f16,type_b=f32,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] 
  MUL_MAT(type_a=f16,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] 
  MUL_MAT(type_a=f16,type_b=f16,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] 
  MUL_MAT(type_a=f16,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] 
  MUL_MAT(type_a=f16,type_b=f16,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=f16,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] 
  MUL_MAT(type_a=f16,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q4_0,type_b=f32,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_0,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_0,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_0,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_0,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_0,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q4_0,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q4_0,type_b=f32,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_0,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_0,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_0,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_0,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_0,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q4_0,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q4_0,type_b=f16,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q4_0,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q4_0,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q4_0,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q4_0,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q4_0,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q4_0,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q4_0,type_b=f16,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q4_0,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q4_0,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q4_0,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q4_0,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q4_0,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q4_0,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q4_1,type_b=f32,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_1,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_1,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_1,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_1,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_1,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q4_1,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q4_1,type_b=f32,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_1,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_1,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_1,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_1,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_1,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q4_1,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q4_1,type_b=f16,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q4_1,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q4_1,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q4_1,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q4_1,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q4_1,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q4_1,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q4_1,type_b=f16,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q4_1,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q4_1,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q4_1,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q4_1,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q4_1,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q4_1,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q5_0,type_b=f32,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_0,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_0,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_0,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_0,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_0,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q5_0,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q5_0,type_b=f32,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_0,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_0,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_0,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_0,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_0,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q5_0,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q5_0,type_b=f16,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q5_0,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q5_0,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q5_0,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q5_0,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q5_0,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q5_0,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q5_0,type_b=f16,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q5_0,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q5_0,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q5_0,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q5_0,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q5_0,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q5_0,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q5_1,type_b=f32,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_1,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_1,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_1,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_1,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_1,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q5_1,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q5_1,type_b=f32,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_1,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_1,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_1,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_1,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_1,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q5_1,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q5_1,type_b=f16,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q5_1,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q5_1,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q5_1,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q5_1,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q5_1,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q5_1,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q5_1,type_b=f16,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q5_1,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q5_1,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q5_1,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q5_1,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q5_1,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q5_1,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q8_0,type_b=f32,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q8_0,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q8_0,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q8_0,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q8_0,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q8_0,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q8_0,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q8_0,type_b=f32,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q8_0,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q8_0,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q8_0,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q8_0,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q8_0,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q8_0,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q8_0,type_b=f16,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q8_0,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q8_0,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q8_0,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q8_0,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q8_0,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q8_0,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q8_0,type_b=f16,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q8_0,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q8_0,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q8_0,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q8_0,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q8_0,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q8_0,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q2_K,type_b=f32,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q2_K,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q2_K,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q2_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q2_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q2_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q2_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q2_K,type_b=f32,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q2_K,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q2_K,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q2_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q2_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q2_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q2_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q2_K,type_b=f16,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q2_K,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q2_K,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q2_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q2_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q2_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q2_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q2_K,type_b=f16,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q2_K,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q2_K,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q2_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q2_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q2_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q2_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q3_K,type_b=f32,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q3_K,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q3_K,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q3_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q3_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q3_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q3_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q3_K,type_b=f32,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q3_K,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q3_K,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q3_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q3_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q3_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q3_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q3_K,type_b=f16,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q3_K,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q3_K,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q3_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q3_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q3_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q3_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q3_K,type_b=f16,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q3_K,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q3_K,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q3_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q3_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q3_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q3_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q4_K,type_b=f32,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_K,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_K,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q4_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q4_K,type_b=f32,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_K,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_K,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q4_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q4_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q4_K,type_b=f16,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q4_K,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q4_K,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q4_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q4_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q4_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q4_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q4_K,type_b=f16,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q4_K,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q4_K,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q4_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q4_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q4_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q4_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q5_K,type_b=f32,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_K,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_K,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q5_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q5_K,type_b=f32,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_K,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_K,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q5_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q5_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q5_K,type_b=f16,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q5_K,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q5_K,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q5_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q5_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q5_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q5_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q5_K,type_b=f16,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q5_K,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q5_K,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q5_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q5_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q5_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q5_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q6_K,type_b=f32,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q6_K,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q6_K,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q6_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q6_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q6_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q6_K,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q6_K,type_b=f32,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q6_K,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q6_K,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q6_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=q6_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=q6_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q6_K,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] 
  MUL_MAT(type_a=q6_K,type_b=f16,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q6_K,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q6_K,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q6_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q6_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q6_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q6_K,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q6_K,type_b=f16,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q6_K,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q6_K,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q6_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=q6_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=q6_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=q6_K,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=iq2_xxs,type_b=f32,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=iq2_xxs,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): not supported [CUDA0] 
  MUL_MAT(type_a=iq2_xxs,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): not supported [CUDA0] 
  MUL_MAT(type_a=iq2_xxs,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): not supported [CUDA0] 
  MUL_MAT(type_a=iq2_xxs,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): not supported [CUDA0] 
  MUL_MAT(type_a=iq2_xxs,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] 
  MUL_MAT(type_a=iq2_xxs,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] 
  MUL_MAT(type_a=iq2_xxs,type_b=f32,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=iq2_xxs,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=iq2_xxs,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=iq2_xxs,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=iq2_xxs,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=iq2_xxs,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] 
  MUL_MAT(type_a=iq2_xxs,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] 
  MUL_MAT(type_a=iq2_xxs,type_b=f16,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=iq2_xxs,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=iq2_xxs,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=iq2_xxs,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=iq2_xxs,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=iq2_xxs,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=iq2_xxs,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=iq2_xxs,type_b=f16,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=iq2_xxs,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=iq2_xxs,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=iq2_xxs,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=iq2_xxs,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=iq2_xxs,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=iq2_xxs,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=iq2_xs,type_b=f32,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=iq2_xs,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): not supported [CUDA0] 
  MUL_MAT(type_a=iq2_xs,type_b=f32,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): not supported [CUDA0] 
  MUL_MAT(type_a=iq2_xs,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): not supported [CUDA0] 
  MUL_MAT(type_a=iq2_xs,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): not supported [CUDA0] 
  MUL_MAT(type_a=iq2_xs,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] 
  MUL_MAT(type_a=iq2_xs,type_b=f32,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] 
  MUL_MAT(type_a=iq2_xs,type_b=f32,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=iq2_xs,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=iq2_xs,type_b=f32,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=iq2_xs,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): [1;32mOK[0m
  MUL_MAT(type_a=iq2_xs,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): [1;32mOK[0m
  MUL_MAT(type_a=iq2_xs,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] 
  MUL_MAT(type_a=iq2_xs,type_b=f32,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] 
  MUL_MAT(type_a=iq2_xs,type_b=f16,m=16,n=1,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=iq2_xs,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[1,1]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=iq2_xs,type_b=f16,m=16,n=1,k=256,bs=[10,1],nr=[2,1]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=iq2_xs,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,1]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=iq2_xs,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,1]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=iq2_xs,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=iq2_xs,type_b=f16,m=16,n=1,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=iq2_xs,type_b=f16,m=16,n=16,k=256,bs=[1,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=iq2_xs,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=iq2_xs,type_b=f16,m=16,n=16,k=256,bs=[10,1],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=iq2_xs,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,1]): not supported [CPU] 
  MUL_MAT(type_a=iq2_xs,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,1]): not supported [CPU] 
  MUL_MAT(type_a=iq2_xs,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[1,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT(type_a=iq2_xs,type_b=f16,m=16,n=16,k=256,bs=[10,10],nr=[2,2]): not supported [CUDA0] not supported [CPU] 
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f32,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=f16,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_0,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_1,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_0,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_1,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q8_0,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q2_K,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q3_K,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q4_K,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q5_K,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=q6_K,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xxs,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=2,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=2,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=4,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=4,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=4,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=4,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=8,id=0,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=8,id=1,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=8,id=2,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=8,id=3,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=8,id=4,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=8,id=5,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=8,id=6,m=16,n=16,k=256,v=1): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=0): [1;32mOK[0m
  MUL_MAT_ID(type_a=iq2_xs,type_b=f32,n_mats=8,id=7,m=16,n=16,k=256,v=1): [1;32mOK[0m
  SQR(type=f32,ne=[10,10,10,10]): [1;32mOK[0m
  CLAMP(type=f32,ne=[10,10,10,10],min=-0.500000,max=0.500000): [1;32mOK[0m
  DIAG_MASK_INF(type=f32,ne=[10,10,1,1],n_past=5): [1;32mOK[0m
  DIAG_MASK_INF(type=f32,ne=[10,10,10,1],n_past=5): [1;32mOK[0m
  DIAG_MASK_INF(type=f32,ne=[10,10,10,10],n_past=5): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[1,7,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[2,23,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[2,11,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[1,34,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[2,47,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[1,26,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[2,2,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[1,27,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[2,1,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[1,4,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[3,35,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[3,47,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[4,27,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[2,33,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[3,36,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[4,39,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[2,3,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[4,17,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[3,38,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[4,19,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[5,50,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[7,38,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[7,4,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[7,45,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[5,22,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[7,24,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[5,14,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[5,9,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[6,45,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[8,4,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[16,26,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[12,16,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[16,25,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[10,5,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[16,4,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[12,20,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[10,46,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[12,24,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[16,3,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[14,39,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[30,7,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[16,35,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[30,32,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[28,37,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[32,45,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[19,16,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[21,26,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[26,43,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[23,43,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[20,21,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[49,24,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[41,9,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[37,29,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[58,2,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[49,25,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[63,38,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[50,45,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[52,43,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[37,11,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[55,7,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[69,14,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[64,21,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[65,36,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[124,12,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[75,16,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[121,33,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[73,35,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[89,20,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[96,8,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[102,43,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[204,48,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[199,8,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[254,21,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[146,29,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[160,25,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[187,49,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[144,10,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[169,32,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[144,33,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[208,41,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[319,24,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[356,11,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[263,46,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[365,8,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[499,21,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[289,45,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[279,9,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[274,19,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[321,7,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[457,23,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[691,23,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[926,47,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[846,11,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[860,46,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[640,44,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[753,26,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[820,41,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[899,24,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[1000,32,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[737,42,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[1730,36,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[2035,48,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[1896,15,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[1574,26,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[1130,21,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[1615,44,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[1475,37,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[1914,36,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[1844,36,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[1784,1,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[3863,27,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[2997,4,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[3509,25,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[3416,35,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[2456,46,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[3822,45,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[3162,7,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[2970,50,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[2489,23,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[2694,26,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[7707,22,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[6011,41,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[5592,11,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[8189,8,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[6679,31,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[4098,1,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[7264,37,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[5403,21,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[6892,35,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[4936,42,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[14000,42,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[8966,5,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[14451,32,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[9944,11,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[8856,20,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[15993,48,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[11386,14,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[13862,15,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[14556,40,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[11653,15,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[19562,1,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[19527,50,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[20382,41,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[18619,20,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[26231,9,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[29956,8,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[32571,13,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[20211,6,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[19979,32,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[27788,40,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[55583,38,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[54707,32,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[34617,30,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[40206,16,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[55701,6,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[57757,27,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[50919,30,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[43571,36,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[37455,9,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[48671,44,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[118835,28,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[113968,16,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[74405,27,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[85901,30,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[99490,22,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[82500,19,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[91293,23,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[96725,20,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[83840,4,1,1]): [1;32mOK[0m
  SOFT_MAX(type=f32,ne=[89768,13,1,1]): [1;32mOK[0m
  ROPE(type=f32,ne=[128,32,10,1],n_dims=128,mode=0,n_ctx=512): [1;32mOK[0m
  ROPE(type=f32,ne=[128,40,10,1],n_dims=128,mode=0,n_ctx=512): [1;32mOK[0m
  ROPE(type=f32,ne=[128,52,10,1],n_dims=128,mode=0,n_ctx=512): [1;32mOK[0m
  ROPE(type=f32,ne=[128,64,10,1],n_dims=128,mode=0,n_ctx=512): [1;32mOK[0m
  ROPE(type=f32,ne=[64,1,10,1],n_dims=64,mode=2,n_ctx=512): [1;32mOK[0m
  ROPE(type=f32,ne=[64,71,10,1],n_dims=64,mode=2,n_ctx=512): [1;32mOK[0m
  ROPE(type=f32,ne=[64,8,10,1],n_dims=64,mode=2,n_ctx=512): [1;32mOK[0m
  ROPE(type=f32,ne=[64,128,10,1],n_dims=64,mode=2,n_ctx=512): [1;32mOK[0m
  ROPE(type=f32,ne=[80,32,10,1],n_dims=20,mode=2,n_ctx=512): [1;32mOK[0m
  ROPE(type=f32,ne=[80,32,10,1],n_dims=32,mode=2,n_ctx=512): [1;32mOK[0m
  ROPE(type=f16,ne=[128,32,10,1],n_dims=128,mode=0,n_ctx=512): [1;32mOK[0m
  ROPE(type=f16,ne=[128,40,10,1],n_dims=128,mode=0,n_ctx=512): [1;32mOK[0m
  ROPE(type=f16,ne=[128,52,10,1],n_dims=128,mode=0,n_ctx=512): [1;32mOK[0m
  ROPE(type=f16,ne=[128,64,10,1],n_dims=128,mode=0,n_ctx=512): [1;32mOK[0m
  ROPE(type=f16,ne=[64,1,10,1],n_dims=64,mode=2,n_ctx=512): [1;32mOK[0m
  ROPE(type=f16,ne=[64,71,10,1],n_dims=64,mode=2,n_ctx=512): [1;32mOK[0m
  ROPE(type=f16,ne=[64,8,10,1],n_dims=64,mode=2,n_ctx=512): [1;32mOK[0m
  ROPE(type=f16,ne=[64,128,10,1],n_dims=64,mode=2,n_ctx=512): [1;32mOK[0m
  ROPE(type=f16,ne=[80,32,10,1],n_dims=20,mode=2,n_ctx=512): [1;32mOK[0m
  ROPE(type=f16,ne=[80,32,10,1],n_dims=32,mode=2,n_ctx=512): [1;32mOK[0m
  ALIBI(type=f32,ne=[10,10,10,10],n_past=512,n_head=10,bias_max=0.500000): [1;32mOK[0m
  IM2COL(type_input=f32,type_kernel=f16,ne_input=[10,10,3,1],ne_kernel=[3,3,3,1],s0=1,s1=1,p0=1,p1=1,d0=1,d1=1,is_2D=1): [1;32mOK[0m
  CONCAT(type=f32,ne=[10,10,10,10],b_ne2=10): [1;32mOK[0m
  CONCAT(type=i32,ne=[10,10,10,10],b_ne2=10): not supported [CUDA0] 
  ARGSORT(type=f32,ne=[8,1,1,1],order=0): [1;32mOK[0m
  ARGSORT(type=f32,ne=[16,10,10,10],order=0): [1;32mOK[0m
  ARGSORT(type=f32,ne=[8,1,1,1],order=1): [1;32mOK[0m
  ARGSORT(type=f32,ne=[16,10,10,10],order=1): [1;32mOK[0m
  SUM_ROWS(type=f32,ne=[10,10,10,10]): [1;32mOK[0m
  UPSCALE(type=f32,ne=[512,512,3,1],scale_factor=2): [1;32mOK[0m
  GROUP_NORM(type=f32,ne=[64,64,320,1],num_groups=32): [1;32mOK[0m
  ACC(type=f32,ne_a=[1024,577,1,1],ne_b=[1024,576,1,1]): [1;32mOK[0m
  PAD(type=f32,ne_a=[512,512,1,1],pad_0=1,pad_1=1): [1;32mOK[0m
  LEAKY_RELU(type=f32,ne_a=[10,10,10,10],negative_slope=0.100000): [1;32mOK[0m
  MOE(n_experts=8,n_experts_per_tok=2,n_tokens=1,n_embd=4096,n_ff=8192): [MUL] NMSE = 0.000000101 > 0.000000100 [1;31mFAIL[0m
  1181/1182 tests passed
  Backend CUDA0: [1;31mFAIL[0m

1/2 backends passed
[1;31mFAIL[0m


95% tests passed, 1 tests failed out of 20

Total Test time (real) = 302.39 sec

The following tests FAILED:
	 20 - test-backend-ops (Failed)
Errors while running CTest

real	5m2.421s
user	15m56.923s
sys	0m34.512s
